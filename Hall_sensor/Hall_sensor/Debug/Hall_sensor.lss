
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000075a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000075a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000007c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e98  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf2  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000562  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  0000282c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b0  00000000  00000000  00002f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000032ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  b4:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
    }	
}


void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	4b 01       	movw	r8, r22
  d6:	5c 01       	movw	r10, r24
  d8:	8a 01       	movw	r16, r20
	int val1 = (int)value; // pak getal voor de komma
  da:	0e 94 11 02 	call	0x422	; 0x422 <__fixsfsi>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
  e2:	07 2e       	mov	r0, r23
  e4:	00 0c       	add	r0, r0
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	0e 94 49 02 	call	0x492	; 0x492 <__floatsisf>
  ee:	9b 01       	movw	r18, r22
  f0:	ac 01       	movw	r20, r24
  f2:	c5 01       	movw	r24, r10
  f4:	b4 01       	movw	r22, r8
  f6:	0e 94 32 01 	call	0x264	; 0x264 <__subsf3>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	48 ec       	ldi	r20, 0xC8	; 200
 100:	52 e4       	ldi	r21, 0x42	; 66
 102:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__mulsf3>
 106:	0e 94 11 02 	call	0x422	; 0x422 <__fixsfsi>
 10a:	eb 01       	movw	r28, r22
 10c:	21 96       	adiw	r28, 0x01	; 1
	eeprom_write_byte((uint8_t*)address, val1);
 10e:	6c 2d       	mov	r22, r12
 110:	c8 01       	movw	r24, r16
 112:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 116:	6c 2f       	mov	r22, r28
 118:	c8 01       	movw	r24, r16
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <eeprom_write_byte>
	
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	bf 90       	pop	r11
 132:	af 90       	pop	r10
 134:	9f 90       	pop	r9
 136:	8f 90       	pop	r8
 138:	08 95       	ret

0000013a <main>:
void writeFloatToEEPROM(float value, int address);


int main(void)
{	
	init_millis(16000000UL);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	74 e2       	ldi	r23, 0x24	; 36
 13e:	84 ef       	ldi	r24, 0xF4	; 244
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 09 01 	call	0x212	; 0x212 <init_millis>
	sei();  // Enable interrupts
 146:	78 94       	sei
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
	
	DDRF = 1;		//output ledje
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		//input hall sensor
 14c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 14e:	18 b8       	out	0x08, r1	; 8
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
 150:	01 e0       	ldi	r16, 0x01	; 1
 152:	10 e0       	ldi	r17, 0x00	; 0
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
 154:	c1 2c       	mov	r12, r1
 156:	d1 2c       	mov	r13, r1
 158:	76 01       	movw	r14, r12
{	
	init_millis(16000000UL);
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 c0       	rjmp	.+2      	; 0x162 <main+0x28>
 160:	ce 01       	movw	r24, r28
		
	
	/* Replace with your application code */
    while (1) 
    {	
		huidige_status_hall = PINC & (1 << PC0); 
 162:	26 b1       	in	r18, 0x06	; 6
 164:	21 70       	andi	r18, 0x01	; 1
 166:	c2 2f       	mov	r28, r18
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	d2 2f       	mov	r29, r18
		
		if (vorige_status_hall != huidige_status_hall && huidige_status_hall == 1) {
 16c:	8c 17       	cp	r24, r28
 16e:	9d 07       	cpc	r25, r29
 170:	b9 f3       	breq	.-18     	; 0x160 <main+0x26>
 172:	c1 30       	cpi	r28, 0x01	; 1
 174:	d1 05       	cpc	r29, r1
 176:	a1 f7       	brne	.-24     	; 0x160 <main+0x26>
		
			huidige_tijd_ms = millis();
 178:	0e 94 22 01 	call	0x244	; 0x244 <millis>
 17c:	4b 01       	movw	r8, r22
 17e:	5c 01       	movw	r10, r24
			unsigned long verschil_tijd_ms = huidige_tijd_ms - vorige_tijd_ms; 
 180:	6c 19       	sub	r22, r12
 182:	7d 09       	sbc	r23, r13
 184:	8e 09       	sbc	r24, r14
 186:	9f 09       	sbc	r25, r15
			unsigned long verschil_tijd_s = verschil_tijd_ms / 1000; 
 188:	28 ee       	ldi	r18, 0xE8	; 232
 18a:	33 e0       	ldi	r19, 0x03	; 3
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodsi4>
			//float tijd_seconden = (float)verschil_tijd_ms / 1000.0; 
			//float snelheid_ms = OMTREK_WIEL * tijd_seconden; 	
			
					
			
			float snelheidms = OMTREK_WIEL / verschil_tijd_s;
 194:	ca 01       	movw	r24, r20
 196:	b9 01       	movw	r22, r18
 198:	0e 94 47 02 	call	0x48e	; 0x48e <__floatunsisf>
 19c:	9b 01       	movw	r18, r22
 19e:	ac 01       	movw	r20, r24
 1a0:	6d ec       	ldi	r22, 0xCD	; 205
 1a2:	7c ec       	ldi	r23, 0xCC	; 204
 1a4:	8c ea       	ldi	r24, 0xAC	; 172
 1a6:	9f e3       	ldi	r25, 0x3F	; 63
 1a8:	0e 94 9f 01 	call	0x33e	; 0x33e <__divsf3>
			float snelheidKmH = snelheidms * 3.6;  		
 1ac:	26 e6       	ldi	r18, 0x66	; 102
 1ae:	36 e6       	ldi	r19, 0x66	; 102
 1b0:	46 e6       	ldi	r20, 0x66	; 102
 1b2:	50 e4       	ldi	r21, 0x40	; 64
 1b4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__mulsf3>
			writeFloatToEEPROM(snelheidKmH, addressHall);
 1b8:	a8 01       	movw	r20, r16
 1ba:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			addressHall += 3;		
 1be:	0d 5f       	subi	r16, 0xFD	; 253
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
			
			
			
			vorige_tijd_ms = huidige_tijd_ms; 
 1c2:	75 01       	movw	r14, r10
 1c4:	64 01       	movw	r12, r8
 1c6:	cc cf       	rjmp	.-104    	; 0x160 <main+0x26>

000001c8 <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
  timer1_millis++;
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1e6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	a1 1d       	adc	r26, r1
 1ee:	b1 1d       	adc	r27, r1
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1fc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 212:	20 e4       	ldi	r18, 0x40	; 64
 214:	3f e1       	ldi	r19, 0x1F	; 31
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 21e:	e1 e8       	ldi	r30, 0x81	; 129
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	8a 60       	ori	r24, 0x0A	; 10
 226:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 228:	bb 27       	eor	r27, r27
 22a:	a5 2f       	mov	r26, r21
 22c:	94 2f       	mov	r25, r20
 22e:	83 2f       	mov	r24, r19
 230:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 234:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 238:	ef e6       	ldi	r30, 0x6F	; 111
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	80 83       	st	Z, r24
 242:	08 95       	ret

00000244 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 244:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	09 c0       	rjmp	.+18     	; 0x25c <millis+0x18>
    millis_return = timer1_millis;
 24a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 252:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 256:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	21 11       	cpse	r18, r1
 25e:	f5 cf       	rjmp	.-22     	; 0x24a <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 260:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 262:	08 95       	ret

00000264 <__subsf3>:
 264:	50 58       	subi	r21, 0x80	; 128

00000266 <__addsf3>:
 266:	bb 27       	eor	r27, r27
 268:	aa 27       	eor	r26, r26
 26a:	0e 94 4a 01 	call	0x294	; 0x294 <__addsf3x>
 26e:	0c 94 9b 02 	jmp	0x536	; 0x536 <__fp_round>
 272:	0e 94 8d 02 	call	0x51a	; 0x51a <__fp_pscA>
 276:	38 f0       	brcs	.+14     	; 0x286 <__addsf3+0x20>
 278:	0e 94 94 02 	call	0x528	; 0x528 <__fp_pscB>
 27c:	20 f0       	brcs	.+8      	; 0x286 <__addsf3+0x20>
 27e:	39 f4       	brne	.+14     	; 0x28e <__addsf3+0x28>
 280:	9f 3f       	cpi	r25, 0xFF	; 255
 282:	19 f4       	brne	.+6      	; 0x28a <__addsf3+0x24>
 284:	26 f4       	brtc	.+8      	; 0x28e <__addsf3+0x28>
 286:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_nan>
 28a:	0e f4       	brtc	.+2      	; 0x28e <__addsf3+0x28>
 28c:	e0 95       	com	r30
 28e:	e7 fb       	bst	r30, 7
 290:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_inf>

00000294 <__addsf3x>:
 294:	e9 2f       	mov	r30, r25
 296:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_split3>
 29a:	58 f3       	brcs	.-42     	; 0x272 <__addsf3+0xc>
 29c:	ba 17       	cp	r27, r26
 29e:	62 07       	cpc	r22, r18
 2a0:	73 07       	cpc	r23, r19
 2a2:	84 07       	cpc	r24, r20
 2a4:	95 07       	cpc	r25, r21
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <__addsf3x+0x1c>
 2a8:	79 f4       	brne	.+30     	; 0x2c8 <__addsf3x+0x34>
 2aa:	a6 f5       	brtc	.+104    	; 0x314 <__addsf3x+0x80>
 2ac:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_zero>
 2b0:	0e f4       	brtc	.+2      	; 0x2b4 <__addsf3x+0x20>
 2b2:	e0 95       	com	r30
 2b4:	0b 2e       	mov	r0, r27
 2b6:	ba 2f       	mov	r27, r26
 2b8:	a0 2d       	mov	r26, r0
 2ba:	0b 01       	movw	r0, r22
 2bc:	b9 01       	movw	r22, r18
 2be:	90 01       	movw	r18, r0
 2c0:	0c 01       	movw	r0, r24
 2c2:	ca 01       	movw	r24, r20
 2c4:	a0 01       	movw	r20, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	ff 27       	eor	r31, r31
 2ca:	59 1b       	sub	r21, r25
 2cc:	99 f0       	breq	.+38     	; 0x2f4 <__addsf3x+0x60>
 2ce:	59 3f       	cpi	r21, 0xF9	; 249
 2d0:	50 f4       	brcc	.+20     	; 0x2e6 <__addsf3x+0x52>
 2d2:	50 3e       	cpi	r21, 0xE0	; 224
 2d4:	68 f1       	brcs	.+90     	; 0x330 <__addsf3x+0x9c>
 2d6:	1a 16       	cp	r1, r26
 2d8:	f0 40       	sbci	r31, 0x00	; 0
 2da:	a2 2f       	mov	r26, r18
 2dc:	23 2f       	mov	r18, r19
 2de:	34 2f       	mov	r19, r20
 2e0:	44 27       	eor	r20, r20
 2e2:	58 5f       	subi	r21, 0xF8	; 248
 2e4:	f3 cf       	rjmp	.-26     	; 0x2cc <__addsf3x+0x38>
 2e6:	46 95       	lsr	r20
 2e8:	37 95       	ror	r19
 2ea:	27 95       	ror	r18
 2ec:	a7 95       	ror	r26
 2ee:	f0 40       	sbci	r31, 0x00	; 0
 2f0:	53 95       	inc	r21
 2f2:	c9 f7       	brne	.-14     	; 0x2e6 <__addsf3x+0x52>
 2f4:	7e f4       	brtc	.+30     	; 0x314 <__addsf3x+0x80>
 2f6:	1f 16       	cp	r1, r31
 2f8:	ba 0b       	sbc	r27, r26
 2fa:	62 0b       	sbc	r22, r18
 2fc:	73 0b       	sbc	r23, r19
 2fe:	84 0b       	sbc	r24, r20
 300:	ba f0       	brmi	.+46     	; 0x330 <__addsf3x+0x9c>
 302:	91 50       	subi	r25, 0x01	; 1
 304:	a1 f0       	breq	.+40     	; 0x32e <__addsf3x+0x9a>
 306:	ff 0f       	add	r31, r31
 308:	bb 1f       	adc	r27, r27
 30a:	66 1f       	adc	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	88 1f       	adc	r24, r24
 310:	c2 f7       	brpl	.-16     	; 0x302 <__addsf3x+0x6e>
 312:	0e c0       	rjmp	.+28     	; 0x330 <__addsf3x+0x9c>
 314:	ba 0f       	add	r27, r26
 316:	62 1f       	adc	r22, r18
 318:	73 1f       	adc	r23, r19
 31a:	84 1f       	adc	r24, r20
 31c:	48 f4       	brcc	.+18     	; 0x330 <__addsf3x+0x9c>
 31e:	87 95       	ror	r24
 320:	77 95       	ror	r23
 322:	67 95       	ror	r22
 324:	b7 95       	ror	r27
 326:	f7 95       	ror	r31
 328:	9e 3f       	cpi	r25, 0xFE	; 254
 32a:	08 f0       	brcs	.+2      	; 0x32e <__addsf3x+0x9a>
 32c:	b0 cf       	rjmp	.-160    	; 0x28e <__addsf3+0x28>
 32e:	93 95       	inc	r25
 330:	88 0f       	add	r24, r24
 332:	08 f0       	brcs	.+2      	; 0x336 <__addsf3x+0xa2>
 334:	99 27       	eor	r25, r25
 336:	ee 0f       	add	r30, r30
 338:	97 95       	ror	r25
 33a:	87 95       	ror	r24
 33c:	08 95       	ret

0000033e <__divsf3>:
 33e:	0e 94 b3 01 	call	0x366	; 0x366 <__divsf3x>
 342:	0c 94 9b 02 	jmp	0x536	; 0x536 <__fp_round>
 346:	0e 94 94 02 	call	0x528	; 0x528 <__fp_pscB>
 34a:	58 f0       	brcs	.+22     	; 0x362 <__divsf3+0x24>
 34c:	0e 94 8d 02 	call	0x51a	; 0x51a <__fp_pscA>
 350:	40 f0       	brcs	.+16     	; 0x362 <__divsf3+0x24>
 352:	29 f4       	brne	.+10     	; 0x35e <__divsf3+0x20>
 354:	5f 3f       	cpi	r21, 0xFF	; 255
 356:	29 f0       	breq	.+10     	; 0x362 <__divsf3+0x24>
 358:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_inf>
 35c:	51 11       	cpse	r21, r1
 35e:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_szero>
 362:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_nan>

00000366 <__divsf3x>:
 366:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_split3>
 36a:	68 f3       	brcs	.-38     	; 0x346 <__divsf3+0x8>

0000036c <__divsf3_pse>:
 36c:	99 23       	and	r25, r25
 36e:	b1 f3       	breq	.-20     	; 0x35c <__divsf3+0x1e>
 370:	55 23       	and	r21, r21
 372:	91 f3       	breq	.-28     	; 0x358 <__divsf3+0x1a>
 374:	95 1b       	sub	r25, r21
 376:	55 0b       	sbc	r21, r21
 378:	bb 27       	eor	r27, r27
 37a:	aa 27       	eor	r26, r26
 37c:	62 17       	cp	r22, r18
 37e:	73 07       	cpc	r23, r19
 380:	84 07       	cpc	r24, r20
 382:	38 f0       	brcs	.+14     	; 0x392 <__divsf3_pse+0x26>
 384:	9f 5f       	subi	r25, 0xFF	; 255
 386:	5f 4f       	sbci	r21, 0xFF	; 255
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	44 1f       	adc	r20, r20
 38e:	aa 1f       	adc	r26, r26
 390:	a9 f3       	breq	.-22     	; 0x37c <__divsf3_pse+0x10>
 392:	35 d0       	rcall	.+106    	; 0x3fe <__divsf3_pse+0x92>
 394:	0e 2e       	mov	r0, r30
 396:	3a f0       	brmi	.+14     	; 0x3a6 <__divsf3_pse+0x3a>
 398:	e0 e8       	ldi	r30, 0x80	; 128
 39a:	32 d0       	rcall	.+100    	; 0x400 <__LOCK_REGION_LENGTH__>
 39c:	91 50       	subi	r25, 0x01	; 1
 39e:	50 40       	sbci	r21, 0x00	; 0
 3a0:	e6 95       	lsr	r30
 3a2:	00 1c       	adc	r0, r0
 3a4:	ca f7       	brpl	.-14     	; 0x398 <__divsf3_pse+0x2c>
 3a6:	2b d0       	rcall	.+86     	; 0x3fe <__divsf3_pse+0x92>
 3a8:	fe 2f       	mov	r31, r30
 3aa:	29 d0       	rcall	.+82     	; 0x3fe <__divsf3_pse+0x92>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	bb 1f       	adc	r27, r27
 3b4:	26 17       	cp	r18, r22
 3b6:	37 07       	cpc	r19, r23
 3b8:	48 07       	cpc	r20, r24
 3ba:	ab 07       	cpc	r26, r27
 3bc:	b0 e8       	ldi	r27, 0x80	; 128
 3be:	09 f0       	breq	.+2      	; 0x3c2 <__divsf3_pse+0x56>
 3c0:	bb 0b       	sbc	r27, r27
 3c2:	80 2d       	mov	r24, r0
 3c4:	bf 01       	movw	r22, r30
 3c6:	ff 27       	eor	r31, r31
 3c8:	93 58       	subi	r25, 0x83	; 131
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	3a f0       	brmi	.+14     	; 0x3dc <__divsf3_pse+0x70>
 3ce:	9e 3f       	cpi	r25, 0xFE	; 254
 3d0:	51 05       	cpc	r21, r1
 3d2:	78 f0       	brcs	.+30     	; 0x3f2 <__divsf3_pse+0x86>
 3d4:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_inf>
 3d8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_szero>
 3dc:	5f 3f       	cpi	r21, 0xFF	; 255
 3de:	e4 f3       	brlt	.-8      	; 0x3d8 <__divsf3_pse+0x6c>
 3e0:	98 3e       	cpi	r25, 0xE8	; 232
 3e2:	d4 f3       	brlt	.-12     	; 0x3d8 <__divsf3_pse+0x6c>
 3e4:	86 95       	lsr	r24
 3e6:	77 95       	ror	r23
 3e8:	67 95       	ror	r22
 3ea:	b7 95       	ror	r27
 3ec:	f7 95       	ror	r31
 3ee:	9f 5f       	subi	r25, 0xFF	; 255
 3f0:	c9 f7       	brne	.-14     	; 0x3e4 <__divsf3_pse+0x78>
 3f2:	88 0f       	add	r24, r24
 3f4:	91 1d       	adc	r25, r1
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	97 f9       	bld	r25, 7
 3fc:	08 95       	ret
 3fe:	e1 e0       	ldi	r30, 0x01	; 1
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	88 1f       	adc	r24, r24
 406:	bb 1f       	adc	r27, r27
 408:	62 17       	cp	r22, r18
 40a:	73 07       	cpc	r23, r19
 40c:	84 07       	cpc	r24, r20
 40e:	ba 07       	cpc	r27, r26
 410:	20 f0       	brcs	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 412:	62 1b       	sub	r22, r18
 414:	73 0b       	sbc	r23, r19
 416:	84 0b       	sbc	r24, r20
 418:	ba 0b       	sbc	r27, r26
 41a:	ee 1f       	adc	r30, r30
 41c:	88 f7       	brcc	.-30     	; 0x400 <__LOCK_REGION_LENGTH__>
 41e:	e0 95       	com	r30
 420:	08 95       	ret

00000422 <__fixsfsi>:
 422:	0e 94 18 02 	call	0x430	; 0x430 <__fixunssfsi>
 426:	68 94       	set
 428:	b1 11       	cpse	r27, r1
 42a:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_szero>
 42e:	08 95       	ret

00000430 <__fixunssfsi>:
 430:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_splitA>
 434:	88 f0       	brcs	.+34     	; 0x458 <__fixunssfsi+0x28>
 436:	9f 57       	subi	r25, 0x7F	; 127
 438:	98 f0       	brcs	.+38     	; 0x460 <__fixunssfsi+0x30>
 43a:	b9 2f       	mov	r27, r25
 43c:	99 27       	eor	r25, r25
 43e:	b7 51       	subi	r27, 0x17	; 23
 440:	b0 f0       	brcs	.+44     	; 0x46e <__fixunssfsi+0x3e>
 442:	e1 f0       	breq	.+56     	; 0x47c <__fixunssfsi+0x4c>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	1a f0       	brmi	.+6      	; 0x454 <__fixunssfsi+0x24>
 44e:	ba 95       	dec	r27
 450:	c9 f7       	brne	.-14     	; 0x444 <__fixunssfsi+0x14>
 452:	14 c0       	rjmp	.+40     	; 0x47c <__fixunssfsi+0x4c>
 454:	b1 30       	cpi	r27, 0x01	; 1
 456:	91 f0       	breq	.+36     	; 0x47c <__fixunssfsi+0x4c>
 458:	0e 94 ce 02 	call	0x59c	; 0x59c <__fp_zero>
 45c:	b1 e0       	ldi	r27, 0x01	; 1
 45e:	08 95       	ret
 460:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_zero>
 464:	67 2f       	mov	r22, r23
 466:	78 2f       	mov	r23, r24
 468:	88 27       	eor	r24, r24
 46a:	b8 5f       	subi	r27, 0xF8	; 248
 46c:	39 f0       	breq	.+14     	; 0x47c <__fixunssfsi+0x4c>
 46e:	b9 3f       	cpi	r27, 0xF9	; 249
 470:	cc f3       	brlt	.-14     	; 0x464 <__fixunssfsi+0x34>
 472:	86 95       	lsr	r24
 474:	77 95       	ror	r23
 476:	67 95       	ror	r22
 478:	b3 95       	inc	r27
 47a:	d9 f7       	brne	.-10     	; 0x472 <__fixunssfsi+0x42>
 47c:	3e f4       	brtc	.+14     	; 0x48c <__fixunssfsi+0x5c>
 47e:	90 95       	com	r25
 480:	80 95       	com	r24
 482:	70 95       	com	r23
 484:	61 95       	neg	r22
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	8f 4f       	sbci	r24, 0xFF	; 255
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	08 95       	ret

0000048e <__floatunsisf>:
 48e:	e8 94       	clt
 490:	09 c0       	rjmp	.+18     	; 0x4a4 <__floatsisf+0x12>

00000492 <__floatsisf>:
 492:	97 fb       	bst	r25, 7
 494:	3e f4       	brtc	.+14     	; 0x4a4 <__floatsisf+0x12>
 496:	90 95       	com	r25
 498:	80 95       	com	r24
 49a:	70 95       	com	r23
 49c:	61 95       	neg	r22
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	99 23       	and	r25, r25
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <__floatsisf+0x40>
 4a8:	f9 2f       	mov	r31, r25
 4aa:	96 e9       	ldi	r25, 0x96	; 150
 4ac:	bb 27       	eor	r27, r27
 4ae:	93 95       	inc	r25
 4b0:	f6 95       	lsr	r31
 4b2:	87 95       	ror	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b7 95       	ror	r27
 4ba:	f1 11       	cpse	r31, r1
 4bc:	f8 cf       	rjmp	.-16     	; 0x4ae <__floatsisf+0x1c>
 4be:	fa f4       	brpl	.+62     	; 0x4fe <__floatsisf+0x6c>
 4c0:	bb 0f       	add	r27, r27
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__floatsisf+0x36>
 4c4:	60 ff       	sbrs	r22, 0
 4c6:	1b c0       	rjmp	.+54     	; 0x4fe <__floatsisf+0x6c>
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	16 c0       	rjmp	.+44     	; 0x4fe <__floatsisf+0x6c>
 4d2:	88 23       	and	r24, r24
 4d4:	11 f0       	breq	.+4      	; 0x4da <__floatsisf+0x48>
 4d6:	96 e9       	ldi	r25, 0x96	; 150
 4d8:	11 c0       	rjmp	.+34     	; 0x4fc <__floatsisf+0x6a>
 4da:	77 23       	and	r23, r23
 4dc:	21 f0       	breq	.+8      	; 0x4e6 <__floatsisf+0x54>
 4de:	9e e8       	ldi	r25, 0x8E	; 142
 4e0:	87 2f       	mov	r24, r23
 4e2:	76 2f       	mov	r23, r22
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <__floatsisf+0x5e>
 4e6:	66 23       	and	r22, r22
 4e8:	71 f0       	breq	.+28     	; 0x506 <__floatsisf+0x74>
 4ea:	96 e8       	ldi	r25, 0x86	; 134
 4ec:	86 2f       	mov	r24, r22
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	2a f0       	brmi	.+10     	; 0x4fe <__floatsisf+0x6c>
 4f4:	9a 95       	dec	r25
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	da f7       	brpl	.-10     	; 0x4f4 <__floatsisf+0x62>
 4fe:	88 0f       	add	r24, r24
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	97 f9       	bld	r25, 7
 506:	08 95       	ret

00000508 <__fp_inf>:
 508:	97 f9       	bld	r25, 7
 50a:	9f 67       	ori	r25, 0x7F	; 127
 50c:	80 e8       	ldi	r24, 0x80	; 128
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	08 95       	ret

00000514 <__fp_nan>:
 514:	9f ef       	ldi	r25, 0xFF	; 255
 516:	80 ec       	ldi	r24, 0xC0	; 192
 518:	08 95       	ret

0000051a <__fp_pscA>:
 51a:	00 24       	eor	r0, r0
 51c:	0a 94       	dec	r0
 51e:	16 16       	cp	r1, r22
 520:	17 06       	cpc	r1, r23
 522:	18 06       	cpc	r1, r24
 524:	09 06       	cpc	r0, r25
 526:	08 95       	ret

00000528 <__fp_pscB>:
 528:	00 24       	eor	r0, r0
 52a:	0a 94       	dec	r0
 52c:	12 16       	cp	r1, r18
 52e:	13 06       	cpc	r1, r19
 530:	14 06       	cpc	r1, r20
 532:	05 06       	cpc	r0, r21
 534:	08 95       	ret

00000536 <__fp_round>:
 536:	09 2e       	mov	r0, r25
 538:	03 94       	inc	r0
 53a:	00 0c       	add	r0, r0
 53c:	11 f4       	brne	.+4      	; 0x542 <__fp_round+0xc>
 53e:	88 23       	and	r24, r24
 540:	52 f0       	brmi	.+20     	; 0x556 <__fp_round+0x20>
 542:	bb 0f       	add	r27, r27
 544:	40 f4       	brcc	.+16     	; 0x556 <__fp_round+0x20>
 546:	bf 2b       	or	r27, r31
 548:	11 f4       	brne	.+4      	; 0x54e <__fp_round+0x18>
 54a:	60 ff       	sbrs	r22, 0
 54c:	04 c0       	rjmp	.+8      	; 0x556 <__fp_round+0x20>
 54e:	6f 5f       	subi	r22, 0xFF	; 255
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	8f 4f       	sbci	r24, 0xFF	; 255
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	08 95       	ret

00000558 <__fp_split3>:
 558:	57 fd       	sbrc	r21, 7
 55a:	90 58       	subi	r25, 0x80	; 128
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	59 f0       	breq	.+22     	; 0x578 <__fp_splitA+0x10>
 562:	5f 3f       	cpi	r21, 0xFF	; 255
 564:	71 f0       	breq	.+28     	; 0x582 <__fp_splitA+0x1a>
 566:	47 95       	ror	r20

00000568 <__fp_splitA>:
 568:	88 0f       	add	r24, r24
 56a:	97 fb       	bst	r25, 7
 56c:	99 1f       	adc	r25, r25
 56e:	61 f0       	breq	.+24     	; 0x588 <__fp_splitA+0x20>
 570:	9f 3f       	cpi	r25, 0xFF	; 255
 572:	79 f0       	breq	.+30     	; 0x592 <__fp_splitA+0x2a>
 574:	87 95       	ror	r24
 576:	08 95       	ret
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	14 06       	cpc	r1, r20
 57e:	55 1f       	adc	r21, r21
 580:	f2 cf       	rjmp	.-28     	; 0x566 <__fp_split3+0xe>
 582:	46 95       	lsr	r20
 584:	f1 df       	rcall	.-30     	; 0x568 <__fp_splitA>
 586:	08 c0       	rjmp	.+16     	; 0x598 <__fp_splitA+0x30>
 588:	16 16       	cp	r1, r22
 58a:	17 06       	cpc	r1, r23
 58c:	18 06       	cpc	r1, r24
 58e:	99 1f       	adc	r25, r25
 590:	f1 cf       	rjmp	.-30     	; 0x574 <__fp_splitA+0xc>
 592:	86 95       	lsr	r24
 594:	71 05       	cpc	r23, r1
 596:	61 05       	cpc	r22, r1
 598:	08 94       	sec
 59a:	08 95       	ret

0000059c <__fp_zero>:
 59c:	e8 94       	clt

0000059e <__fp_szero>:
 59e:	bb 27       	eor	r27, r27
 5a0:	66 27       	eor	r22, r22
 5a2:	77 27       	eor	r23, r23
 5a4:	cb 01       	movw	r24, r22
 5a6:	97 f9       	bld	r25, 7
 5a8:	08 95       	ret

000005aa <__mulsf3>:
 5aa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__mulsf3x>
 5ae:	0c 94 9b 02 	jmp	0x536	; 0x536 <__fp_round>
 5b2:	0e 94 8d 02 	call	0x51a	; 0x51a <__fp_pscA>
 5b6:	38 f0       	brcs	.+14     	; 0x5c6 <__mulsf3+0x1c>
 5b8:	0e 94 94 02 	call	0x528	; 0x528 <__fp_pscB>
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__mulsf3+0x1c>
 5be:	95 23       	and	r25, r21
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <__mulsf3+0x1c>
 5c2:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_inf>
 5c6:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_nan>
 5ca:	11 24       	eor	r1, r1
 5cc:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_szero>

000005d0 <__mulsf3x>:
 5d0:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_split3>
 5d4:	70 f3       	brcs	.-36     	; 0x5b2 <__mulsf3+0x8>

000005d6 <__mulsf3_pse>:
 5d6:	95 9f       	mul	r25, r21
 5d8:	c1 f3       	breq	.-16     	; 0x5ca <__mulsf3+0x20>
 5da:	95 0f       	add	r25, r21
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	55 1f       	adc	r21, r21
 5e0:	62 9f       	mul	r22, r18
 5e2:	f0 01       	movw	r30, r0
 5e4:	72 9f       	mul	r23, r18
 5e6:	bb 27       	eor	r27, r27
 5e8:	f0 0d       	add	r31, r0
 5ea:	b1 1d       	adc	r27, r1
 5ec:	63 9f       	mul	r22, r19
 5ee:	aa 27       	eor	r26, r26
 5f0:	f0 0d       	add	r31, r0
 5f2:	b1 1d       	adc	r27, r1
 5f4:	aa 1f       	adc	r26, r26
 5f6:	64 9f       	mul	r22, r20
 5f8:	66 27       	eor	r22, r22
 5fa:	b0 0d       	add	r27, r0
 5fc:	a1 1d       	adc	r26, r1
 5fe:	66 1f       	adc	r22, r22
 600:	82 9f       	mul	r24, r18
 602:	22 27       	eor	r18, r18
 604:	b0 0d       	add	r27, r0
 606:	a1 1d       	adc	r26, r1
 608:	62 1f       	adc	r22, r18
 60a:	73 9f       	mul	r23, r19
 60c:	b0 0d       	add	r27, r0
 60e:	a1 1d       	adc	r26, r1
 610:	62 1f       	adc	r22, r18
 612:	83 9f       	mul	r24, r19
 614:	a0 0d       	add	r26, r0
 616:	61 1d       	adc	r22, r1
 618:	22 1f       	adc	r18, r18
 61a:	74 9f       	mul	r23, r20
 61c:	33 27       	eor	r19, r19
 61e:	a0 0d       	add	r26, r0
 620:	61 1d       	adc	r22, r1
 622:	23 1f       	adc	r18, r19
 624:	84 9f       	mul	r24, r20
 626:	60 0d       	add	r22, r0
 628:	21 1d       	adc	r18, r1
 62a:	82 2f       	mov	r24, r18
 62c:	76 2f       	mov	r23, r22
 62e:	6a 2f       	mov	r22, r26
 630:	11 24       	eor	r1, r1
 632:	9f 57       	subi	r25, 0x7F	; 127
 634:	50 40       	sbci	r21, 0x00	; 0
 636:	9a f0       	brmi	.+38     	; 0x65e <__mulsf3_pse+0x88>
 638:	f1 f0       	breq	.+60     	; 0x676 <__mulsf3_pse+0xa0>
 63a:	88 23       	and	r24, r24
 63c:	4a f0       	brmi	.+18     	; 0x650 <__mulsf3_pse+0x7a>
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	bb 1f       	adc	r27, r27
 644:	66 1f       	adc	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	91 50       	subi	r25, 0x01	; 1
 64c:	50 40       	sbci	r21, 0x00	; 0
 64e:	a9 f7       	brne	.-22     	; 0x63a <__mulsf3_pse+0x64>
 650:	9e 3f       	cpi	r25, 0xFE	; 254
 652:	51 05       	cpc	r21, r1
 654:	80 f0       	brcs	.+32     	; 0x676 <__mulsf3_pse+0xa0>
 656:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_inf>
 65a:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_szero>
 65e:	5f 3f       	cpi	r21, 0xFF	; 255
 660:	e4 f3       	brlt	.-8      	; 0x65a <__mulsf3_pse+0x84>
 662:	98 3e       	cpi	r25, 0xE8	; 232
 664:	d4 f3       	brlt	.-12     	; 0x65a <__mulsf3_pse+0x84>
 666:	86 95       	lsr	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b7 95       	ror	r27
 66e:	f7 95       	ror	r31
 670:	e7 95       	ror	r30
 672:	9f 5f       	subi	r25, 0xFF	; 255
 674:	c1 f7       	brne	.-16     	; 0x666 <__mulsf3_pse+0x90>
 676:	fe 2b       	or	r31, r30
 678:	88 0f       	add	r24, r24
 67a:	91 1d       	adc	r25, r1
 67c:	96 95       	lsr	r25
 67e:	87 95       	ror	r24
 680:	97 f9       	bld	r25, 7
 682:	08 95       	ret

00000684 <__udivmodsi4>:
 684:	a1 e2       	ldi	r26, 0x21	; 33
 686:	1a 2e       	mov	r1, r26
 688:	aa 1b       	sub	r26, r26
 68a:	bb 1b       	sub	r27, r27
 68c:	fd 01       	movw	r30, r26
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <__udivmodsi4_ep>

00000690 <__udivmodsi4_loop>:
 690:	aa 1f       	adc	r26, r26
 692:	bb 1f       	adc	r27, r27
 694:	ee 1f       	adc	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	a2 17       	cp	r26, r18
 69a:	b3 07       	cpc	r27, r19
 69c:	e4 07       	cpc	r30, r20
 69e:	f5 07       	cpc	r31, r21
 6a0:	20 f0       	brcs	.+8      	; 0x6aa <__udivmodsi4_ep>
 6a2:	a2 1b       	sub	r26, r18
 6a4:	b3 0b       	sbc	r27, r19
 6a6:	e4 0b       	sbc	r30, r20
 6a8:	f5 0b       	sbc	r31, r21

000006aa <__udivmodsi4_ep>:
 6aa:	66 1f       	adc	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	1a 94       	dec	r1
 6b4:	69 f7       	brne	.-38     	; 0x690 <__udivmodsi4_loop>
 6b6:	60 95       	com	r22
 6b8:	70 95       	com	r23
 6ba:	80 95       	com	r24
 6bc:	90 95       	com	r25
 6be:	9b 01       	movw	r18, r22
 6c0:	ac 01       	movw	r20, r24
 6c2:	bd 01       	movw	r22, r26
 6c4:	cf 01       	movw	r24, r30
 6c6:	08 95       	ret

000006c8 <eeprom_write_byte>:
 6c8:	26 2f       	mov	r18, r22

000006ca <eeprom_write_r18>:
 6ca:	f9 99       	sbic	0x1f, 1	; 31
 6cc:	fe cf       	rjmp	.-4      	; 0x6ca <eeprom_write_r18>
 6ce:	92 bd       	out	0x22, r25	; 34
 6d0:	81 bd       	out	0x21, r24	; 33
 6d2:	20 bd       	out	0x20, r18	; 32
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	fa 9a       	sbi	0x1f, 2	; 31
 6da:	f9 9a       	sbi	0x1f, 1	; 31
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	08 95       	ret

000006e2 <_exit>:
 6e2:	f8 94       	cli

000006e4 <__stop_program>:
 6e4:	ff cf       	rjmp	.-2      	; 0x6e4 <__stop_program>
