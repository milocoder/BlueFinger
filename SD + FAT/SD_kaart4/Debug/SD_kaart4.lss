
SD_kaart4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000472  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001405  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfd  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f3  00000000  00000000  000026d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000745  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000808  00000000  00000000  00003761  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003f69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 e7       	ldi	r30, 0x72	; 114
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a0 30       	cpi	r26, 0x00	; 0
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a3 30       	cpi	r26, 0x03	; 3
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 35 02 	call	0x46a	; 0x46a <main>
  ca:	0c 94 37 02 	jmp	0x46e	; 0x46e <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_spi>:

	DESELECT();
	rcv_spi();

	return res;
}
  d2:	86 e1       	ldi	r24, 0x16	; 22
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	84 b9       	out	0x04, r24	; 4
  da:	81 e5       	ldi	r24, 0x51	; 81
  dc:	8c bd       	out	0x2c, r24	; 44
  de:	08 95       	ret

000000e0 <spi>:
  e0:	8e bd       	out	0x2e, r24	; 46
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <spi+0x2>
  e8:	8e b5       	in	r24, 0x2e	; 46
  ea:	08 95       	ret

000000ec <xmit_spi>:
  ec:	0e 94 70 00 	call	0xe0	; 0xe0 <spi>
  f0:	08 95       	ret

000000f2 <rcv_spi>:
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	0e 94 70 00 	call	0xe0	; 0xe0 <spi>
  f8:	08 95       	ret

000000fa <send_cmd>:
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	c8 2f       	mov	r28, r24
 106:	d4 2f       	mov	r29, r20
 108:	15 2f       	mov	r17, r21
 10a:	06 2f       	mov	r16, r22
 10c:	f7 2e       	mov	r15, r23
 10e:	88 23       	and	r24, r24
 110:	4c f4       	brge	.+18     	; 0x124 <send_cmd+0x2a>
 112:	cf 77       	andi	r28, 0x7F	; 127
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	ba 01       	movw	r22, r20
 11a:	87 e7       	ldi	r24, 0x77	; 119
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	50 f5       	brcc	.+84     	; 0x178 <send_cmd+0x7e>
 124:	85 b1       	in	r24, 0x05	; 5
 126:	82 60       	ori	r24, 0x02	; 2
 128:	85 b9       	out	0x05, r24	; 5
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 b9       	out	0x05, r24	; 5
 134:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
 13e:	8f 2d       	mov	r24, r15
 140:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
 144:	80 2f       	mov	r24, r16
 146:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
 14a:	81 2f       	mov	r24, r17
 14c:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
 150:	8d 2f       	mov	r24, r29
 152:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
 156:	c0 34       	cpi	r28, 0x40	; 64
 158:	11 f0       	breq	.+4      	; 0x15e <send_cmd+0x64>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	01 c0       	rjmp	.+2      	; 0x160 <send_cmd+0x66>
 15e:	85 e9       	ldi	r24, 0x95	; 149
 160:	c8 34       	cpi	r28, 0x48	; 72
 162:	09 f4       	brne	.+2      	; 0x166 <send_cmd+0x6c>
 164:	87 e8       	ldi	r24, 0x87	; 135
 166:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
 16a:	ca e0       	ldi	r28, 0x0A	; 10
 16c:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 170:	88 23       	and	r24, r24
 172:	14 f4       	brge	.+4      	; 0x178 <send_cmd+0x7e>
 174:	c1 50       	subi	r28, 0x01	; 1
 176:	d1 f7       	brne	.-12     	; 0x16c <send_cmd+0x72>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	08 95       	ret

00000184 <disk_writep>:

#if _USE_WRITE
DRESULT disk_writep(const BYTE *buff, /* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
                    DWORD       sc    /* Number of bytes to send, Sector number (LBA) or zero */
)
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	fc 01       	movw	r30, r24
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
 18e:	89 2b       	or	r24, r25
 190:	f1 f0       	breq	.+60     	; 0x1ce <disk_writep+0x4a>
		bc = sc;
 192:	ea 01       	movw	r28, r20
		while (bc && wc) { /* Send data bytes to the card */
 194:	11 c0       	rjmp	.+34     	; 0x1b8 <disk_writep+0x34>
			xmit_spi(*buff++);
 196:	8f 01       	movw	r16, r30
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
			wc--;
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			bc--;
 1b4:	21 97       	sbiw	r28, 0x01	; 1
	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
 1b6:	f8 01       	movw	r30, r16

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
 1b8:	20 97       	sbiw	r28, 0x00	; 0
 1ba:	09 f4       	brne	.+2      	; 0x1be <disk_writep+0x3a>
 1bc:	5f c0       	rjmp	.+190    	; 0x27c <disk_writep+0xf8>
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	89 2b       	or	r24, r25
 1c8:	31 f7       	brne	.-52     	; 0x196 <disk_writep+0x12>
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	5a c0       	rjmp	.+180    	; 0x282 <disk_writep+0xfe>
	} else {
		if (sc) { /* Initiate sector write process */
 1ce:	41 15       	cp	r20, r1
 1d0:	51 05       	cpc	r21, r1
 1d2:	61 05       	cpc	r22, r1
 1d4:	71 05       	cpc	r23, r1
 1d6:	01 f1       	breq	.+64     	; 0x218 <disk_writep+0x94>
			if (!(CardType & CT_BLOCK))
 1d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <CardType>
 1dc:	83 fd       	sbrc	r24, 3
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <disk_writep+0x6e>
				sc *= 512;                  /* Convert to byte address if needed */
 1e0:	03 2e       	mov	r0, r19
 1e2:	39 e0       	ldi	r19, 0x09	; 9
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	66 1f       	adc	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	3a 95       	dec	r19
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <disk_writep+0x60>
 1f0:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sc) == 0) { /* WRITE_SINGLE_BLOCK */
 1f2:	88 e5       	ldi	r24, 0x58	; 88
 1f4:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 1f8:	81 11       	cpse	r24, r1
 1fa:	42 c0       	rjmp	.+132    	; 0x280 <disk_writep+0xfc>
				xmit_spi(0xFF);
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				xmit_spi(0xFE); /* Data block header */
 202:	8e ef       	ldi	r24, 0xFE	; 254
 204:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	92 e0       	ldi	r25, 0x02	; 2
 20c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				res = RES_OK;
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	35 c0       	rjmp	.+106    	; 0x282 <disk_writep+0xfe>
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 220:	02 96       	adiw	r24, 0x02	; 2
			while (bc--) {
 222:	04 c0       	rjmp	.+8      	; 0x22c <disk_writep+0xa8>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
				res = RES_OK;
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
			while (bc--) {
 22a:	ce 01       	movw	r24, r28
 22c:	ec 01       	movw	r28, r24
 22e:	21 97       	sbiw	r28, 0x01	; 1
 230:	89 2b       	or	r24, r25
 232:	c1 f7       	brne	.-16     	; 0x224 <disk_writep+0xa0>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
			}
			do {
				res = rcv_spi();
 234:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 238:	c8 2f       	mov	r28, r24
			} while (res == 0xFF);
 23a:	8f 3f       	cpi	r24, 0xFF	; 255
 23c:	d9 f3       	breq	.-10     	; 0x234 <disk_writep+0xb0>
			if ((res & 0x1F) == 0x05) { /* Receive data resp and wait for end of write process in timeout of 500ms */
 23e:	8f 71       	andi	r24, 0x1F	; 31
 240:	85 30       	cpi	r24, 0x05	; 5
 242:	b1 f4       	brne	.+44     	; 0x270 <disk_writep+0xec>
 244:	09 c0       	rjmp	.+18     	; 0x258 <disk_writep+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	8f e8       	ldi	r24, 0x8F	; 143
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <disk_writep+0xc6>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <disk_writep+0xcc>
 250:	00 00       	nop
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) /* Wait for ready */
 252:	01 50       	subi	r16, 0x01	; 1
 254:	11 09       	sbc	r17, r1
 256:	02 c0       	rjmp	.+4      	; 0x25c <disk_writep+0xd8>
 258:	08 e8       	ldi	r16, 0x88	; 136
 25a:	13 e1       	ldi	r17, 0x13	; 19
 25c:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 260:	8f 3f       	cpi	r24, 0xFF	; 255
 262:	19 f0       	breq	.+6      	; 0x26a <disk_writep+0xe6>
 264:	01 15       	cp	r16, r1
 266:	11 05       	cpc	r17, r1
 268:	71 f7       	brne	.-36     	; 0x246 <disk_writep+0xc2>
					_delay_us(100);
				if (bc)
 26a:	01 2b       	or	r16, r17
 26c:	09 f0       	breq	.+2      	; 0x270 <disk_writep+0xec>
					res = RES_OK;
 26e:	c0 e0       	ldi	r28, 0x00	; 0
			}
			DESELECT();
 270:	85 b1       	in	r24, 0x05	; 5
 272:	82 60       	ori	r24, 0x02	; 2
 274:	85 b9       	out	0x05, r24	; 5
			rcv_spi();
 276:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 27a:	03 c0       	rjmp	.+6      	; 0x282 <disk_writep+0xfe>
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	01 c0       	rjmp	.+2      	; 0x282 <disk_writep+0xfe>
{
	DRESULT     res;
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;
 280:	c1 e0       	ldi	r28, 0x01	; 1
			rcv_spi();
		}
	}

	return res;
}
 282:	8c 2f       	mov	r24, r28
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(void)
{
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	00 d0       	rcall	.+0      	; 0x29c <disk_initialize+0xe>
 29c:	00 d0       	rcall	.+0      	; 0x29e <disk_initialize+0x10>
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && SELECTING)
 2a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <CardType>
 2a6:	88 23       	and	r24, r24
 2a8:	59 f0       	breq	.+22     	; 0x2c0 <disk_initialize+0x32>
 2aa:	20 9b       	sbis	0x04, 0	; 4
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <disk_initialize+0x32>
 2ae:	28 99       	sbic	0x05, 0	; 5
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <disk_initialize+0x32>
		disk_writep(0, 0); /* Finalize write process if it is in progress */
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	ba 01       	movw	r22, r20
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 c2 00 	call	0x184	; 0x184 <disk_writep>
#endif

	init_spi(); /* Initialize ports to control MMC */
 2c0:	0e 94 69 00 	call	0xd2	; 0xd2 <init_spi>
	DESELECT();
 2c4:	85 b1       	in	r24, 0x05	; 5
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	85 b9       	out	0x05, r24	; 5
	for (n = 10; n; n--)
 2ca:	1a e0       	ldi	r17, 0x0A	; 10
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <disk_initialize+0x46>
		rcv_spi(); /* 80 dummy clocks with CS=H */
 2ce:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
		disk_writep(0, 0); /* Finalize write process if it is in progress */
#endif

	init_spi(); /* Initialize ports to control MMC */
	DESELECT();
	for (n = 10; n; n--)
 2d2:	11 50       	subi	r17, 0x01	; 1
 2d4:	11 11       	cpse	r17, r1
 2d6:	fb cf       	rjmp	.-10     	; 0x2ce <disk_initialize+0x40>
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {         /* GO_IDLE_STATE */
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	ba 01       	movw	r22, r20
 2de:	80 e4       	ldi	r24, 0x40	; 64
 2e0:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	09 f0       	breq	.+2      	; 0x2ea <disk_initialize+0x5c>
 2e8:	9b c0       	rjmp	.+310    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
 2ea:	4a ea       	ldi	r20, 0xAA	; 170
 2ec:	51 e0       	ldi	r21, 0x01	; 1
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	88 e4       	ldi	r24, 0x48	; 72
 2f4:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <disk_initialize+0x70>
 2fc:	59 c0       	rjmp	.+178    	; 0x3b0 <disk_initialize+0x122>
 2fe:	0d c0       	rjmp	.+26     	; 0x31a <disk_initialize+0x8c>
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
 300:	e0 2e       	mov	r14, r16
 302:	f1 2c       	mov	r15, r1
 304:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 308:	e1 e0       	ldi	r30, 0x01	; 1
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ec 0f       	add	r30, r28
 30e:	fd 1f       	adc	r31, r29
 310:	ee 0d       	add	r30, r14
 312:	ff 1d       	adc	r31, r15
 314:	80 83       	st	Z, r24
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {         /* GO_IDLE_STATE */
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
 316:	0f 5f       	subi	r16, 0xFF	; 255
 318:	01 c0       	rjmp	.+2      	; 0x31c <disk_initialize+0x8e>
 31a:	01 2f       	mov	r16, r17
 31c:	04 30       	cpi	r16, 0x04	; 4
 31e:	80 f3       	brcs	.-32     	; 0x300 <disk_initialize+0x72>
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	09 f0       	breq	.+2      	; 0x328 <disk_initialize+0x9a>
 326:	7e c0       	rjmp	.+252    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 328:	8c 81       	ldd	r24, Y+4	; 0x04
 32a:	8a 3a       	cpi	r24, 0xAA	; 170
 32c:	61 f0       	breq	.+24     	; 0x346 <disk_initialize+0xb8>
	init_spi(); /* Initialize ports to control MMC */
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
 32e:	f1 2c       	mov	r15, r1
 330:	84 c0       	rjmp	.+264    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 332:	8f e8       	ldi	r24, 0x8F	; 143
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <disk_initialize+0xa8>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <disk_initialize+0xae>
 33c:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) {         /* GO_IDLE_STATE */
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	e9 1a       	sub	r14, r25
 342:	f1 08       	sbc	r15, r1
 344:	06 c0       	rjmp	.+12     	; 0x352 <disk_initialize+0xc4>
 346:	0f 2e       	mov	r0, r31
 348:	f0 e1       	ldi	r31, 0x10	; 16
 34a:	ef 2e       	mov	r14, r31
 34c:	f7 e2       	ldi	r31, 0x27	; 39
 34e:	ff 2e       	mov	r15, r31
 350:	f0 2d       	mov	r31, r0
 352:	e1 14       	cp	r14, r1
 354:	f1 04       	cpc	r15, r1
 356:	49 f0       	breq	.+18     	; 0x36a <disk_initialize+0xdc>
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	70 e4       	ldi	r23, 0x40	; 64
 360:	89 ee       	ldi	r24, 0xE9	; 233
 362:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 366:	81 11       	cpse	r24, r1
 368:	e4 cf       	rjmp	.-56     	; 0x332 <disk_initialize+0xa4>
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 36a:	ef 28       	or	r14, r15
 36c:	09 f4       	brne	.+2      	; 0x370 <disk_initialize+0xe2>
 36e:	5c c0       	rjmp	.+184    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	ba 01       	movw	r22, r20
 376:	8a e7       	ldi	r24, 0x7A	; 122
 378:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 37c:	88 23       	and	r24, r24
 37e:	71 f0       	breq	.+28     	; 0x39c <disk_initialize+0x10e>
	init_spi(); /* Initialize ports to control MMC */
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
 380:	f1 2c       	mov	r15, r1
 382:	5b c0       	rjmp	.+182    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
 384:	e1 2e       	mov	r14, r17
 386:	f1 2c       	mov	r15, r1
 388:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ec 0f       	add	r30, r28
 392:	fd 1f       	adc	r31, r29
 394:	ee 0d       	add	r30, r14
 396:	ff 1d       	adc	r31, r15
 398:	80 83       	st	Z, r24
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
 39a:	1f 5f       	subi	r17, 0xFF	; 255
 39c:	14 30       	cpi	r17, 0x04	; 4
 39e:	90 f3       	brcs	.-28     	; 0x384 <disk_initialize+0xf6>
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	86 ff       	sbrs	r24, 6
 3a4:	43 c0       	rjmp	.+134    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3a6:	0f 2e       	mov	r0, r31
 3a8:	fc e0       	ldi	r31, 0x0C	; 12
 3aa:	ff 2e       	mov	r15, r31
 3ac:	f0 2d       	mov	r31, r0
 3ae:	45 c0       	rjmp	.+138    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				}
			}
		} else { /* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	ba 01       	movw	r22, r20
 3b6:	89 ee       	ldi	r24, 0xE9	; 233
 3b8:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	40 f4       	brcc	.+16     	; 0x3d0 <disk_initialize+0x142>
				ty  = CT_SD1;
 3c0:	68 94       	set
 3c2:	ff 24       	eor	r15, r15
 3c4:	f1 f8       	bld	r15, 1
				cmd = ACMD41; /* SDv1 */
 3c6:	0f 2e       	mov	r0, r31
 3c8:	f9 ee       	ldi	r31, 0xE9	; 233
 3ca:	ef 2e       	mov	r14, r31
 3cc:	f0 2d       	mov	r31, r0
 3ce:	06 c0       	rjmp	.+12     	; 0x3dc <disk_initialize+0x14e>
			} else {
				ty  = CT_MMC;
 3d0:	ff 24       	eor	r15, r15
 3d2:	f3 94       	inc	r15
				cmd = CMD1; /* MMCv3 */
 3d4:	0f 2e       	mov	r0, r31
 3d6:	f1 e4       	ldi	r31, 0x41	; 65
 3d8:	ef 2e       	mov	r14, r31
 3da:	f0 2d       	mov	r31, r0
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
 3dc:	00 e1       	ldi	r16, 0x10	; 16
 3de:	17 e2       	ldi	r17, 0x27	; 39
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <disk_initialize+0x164>
 3e2:	8f e8       	ldi	r24, 0x8F	; 143
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <disk_initialize+0x158>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <disk_initialize+0x15e>
 3ec:	00 00       	nop
 3ee:	01 50       	subi	r16, 0x01	; 1
 3f0:	11 09       	sbc	r17, r1
 3f2:	01 15       	cp	r16, r1
 3f4:	11 05       	cpc	r17, r1
 3f6:	41 f0       	breq	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	ba 01       	movw	r22, r20
 3fe:	8e 2d       	mov	r24, r14
 400:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 404:	81 11       	cpse	r24, r1
 406:	ed cf       	rjmp	.-38     	; 0x3e2 <disk_initialize+0x154>
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
 408:	01 2b       	or	r16, r17
 40a:	a1 f0       	breq	.+40     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	52 e0       	ldi	r21, 0x02	; 2
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	80 e5       	ldi	r24, 0x50	; 80
 416:	0e 94 7d 00 	call	0xfa	; 0xfa <send_cmd>
 41a:	81 11       	cpse	r24, r1
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 41e:	0d c0       	rjmp	.+26     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	init_spi(); /* Initialize ports to control MMC */
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
 420:	f1 2c       	mov	r15, r1
 422:	0b c0       	rjmp	.+22     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 424:	f1 2c       	mov	r15, r1
 426:	09 c0       	rjmp	.+18     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 428:	f1 2c       	mov	r15, r1
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
 42c:	68 94       	set
 42e:	ff 24       	eor	r15, r15
 430:	f2 f8       	bld	r15, 2
 432:	03 c0       	rjmp	.+6      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				cmd = CMD1; /* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
				ty = 0;
 434:	f1 2c       	mov	r15, r1
 436:	01 c0       	rjmp	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
 43a:	f0 92 02 01 	sts	0x0102, r15	; 0x800102 <CardType>
	DESELECT();
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	82 60       	ori	r24, 0x02	; 2
 442:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
 444:	0e 94 79 00 	call	0xf2	; 0xf2 <rcv_spi>

	return ty ? 0 : STA_NOINIT;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	f1 10       	cpse	r15, r1
 44c:	80 e0       	ldi	r24, 0x00	; 0
}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	08 95       	ret

00000464 <init_sd_card>:
	FRESULT result;
	bool check = true; 

	/* Initialize physical drive */
	do {
		status = disk_initialize();
 464:	0e 94 47 01 	call	0x28e	; 0x28e <disk_initialize>
 468:	fd cf       	rjmp	.-6      	; 0x464 <init_sd_card>

0000046a <main>:
{
	/* Set clock to known value, e.g. 5MHz */
	//_PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));

	/* Initialize card */
	init_sd_card();
 46a:	0e 94 32 02 	call	0x464	; 0x464 <init_sd_card>

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>
