
SDKaart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001266  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd2  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000612  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e6  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051f  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000035e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  58:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  5c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  60:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  68:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  6c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  70:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  74:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  7c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  80:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  84:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  88:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  8c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  90:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  a4:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <SPI_init>:
}

void SPI_init()
{
	// zet CS, MOSI en SCK als output
	DDR_SPI |= (1 << CS) | (1 << MOSI) | (1 << SCK);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	84 b9       	out	0x04, r24	; 4

	// enable pull up resistor in MISO
	DDR_SPI |= (1 << MISO);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	84 b9       	out	0x04, r24	; 4

	// enable SPI, zet as master, and clock to fosc/128
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  b8:	83 e5       	ldi	r24, 0x53	; 83
  ba:	8c bd       	out	0x2c, r24	; 44
  bc:	08 95       	ret

000000be <SPI_transfer>:
}

uint8_t SPI_transfer(uint8_t data)
{
	SPDR = data;
  be:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1 << SPIF))); // wacht tot transmissie voltooid is
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <SPI_transfer+0x2>
	
	return SPDR;
  c6:	8e b5       	in	r24, 0x2e	; 46
  c8:	08 95       	ret

000000ca <SD_readRes1>:
	
	return res1;
}

uint8_t SD_readRes1()
{
  ca:	cf 93       	push	r28
	uint8_t i = 0, res1;
  cc:	c0 e0       	ldi	r28, 0x00	; 0
	// blijf checken tot data is ontvangen
	while((res1 = SPI_transfer(0xFF)) == 0xFF)
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <SD_readRes1+0xc>
	{
		i++;
  d0:	cf 5f       	subi	r28, 0xFF	; 255
		// als je voor 8 bytes geen data hebt ontvangen, break, dan is er een error
		if(i > 8) break;
  d2:	c9 30       	cpi	r28, 0x09	; 9
  d4:	28 f4       	brcc	.+10     	; 0xe0 <SD_readRes1+0x16>

uint8_t SD_readRes1()
{
	uint8_t i = 0, res1;
	// blijf checken tot data is ontvangen
	while((res1 = SPI_transfer(0xFF)) == 0xFF)
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
  dc:	8f 3f       	cpi	r24, 0xFF	; 255
  de:	c1 f3       	breq	.-16     	; 0xd0 <SD_readRes1+0x6>
		i++;
		// als je voor 8 bytes geen data hebt ontvangen, break, dan is er een error
		if(i > 8) break;
	}
	return res1;
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <SD_readRes3_7>:
	 CS_DISABLE();
	 SPI_transfer(0xFF);
}

void SD_readRes3_7(uint8_t *res)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	// read R1
	res[0] = SD_readRes1();
  ea:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
  ee:	88 83       	st	Y, r24

	// if error reading R1, return
	if(res[0] > 1) return;
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	80 f4       	brcc	.+32     	; 0x114 <SD_readRes3_7+0x30>

	// read remaining bytes
	res[1] = SPI_transfer(0xFF);
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
  fa:	89 83       	std	Y+1, r24	; 0x01
	res[2] = SPI_transfer(0xFF);
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 102:	8a 83       	std	Y+2, r24	; 0x02
	res[3] = SPI_transfer(0xFF);
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 10a:	8b 83       	std	Y+3, r24	; 0x03
	res[4] = SPI_transfer(0xFF);
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 112:	8c 83       	std	Y+4, r24	; 0x04
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <SD_readRes7>:
	CS_DISABLE();
	SPI_transfer(0xFF);
}

void SD_readRes7(uint8_t *res)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	res[0] = SD_readRes1();
 120:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 124:	88 83       	st	Y, r24
	if(res[0] > 1) return ; // als er een error in R1 is, return
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	80 f4       	brcc	.+32     	; 0x14a <SD_readRes7+0x30>
	// lees de resterende bytes
	res[1] = SPI_transfer(0xFF);
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 130:	89 83       	std	Y+1, r24	; 0x01
	res[2] = SPI_transfer(0xFF);
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 138:	8a 83       	std	Y+2, r24	; 0x02
	res[3] = SPI_transfer(0xFF);
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 140:	8b 83       	std	Y+3, r24	; 0x03
	res[4] = SPI_transfer(0xFF);
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 148:	8c 83       	std	Y+4, r24	; 0x04
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <SD_command>:
	}
	return res1;
}

void SD_command(uint8_t cmd, uint32_t arg, uint8_t crc)
{
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	d4 2f       	mov	r29, r20
 15c:	15 2f       	mov	r17, r21
 15e:	06 2f       	mov	r16, r22
 160:	f7 2e       	mov	r15, r23
 162:	c2 2f       	mov	r28, r18
	// verstuurt command
	SPI_transfer(cmd|0x40);
 164:	80 64       	ori	r24, 0x40	; 64
 166:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// verstuurt een 4 byte (32 bit) argument, 1 byte per keer, door telkens 8 bits te verschuiven
	SPI_transfer((uint8_t)(arg >> 24));
 16a:	8f 2d       	mov	r24, r15
 16c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	SPI_transfer((uint8_t)(arg >> 16));
 170:	80 2f       	mov	r24, r16
 172:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	SPI_transfer((uint8_t)(arg >> 8));
 176:	81 2f       	mov	r24, r17
 178:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	SPI_transfer((uint8_t)(arg));
 17c:	8d 2f       	mov	r24, r29
 17e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// verstuurt crc
	SPI_transfer(crc|0x01);
 182:	8c 2f       	mov	r24, r28
 184:	81 60       	ori	r24, 0x01	; 1
 186:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	08 95       	ret

00000196 <SD_readOCR>:
	return SD_SUCCESS;
	
}

void SD_readOCR(uint8_t *res)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	 // assert chip select
	 SPI_transfer(0xFF);
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	 CS_ENABLE();
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	85 b9       	out	0x05, r24	; 5
	 SPI_transfer(0xFF);
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>

	 // send CMD58
	 SD_command(CMD58, CMD58_ARG, CMD58_CRC);
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	ba 01       	movw	r22, r20
 1b6:	8a e3       	ldi	r24, 0x3A	; 58
 1b8:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>

	 // read response
	 SD_readRes3_7(res);
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 72 00 	call	0xe4	; 0xe4 <SD_readRes3_7>

	 // deassert chip select
	 SPI_transfer(0xFF);
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	 CS_DISABLE();
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 b9       	out	0x05, r24	; 5
	 SPI_transfer(0xFF);
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <SD_sendApp>:
	res[3] = SPI_transfer(0xFF);
	res[4] = SPI_transfer(0xFF);
}

uint8_t SD_sendApp()
{
 1da:	cf 93       	push	r28
	SPI_transfer(0xFF);
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	SD_command(CMD55, CMD55_ARG, CMD55_CRC);
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	ba 01       	movw	r22, r20
 1f6:	87 e3       	ldi	r24, 0x37	; 55
 1f8:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	uint8_t res1 = SD_readRes1();
 1fc:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 200:	c8 2f       	mov	r28, r24
	
	SPI_transfer(0xFF);
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	return res1;
}
 214:	8c 2f       	mov	r24, r28
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <SD_sendOpCond>:

uint8_t SD_sendOpCond()
{
 21a:	cf 93       	push	r28
	SPI_transfer(0xFF);
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 222:	85 b1       	in	r24, 0x05	; 5
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	SD_command(ACMD41, ACMD41_ARG, ACMD41_CRC);
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	70 e4       	ldi	r23, 0x40	; 64
 238:	89 e2       	ldi	r24, 0x29	; 41
 23a:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	uint8_t res1 = SD_readRes1();
 23e:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 242:	c8 2f       	mov	r28, r24
	
	SPI_transfer(0xFF);
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	return res1;
}
 256:	8c 2f       	mov	r24, r28
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <SD_sendIfCond>:

void SD_sendIfCond(uint8_t *res)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
	// assert chip select
	SPI_transfer(0xFF);
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// send CMD8
	SD_command(CMD8, CMD8_ARG, CMD8_CRC);
 274:	26 e8       	ldi	r18, 0x86	; 134
 276:	4a ea       	ldi	r20, 0xAA	; 170
 278:	51 e0       	ldi	r21, 0x01	; 1
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	SD_readRes7(res); // read response
 284:	ce 01       	movw	r24, r28
 286:	0e 94 8d 00 	call	0x11a	; 0x11a <SD_readRes7>
	// deassert chip select
	SPI_transfer(0xFF);
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 290:	85 b1       	in	r24, 0x05	; 5
 292:	81 60       	ori	r24, 0x01	; 1
 294:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <SD_goIdleState>:
	res[3] = SPI_transfer(0xFF);
	res[4] = SPI_transfer(0xFF);
}

uint8_t SD_goIdleState()
{
 2a2:	cf 93       	push	r28
	// assert chip select
	SPI_transfer(0xFF);
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	8e 7f       	andi	r24, 0xFE	; 254
 2ae:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// verstuurt CMD0
	SD_command(CMD0, CMD0_ARG, CMD0_CRC);
 2b6:	24 e9       	ldi	r18, 0x94	; 148
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	ba 01       	movw	r22, r20
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	// lees resultaat
	uint8_t res1 = SD_readRes1();
 2c4:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 2c8:	c8 2f       	mov	r28, r24
	// deassert chip select
	SPI_transfer(0xFF);
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	return res1;
}
 2dc:	8c 2f       	mov	r24, r28
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <SD_powerUpSeq>:
	// verstuurt crc
	SPI_transfer(crc|0x01);
}

void SD_powerUpSeq()
{
 2e2:	cf 93       	push	r28
	CS_DISABLE(); // deselecteer sd-kaart
 2e4:	85 b1       	in	r24, 0x05	; 5
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	9f e0       	ldi	r25, 0x0F	; 15
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <SD_powerUpSeq+0xc>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <SD_powerUpSeq+0x12>
 2f4:	00 00       	nop
	_delay_ms(1); // wacht op opstarten
	for(uint8_t i = 0; i < 10; i++) // stuur 80 clockcycles om te synchroniseren
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <SD_powerUpSeq+0x20>
	{
		SPI_transfer(0xFF);
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>

void SD_powerUpSeq()
{
	CS_DISABLE(); // deselecteer sd-kaart
	_delay_ms(1); // wacht op opstarten
	for(uint8_t i = 0; i < 10; i++) // stuur 80 clockcycles om te synchroniseren
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	ca 30       	cpi	r28, 0x0A	; 10
 304:	d0 f3       	brcs	.-12     	; 0x2fa <SD_powerUpSeq+0x18>
	{
		SPI_transfer(0xFF);
	}
	CS_DISABLE(); // deselecteer sd-kaart
 306:	85 b1       	in	r24, 0x05	; 5
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <SD_init>:
		}
    }
}

uint8_t SD_init()
{
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	00 d0       	rcall	.+0      	; 0x322 <SD_init+0xc>
 322:	00 d0       	rcall	.+0      	; 0x324 <SD_init+0xe>
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
	uint8_t res[5], cmdAttempts = 0;
	
	SD_powerUpSeq();
 32a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <SD_powerUpSeq>
    }
}

uint8_t SD_init()
{
	uint8_t res[5], cmdAttempts = 0;
 32e:	00 e0       	ldi	r16, 0x00	; 0
	
	SD_powerUpSeq();
	// zet kaart in idle stand
	while((res[0] = SD_goIdleState()) != 0x01)
 330:	03 c0       	rjmp	.+6      	; 0x338 <SD_init+0x22>
	{
		cmdAttempts++;
 332:	0f 5f       	subi	r16, 0xFF	; 255
		if(cmdAttempts > 10) return SD_ERROR; // return error als idle stand niet lukt
 334:	0b 30       	cpi	r16, 0x0B	; 11
 336:	78 f5       	brcc	.+94     	; 0x396 <SD_init+0x80>
{
	uint8_t res[5], cmdAttempts = 0;
	
	SD_powerUpSeq();
	// zet kaart in idle stand
	while((res[0] = SD_goIdleState()) != 0x01)
 338:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SD_goIdleState>
 33c:	18 2f       	mov	r17, r24
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	b9 f7       	brne	.-18     	; 0x332 <SD_init+0x1c>
		cmdAttempts++;
		if(cmdAttempts > 10) return SD_ERROR; // return error als idle stand niet lukt
	}
	
	// verstuur interface conditie (welke generatie de kaart is)
	SD_sendIfCond(res);
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	0e 94 2e 01 	call	0x25c	; 0x25c <SD_sendIfCond>
	if(res[0] != 0x01)
 34c:	f9 80       	ldd	r15, Y+1	; 0x01
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	f8 12       	cpse	r15, r24
 352:	26 c0       	rjmp	.+76     	; 0x3a0 <SD_init+0x8a>
	{
		return SD_ERROR; // error als de sd-kaart 1e generatie is ipv Version 2.00
	}
	
	// check echo pattern (geen idee wat dit inhoudt maar heb het maar overgenomen)
	if(res[4] != 0xAA)
 354:	8d 81       	ldd	r24, Y+5	; 0x05
 356:	8a 3a       	cpi	r24, 0xAA	; 170
 358:	01 f5       	brne	.+64     	; 0x39a <SD_init+0x84>
 35a:	00 e0       	ldi	r16, 0x00	; 0
	
	// sd-kaart initaliseren
	cmdAttempts = 0;
	do 
	{
		if(cmdAttempts > 100) return SD_ERROR;
 35c:	05 36       	cpi	r16, 0x65	; 101
 35e:	f8 f4       	brcc	.+62     	; 0x39e <SD_init+0x88>
		
		// stuur commando om aan te geven dat het commando hierna applicatie-specifiek is
		res[0] = SD_sendApp();
 360:	0e 94 ed 00 	call	0x1da	; 0x1da <SD_sendApp>
 364:	89 83       	std	Y+1, r24	; 0x01
		
		// als er geen error is -> verdergaan
		if(res[0] < 2)
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	18 f4       	brcc	.+6      	; 0x370 <SD_init+0x5a>
		{
			res[0] = SD_sendOpCond();
 36a:	0e 94 0d 01 	call	0x21a	; 0x21a <SD_sendOpCond>
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	8f e3       	ldi	r24, 0x3F	; 63
 372:	9c e9       	ldi	r25, 0x9C	; 156
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <SD_init+0x5e>
 378:	00 c0       	rjmp	.+0      	; 0x37a <SD_init+0x64>
 37a:	00 00       	nop
		}
		
		_delay_ms(10);
		cmdAttempts++;	
 37c:	0f 5f       	subi	r16, 0xFF	; 255
	} 
	while (res[0] != SD_READY);
 37e:	19 81       	ldd	r17, Y+1	; 0x01
 380:	11 11       	cpse	r17, r1
 382:	ec cf       	rjmp	.-40     	; 0x35c <SD_init+0x46>
	
	SD_readOCR(res);
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	0e 94 cb 00 	call	0x196	; 0x196 <SD_readOCR>
	
	if(!(res[1] & 0x80)) return SD_ERROR;
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	88 23       	and	r24, r24
 390:	3c f0       	brlt	.+14     	; 0x3a0 <SD_init+0x8a>
 392:	1f 2d       	mov	r17, r15
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <SD_init+0x8a>
	SD_powerUpSeq();
	// zet kaart in idle stand
	while((res[0] = SD_goIdleState()) != 0x01)
	{
		cmdAttempts++;
		if(cmdAttempts > 10) return SD_ERROR; // return error als idle stand niet lukt
 396:	11 e0       	ldi	r17, 0x01	; 1
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <SD_init+0x8a>
	}
	
	// check echo pattern (geen idee wat dit inhoudt maar heb het maar overgenomen)
	if(res[4] != 0xAA)
	{
		return SD_ERROR;
 39a:	1f 2d       	mov	r17, r15
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <SD_init+0x8a>
	
	// sd-kaart initaliseren
	cmdAttempts = 0;
	do 
	{
		if(cmdAttempts > 100) return SD_ERROR;
 39e:	1f 2d       	mov	r17, r15
	
	if(!(res[1] & 0x80)) return SD_ERROR;
	
	return SD_SUCCESS;
	
}
 3a0:	81 2f       	mov	r24, r17
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	08 95       	ret

000003b8 <main>:
uint8_t SD_init();

int main(void)
{
	uint8_t res[5];
	SPI_init(); // initialiseer SPI
 3b8:	0e 94 56 00 	call	0xac	; 0xac <SPI_init>
	uint8_t initResult = SD_init(); // returnt OF SD_ERROR = 1 OF SD_SUCCESS = 0; gebruik dit om een lampje aan uit of te zetten om te kijken of de initialisatie volledig lukt
 3bc:	0e 94 8b 01 	call	0x316	; 0x316 <SD_init>
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <main+0x8>

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
