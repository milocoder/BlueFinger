
SDKaart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015a1  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c25  00000000  00000000  00001c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000779  00000000  00000000  00002826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062e  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099e  00000000  00000000  0000380e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  58:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  5c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  60:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  68:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  6c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  70:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  74:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  7c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  80:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  84:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  88:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  8c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  90:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
  a4:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <SPI_init>:
	SPI_transfer(0xFF);
	CS_DISABLE();
	SPI_transfer(0xFF);

	return res1;
}
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	84 b9       	out	0x04, r24	; 4
  b8:	83 e5       	ldi	r24, 0x53	; 83
  ba:	8c bd       	out	0x2c, r24	; 44
  bc:	08 95       	ret

000000be <SPI_transfer>:
  be:	8e bd       	out	0x2e, r24	; 46
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <SPI_transfer+0x2>
  c6:	8e b5       	in	r24, 0x2e	; 46
  c8:	08 95       	ret

000000ca <SD_readRes1>:
  ca:	cf 93       	push	r28
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <SD_readRes1+0xc>
  d0:	cf 5f       	subi	r28, 0xFF	; 255
  d2:	c9 30       	cpi	r28, 0x09	; 9
  d4:	28 f4       	brcc	.+10     	; 0xe0 <SD_readRes1+0x16>
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
  dc:	8f 3f       	cpi	r24, 0xFF	; 255
  de:	c1 f3       	breq	.-16     	; 0xd0 <SD_readRes1+0x6>
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <SD_readRes3_7>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
  ee:	88 83       	st	Y, r24
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	80 f4       	brcc	.+32     	; 0x114 <SD_readRes3_7+0x30>
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 10a:	8b 83       	std	Y+3, r24	; 0x03
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 112:	8c 83       	std	Y+4, r24	; 0x04
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <SD_readRes7>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
 120:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 124:	88 83       	st	Y, r24
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	80 f4       	brcc	.+32     	; 0x14a <SD_readRes7+0x30>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 138:	8a 83       	std	Y+2, r24	; 0x02
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 140:	8b 83       	std	Y+3, r24	; 0x03
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 148:	8c 83       	std	Y+4, r24	; 0x04
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <SD_command>:
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	d4 2f       	mov	r29, r20
 15c:	15 2f       	mov	r17, r21
 15e:	06 2f       	mov	r16, r22
 160:	f7 2e       	mov	r15, r23
 162:	c2 2f       	mov	r28, r18
 164:	80 64       	ori	r24, 0x40	; 64
 166:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 16a:	8f 2d       	mov	r24, r15
 16c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 170:	80 2f       	mov	r24, r16
 172:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 176:	81 2f       	mov	r24, r17
 178:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 17c:	8d 2f       	mov	r24, r29
 17e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 182:	8c 2f       	mov	r24, r28
 184:	81 60       	ori	r24, 0x01	; 1
 186:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	08 95       	ret

00000196 <SD_writeSingleBlock>:
 196:	8f 92       	push	r8
 198:	9f 92       	push	r9
 19a:	af 92       	push	r10
 19c:	bf 92       	push	r11
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	4b 01       	movw	r8, r22
 1b0:	5c 01       	movw	r10, r24
 1b2:	8a 01       	movw	r16, r20
 1b4:	69 01       	movw	r12, r18
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	f9 01       	movw	r30, r18
 1ba:	80 83       	st	Z, r24
 1bc:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	b5 01       	movw	r22, r10
 1d0:	a4 01       	movw	r20, r8
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
 1d8:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 1dc:	e8 2e       	mov	r14, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	39 c0       	rjmp	.+114    	; 0x254 <SD_writeSingleBlock+0xbe>
 1e2:	8e ef       	ldi	r24, 0xFE	; 254
 1e4:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <SD_writeSingleBlock+0x66>
 1ee:	f8 01       	movw	r30, r16
 1f0:	ec 0f       	add	r30, r28
 1f2:	fd 1f       	adc	r31, r29
 1f4:	80 81       	ld	r24, Z
 1f6:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	c1 15       	cp	r28, r1
 1fe:	f2 e0       	ldi	r31, 0x02	; 2
 200:	df 07       	cpc	r29, r31
 202:	a8 f3       	brcs	.-22     	; 0x1ee <SD_writeSingleBlock+0x58>
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	0a c0       	rjmp	.+20     	; 0x21e <SD_writeSingleBlock+0x88>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 210:	f8 2e       	mov	r15, r24
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	f8 16       	cp	r15, r24
 216:	19 f0       	breq	.+6      	; 0x21e <SD_writeSingleBlock+0x88>
 218:	f6 01       	movw	r30, r12
 21a:	80 83       	st	Z, r24
 21c:	05 c0       	rjmp	.+10     	; 0x228 <SD_writeSingleBlock+0x92>
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	c3 34       	cpi	r28, 0x43	; 67
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	df 07       	cpc	r29, r31
 226:	89 f7       	brne	.-30     	; 0x20a <SD_writeSingleBlock+0x74>
 228:	8f 2d       	mov	r24, r15
 22a:	8f 71       	andi	r24, 0x1F	; 31
 22c:	85 30       	cpi	r24, 0x05	; 5
 22e:	91 f4       	brne	.+36     	; 0x254 <SD_writeSingleBlock+0xbe>
 230:	f6 01       	movw	r30, r12
 232:	80 83       	st	Z, r24
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	08 c0       	rjmp	.+16     	; 0x24a <SD_writeSingleBlock+0xb4>
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c3 34       	cpi	r28, 0x43	; 67
 23e:	ff e0       	ldi	r31, 0x0F	; 15
 240:	df 07       	cpc	r29, r31
 242:	19 f4       	brne	.+6      	; 0x24a <SD_writeSingleBlock+0xb4>
 244:	f6 01       	movw	r30, r12
 246:	10 82       	st	Z, r1
 248:	05 c0       	rjmp	.+10     	; 0x254 <SD_writeSingleBlock+0xbe>
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 250:	88 23       	and	r24, r24
 252:	99 f3       	breq	.-26     	; 0x23a <SD_writeSingleBlock+0xa4>
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	85 b9       	out	0x05, r24	; 5
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
 266:	8e 2d       	mov	r24, r14
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	bf 90       	pop	r11
 27a:	af 90       	pop	r10
 27c:	9f 90       	pop	r9
 27e:	8f 90       	pop	r8
 280:	08 95       	ret

00000282 <SD_readOCR>:
	return SD_SUCCESS;
	
}

void SD_readOCR(uint8_t *res)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
	 // assert chip select
	 SPI_transfer(0xFF);
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	 CS_ENABLE();
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	8e 7f       	andi	r24, 0xFE	; 254
 292:	85 b9       	out	0x05, r24	; 5
	 SPI_transfer(0xFF);
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>

	 // send CMD58
	 SD_command(CMD58, CMD58_ARG, CMD58_CRC);
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	ba 01       	movw	r22, r20
 2a2:	8a e3       	ldi	r24, 0x3A	; 58
 2a4:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>

	 // read response
	 SD_readRes3_7(res);
 2a8:	ce 01       	movw	r24, r28
 2aa:	0e 94 72 00 	call	0xe4	; 0xe4 <SD_readRes3_7>

	 // deassert chip select
	 SPI_transfer(0xFF);
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	 CS_DISABLE();
 2b4:	85 b1       	in	r24, 0x05	; 5
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	85 b9       	out	0x05, r24	; 5
	 SPI_transfer(0xFF);
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <SD_sendApp>:
	res[3] = SPI_transfer(0xFF);
	res[4] = SPI_transfer(0xFF);
}

uint8_t SD_sendApp()
{
 2c6:	cf 93       	push	r28
	SPI_transfer(0xFF);
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 2ce:	85 b1       	in	r24, 0x05	; 5
 2d0:	8e 7f       	andi	r24, 0xFE	; 254
 2d2:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	SD_command(CMD55, CMD55_ARG, CMD55_CRC);
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	ba 01       	movw	r22, r20
 2e2:	87 e3       	ldi	r24, 0x37	; 55
 2e4:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	uint8_t res1 = SD_readRes1();
 2e8:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 2ec:	c8 2f       	mov	r28, r24
	
	SPI_transfer(0xFF);
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 2f4:	85 b1       	in	r24, 0x05	; 5
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	return res1;
}
 300:	8c 2f       	mov	r24, r28
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <SD_sendOpCond>:

uint8_t SD_sendOpCond()
{
 306:	cf 93       	push	r28
	SPI_transfer(0xFF);
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	8e 7f       	andi	r24, 0xFE	; 254
 312:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	SD_command(ACMD41, ACMD41_ARG, ACMD41_CRC);
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	70 e4       	ldi	r23, 0x40	; 64
 324:	89 e2       	ldi	r24, 0x29	; 41
 326:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	uint8_t res1 = SD_readRes1();
 32a:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 32e:	c8 2f       	mov	r28, r24
	
	SPI_transfer(0xFF);
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 336:	85 b1       	in	r24, 0x05	; 5
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	return res1;
}
 342:	8c 2f       	mov	r24, r28
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <SD_sendIfCond>:

void SD_sendIfCond(uint8_t *res)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ec 01       	movw	r28, r24
	// assert chip select
	SPI_transfer(0xFF);
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 354:	85 b1       	in	r24, 0x05	; 5
 356:	8e 7f       	andi	r24, 0xFE	; 254
 358:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// send CMD8
	SD_command(CMD8, CMD8_ARG, CMD8_CRC);
 360:	26 e8       	ldi	r18, 0x86	; 134
 362:	4a ea       	ldi	r20, 0xAA	; 170
 364:	51 e0       	ldi	r21, 0x01	; 1
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	88 e0       	ldi	r24, 0x08	; 8
 36c:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	SD_readRes7(res); // read response
 370:	ce 01       	movw	r24, r28
 372:	0e 94 8d 00 	call	0x11a	; 0x11a <SD_readRes7>
	// deassert chip select
	SPI_transfer(0xFF);
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 37c:	85 b1       	in	r24, 0x05	; 5
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <SD_goIdleState>:
	res[3] = SPI_transfer(0xFF);
	res[4] = SPI_transfer(0xFF);
}

uint8_t SD_goIdleState()
{
 38e:	cf 93       	push	r28
	// assert chip select
	SPI_transfer(0xFF);
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 396:	85 b1       	in	r24, 0x05	; 5
 398:	8e 7f       	andi	r24, 0xFE	; 254
 39a:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// verstuurt CMD0
	SD_command(CMD0, CMD0_ARG, CMD0_CRC);
 3a2:	24 e9       	ldi	r18, 0x94	; 148
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	ba 01       	movw	r22, r20
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 a8 00 	call	0x150	; 0x150 <SD_command>
	// lees resultaat
	uint8_t res1 = SD_readRes1();
 3b0:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 3b4:	c8 2f       	mov	r28, r24
	// deassert chip select
	SPI_transfer(0xFF);
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	81 60       	ori	r24, 0x01	; 1
 3c0:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	return res1;
}
 3c8:	8c 2f       	mov	r24, r28
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <SD_powerUpSeq>:
	// verstuurt crc
	SPI_transfer(crc|0x01);
}

void SD_powerUpSeq()
{
 3ce:	cf 93       	push	r28
	CS_DISABLE(); // deselecteer sd-kaart
 3d0:	85 b1       	in	r24, 0x05	; 5
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d6:	8f e9       	ldi	r24, 0x9F	; 159
 3d8:	9f e0       	ldi	r25, 0x0F	; 15
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <SD_powerUpSeq+0xc>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <SD_powerUpSeq+0x12>
 3e0:	00 00       	nop
	_delay_ms(1); // wacht op opstarten
	for(uint8_t i = 0; i < 10; i++) // stuur 80 clockcycles om te synchroniseren
 3e2:	c0 e0       	ldi	r28, 0x00	; 0
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <SD_powerUpSeq+0x20>
	{
		SPI_transfer(0xFF);
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>

void SD_powerUpSeq()
{
	CS_DISABLE(); // deselecteer sd-kaart
	_delay_ms(1); // wacht op opstarten
	for(uint8_t i = 0; i < 10; i++) // stuur 80 clockcycles om te synchroniseren
 3ec:	cf 5f       	subi	r28, 0xFF	; 255
 3ee:	ca 30       	cpi	r28, 0x0A	; 10
 3f0:	d0 f3       	brcs	.-12     	; 0x3e6 <SD_powerUpSeq+0x18>
	{
		SPI_transfer(0xFF);
	}
	CS_DISABLE(); // deselecteer sd-kaart
 3f2:	85 b1       	in	r24, 0x05	; 5
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <SD_init>:

	return res1;
}

uint8_t SD_init()
{
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	00 d0       	rcall	.+0      	; 0x40e <SD_init+0xc>
 40e:	00 d0       	rcall	.+0      	; 0x410 <SD_init+0xe>
 410:	1f 92       	push	r1
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
	uint8_t res[5], cmdAttempts = 0;
	
	SD_powerUpSeq();
 416:	0e 94 e7 01 	call	0x3ce	; 0x3ce <SD_powerUpSeq>
	return res1;
}

uint8_t SD_init()
{
	uint8_t res[5], cmdAttempts = 0;
 41a:	00 e0       	ldi	r16, 0x00	; 0
	
	SD_powerUpSeq();
	// zet kaart in idle stand
	while((res[0] = SD_goIdleState()) != 0x01)
 41c:	03 c0       	rjmp	.+6      	; 0x424 <SD_init+0x22>
	{
		cmdAttempts++;
 41e:	0f 5f       	subi	r16, 0xFF	; 255
		if(cmdAttempts > 10) return SD_ERROR; // return error als idle stand niet lukt
 420:	0b 30       	cpi	r16, 0x0B	; 11
 422:	78 f5       	brcc	.+94     	; 0x482 <SD_init+0x80>
{
	uint8_t res[5], cmdAttempts = 0;
	
	SD_powerUpSeq();
	// zet kaart in idle stand
	while((res[0] = SD_goIdleState()) != 0x01)
 424:	0e 94 c7 01 	call	0x38e	; 0x38e <SD_goIdleState>
 428:	18 2f       	mov	r17, r24
 42a:	89 83       	std	Y+1, r24	; 0x01
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	b9 f7       	brne	.-18     	; 0x41e <SD_init+0x1c>
		cmdAttempts++;
		if(cmdAttempts > 10) return SD_ERROR; // return error als idle stand niet lukt
	}
	
	// verstuur interface conditie (welke generatie de kaart is)
	SD_sendIfCond(res);
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	0e 94 a4 01 	call	0x348	; 0x348 <SD_sendIfCond>
	if(res[0] != 0x01)
 438:	f9 80       	ldd	r15, Y+1	; 0x01
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	f8 12       	cpse	r15, r24
 43e:	26 c0       	rjmp	.+76     	; 0x48c <SD_init+0x8a>
	{
		return SD_ERROR; // error als de sd-kaart 1e generatie is ipv Version 2.00
	}
	
	// check echo pattern (geen idee wat dit inhoudt maar heb het maar overgenomen)
	if(res[4] != 0xAA)
 440:	8d 81       	ldd	r24, Y+5	; 0x05
 442:	8a 3a       	cpi	r24, 0xAA	; 170
 444:	01 f5       	brne	.+64     	; 0x486 <SD_init+0x84>
 446:	00 e0       	ldi	r16, 0x00	; 0
	
	// sd-kaart initaliseren
	cmdAttempts = 0;
	do 
	{
		if(cmdAttempts > 100) return SD_ERROR;
 448:	05 36       	cpi	r16, 0x65	; 101
 44a:	f8 f4       	brcc	.+62     	; 0x48a <SD_init+0x88>
		
		// stuur commando om aan te geven dat het commando hierna applicatie-specifiek is
		res[0] = SD_sendApp();
 44c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SD_sendApp>
 450:	89 83       	std	Y+1, r24	; 0x01
		
		// als er geen error is -> verdergaan
		if(res[0] < 2)
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	18 f4       	brcc	.+6      	; 0x45c <SD_init+0x5a>
		{
			res[0] = SD_sendOpCond();
 456:	0e 94 83 01 	call	0x306	; 0x306 <SD_sendOpCond>
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	8f e3       	ldi	r24, 0x3F	; 63
 45e:	9c e9       	ldi	r25, 0x9C	; 156
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <SD_init+0x5e>
 464:	00 c0       	rjmp	.+0      	; 0x466 <SD_init+0x64>
 466:	00 00       	nop
		}
		
		_delay_ms(10);
		cmdAttempts++;	
 468:	0f 5f       	subi	r16, 0xFF	; 255
	} 
	while (res[0] != SD_READY);
 46a:	19 81       	ldd	r17, Y+1	; 0x01
 46c:	11 11       	cpse	r17, r1
 46e:	ec cf       	rjmp	.-40     	; 0x448 <SD_init+0x46>
	
	SD_readOCR(res);
 470:	ce 01       	movw	r24, r28
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	0e 94 41 01 	call	0x282	; 0x282 <SD_readOCR>
	
	if(!(res[1] & 0x80)) return SD_ERROR;
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	88 23       	and	r24, r24
 47c:	3c f0       	brlt	.+14     	; 0x48c <SD_init+0x8a>
 47e:	1f 2d       	mov	r17, r15
 480:	05 c0       	rjmp	.+10     	; 0x48c <SD_init+0x8a>
	SD_powerUpSeq();
	// zet kaart in idle stand
	while((res[0] = SD_goIdleState()) != 0x01)
	{
		cmdAttempts++;
		if(cmdAttempts > 10) return SD_ERROR; // return error als idle stand niet lukt
 482:	11 e0       	ldi	r17, 0x01	; 1
 484:	03 c0       	rjmp	.+6      	; 0x48c <SD_init+0x8a>
	}
	
	// check echo pattern (geen idee wat dit inhoudt maar heb het maar overgenomen)
	if(res[4] != 0xAA)
	{
		return SD_ERROR;
 486:	1f 2d       	mov	r17, r15
 488:	01 c0       	rjmp	.+2      	; 0x48c <SD_init+0x8a>
	
	// sd-kaart initaliseren
	cmdAttempts = 0;
	do 
	{
		if(cmdAttempts > 100) return SD_ERROR;
 48a:	1f 2d       	mov	r17, r15
	
	if(!(res[1] & 0x80)) return SD_ERROR;
	
	return SD_SUCCESS;
	
}
 48c:	81 2f       	mov	r24, r17
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	08 95       	ret

000004a4 <main>:
uint8_t SD_init();
uint8_t SD_readSingleBlock(uint32_t addr, uint8_t *buf, uint8_t *token);
uint8_t SD_writeSingleBlock(uint32_t addr, uint8_t *buf, uint8_t *token);

int main(void)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	c1 50       	subi	r28, 0x01	; 1
 4ae:	d2 40       	sbci	r29, 0x02	; 2
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
	uint8_t res, sdBuf[512], token;
	SPI_init(); // initialiseer SPI
 4ba:	0e 94 56 00 	call	0xac	; 0xac <SPI_init>
	if(SD_init() != SD_SUCCESS)
 4be:	0e 94 01 02 	call	0x402	; 0x402 <SD_init>
 4c2:	88 23       	and	r24, r24
 4c4:	59 f0       	breq	.+22     	; 0x4dc <main+0x38>
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <main+0x22>
	{
		// lamp indicator dat het gelukt is te initialiseren
	}
	
	// vull buffer met 0x55;
	for (uint16_t i = 0; i < 512; i++) sdBuf[i] = 0x55;
 4c8:	e1 e0       	ldi	r30, 0x01	; 1
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	ec 0f       	add	r30, r28
 4ce:	fd 1f       	adc	r31, r29
 4d0:	e8 0f       	add	r30, r24
 4d2:	f9 1f       	adc	r31, r25
 4d4:	25 e5       	ldi	r18, 0x55	; 85
 4d6:	20 83       	st	Z, r18
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <main+0x3c>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	81 15       	cp	r24, r1
 4e2:	22 e0       	ldi	r18, 0x02	; 2
 4e4:	92 07       	cpc	r25, r18
 4e6:	80 f3       	brcs	.-32     	; 0x4c8 <main+0x24>
	// schijf 0x55 (85 in decimaal) naar alle 512 bytes op address 0x100 (256 in decimaal)
	res = SD_writeSingleBlock(0x00000100, sdBuf, &token);
 4e8:	9e 01       	movw	r18, r28
 4ea:	2f 5f       	subi	r18, 0xFF	; 255
 4ec:	3d 4f       	sbci	r19, 0xFD	; 253
 4ee:	ae 01       	movw	r20, r28
 4f0:	4f 5f       	subi	r20, 0xFF	; 255
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	71 e0       	ldi	r23, 0x01	; 1
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 cb 00 	call	0x196	; 0x196 <SD_writeSingleBlock>
 500:	ff cf       	rjmp	.-2      	; 0x500 <main+0x5c>

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
