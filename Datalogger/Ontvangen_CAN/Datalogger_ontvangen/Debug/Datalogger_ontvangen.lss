
Datalogger_ontvangen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000df  00800100  00800100  000004e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f8d  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4d  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fe  00000000  00000000  0000219e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000656  00000000  00000000  000028bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043d  00000000  00000000  00002f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000334f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	af 3d       	cpi	r26, 0xDF	; 223
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  b4:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <initCAN>:

	// Set the MOB's mode to transmission, also activating it.
	CANCDMOB |= (0x01 << CONMOB0);

	return 1;
}
  bc:	e8 ed       	ldi	r30, 0xD8	; 216
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
  d2:	83 e1       	ldi	r24, 0x13	; 19
  d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <initCAN+0x30>
  dc:	98 2f       	mov	r25, r24
  de:	92 95       	swap	r25
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
  e6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	b0 f3       	brcs	.-20     	; 0xdc <initCAN+0x20>
  f0:	78 94       	sei
  f2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
  f6:	80 eb       	ldi	r24, 0xB0	; 176
  f8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
  fc:	e8 ed       	ldi	r30, 0xD8	; 216
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <getFreeMob>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0a c0       	rjmp	.+20     	; 0x120 <getFreeMob+0x18>
 10c:	98 2f       	mov	r25, r24
 10e:	92 95       	swap	r25
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 116:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 11a:	90 7c       	andi	r25, 0xC0	; 192
 11c:	21 f0       	breq	.+8      	; 0x126 <getFreeMob+0x1e>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	8f 30       	cpi	r24, 0x0F	; 15
 122:	a0 f3       	brcs	.-24     	; 0x10c <getFreeMob+0x4>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	08 95       	ret

00000128 <listenForMessage>:
 * @param[in] id - the provided id
 * @return 0 if no free message objects left, 1 otherwise
 *
 */
uint8_t listenForMessage( uint16_t id, uint8_t expectedLength )
{
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
 130:	16 2f       	mov	r17, r22
	// Try to get a free MOb
	uint8_t mobIndex = getFreeMob();
 132:	0e 94 84 00 	call	0x108	; 0x108 <getFreeMob>

	if( mobIndex == 0xFF )
 136:	8f 3f       	cpi	r24, 0xFF	; 255
 138:	09 f4       	brne	.+2      	; 0x13c <listenForMessage+0x14>
 13a:	4e c0       	rjmp	.+156    	; 0x1d8 <listenForMessage+0xb0>
		// No free Message Objects
		return 0;
	}

	// Point to the free message object
	CANPAGE |= (mobIndex << 4);
 13c:	ed ee       	ldi	r30, 0xED	; 237
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	90 81       	ld	r25, Z
 142:	48 2f       	mov	r20, r24
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	9a 01       	movw	r18, r20
 148:	22 95       	swap	r18
 14a:	32 95       	swap	r19
 14c:	30 7f       	andi	r19, 0xF0	; 240
 14e:	32 27       	eor	r19, r18
 150:	20 7f       	andi	r18, 0xF0	; 240
 152:	32 27       	eor	r19, r18
 154:	29 2b       	or	r18, r25
 156:	20 83       	st	Z, r18

	// Set the MOb's CAN id to the id to be listened for
	CANIDT4 = 0;
 158:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
	CANIDT3 = 0;
 15c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	CANIDT2 = id << 5;
 160:	9c 2f       	mov	r25, r28
 162:	92 95       	swap	r25
 164:	99 0f       	add	r25, r25
 166:	90 7e       	andi	r25, 0xE0	; 224
 168:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
	CANIDT1 = id >> 3;
 16c:	d6 95       	lsr	r29
 16e:	c7 95       	ror	r28
 170:	d6 95       	lsr	r29
 172:	c7 95       	ror	r28
 174:	d6 95       	lsr	r29
 176:	c7 95       	ror	r28
 178:	c0 93 f3 00 	sts	0x00F3, r28	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>

	if( expectedLength > 8 )
 17c:	19 30       	cpi	r17, 0x09	; 9
 17e:	08 f0       	brcs	.+2      	; 0x182 <listenForMessage+0x5a>
	{
		expectedLength = 8;
 180:	18 e0       	ldi	r17, 0x08	; 8
	}

	// Set the MOb's expected length
	CANCDMOB |= expectedLength;
 182:	ef ee       	ldi	r30, 0xEF	; 239
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	60 81       	ld	r22, Z
 188:	61 2b       	or	r22, r17
 18a:	60 83       	st	Z, r22

	// Enable interrupts for this MOb
	if( mobIndex < 8 )
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	78 f4       	brcc	.+30     	; 0x1ae <listenForMessage+0x86>
	{
		CANIE2 |= (1 << mobIndex);
 190:	ee ed       	ldi	r30, 0xDE	; 222
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	40 81       	ld	r20, Z
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <listenForMessage+0x7a>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <listenForMessage+0x76>
 1a6:	cb 01       	movw	r24, r22
 1a8:	84 2b       	or	r24, r20
 1aa:	80 83       	st	Z, r24
 1ac:	0e c0       	rjmp	.+28     	; 0x1ca <listenForMessage+0xa2>
	}
	else
	{
		CANIE1 |= (1 << (mobIndex-8));
 1ae:	ef ed       	ldi	r30, 0xDF	; 223
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	20 81       	ld	r18, Z
 1b4:	48 50       	subi	r20, 0x08	; 8
 1b6:	51 09       	sbc	r21, r1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <listenForMessage+0x9a>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <listenForMessage+0x96>
 1c6:	82 2b       	or	r24, r18
 1c8:	80 83       	st	Z, r24
	}

	// Set the MOb's mode to receive, also activating it.
	CANCDMOB |= (0x02 << CONMOB0);
 1ca:	ef ee       	ldi	r30, 0xEF	; 239
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	80 83       	st	Z, r24

	return 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <listenForMessage+0xb2>
	uint8_t mobIndex = getFreeMob();

	if( mobIndex == 0xFF )
	{
		// No free Message Objects
		return 0;
 1d8:	80 e0       	ldi	r24, 0x00	; 0

	// Set the MOb's mode to receive, also activating it.
	CANCDMOB |= (0x02 << CONMOB0);

	return 1;
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	08 95       	ret

000001e2 <getMessage>:
 * @param[out] message - message data to fill
 * @return 1 if message was filled, 0 otherwise
 *
 */
uint8_t getMessage( CANMessage * message )
{
 1e2:	dc 01       	movw	r26, r24
	// Default to no message available
	uint8_t messageAvailable = 0;

	if( serviceIndex != bufIndex )
 1e4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <serviceIndex>
 1e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 1ec:	e8 17       	cp	r30, r24
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <getMessage+0x10>
 1f0:	41 c0       	rjmp	.+130    	; 0x274 <getMessage+0x92>
	{
		// Load the data from the next message received in FIFO order into the out message
		message->id = messageBuffer[ serviceIndex ].id;
 1f2:	2b e0       	ldi	r18, 0x0B	; 11
 1f4:	2e 9f       	mul	r18, r30
 1f6:	f0 01       	movw	r30, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	ed 5f       	subi	r30, 0xFD	; 253
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	30 81       	ld	r19, Z
 200:	81 81       	ldd	r24, Z+1	; 0x01
 202:	98 2f       	mov	r25, r24
 204:	97 70       	andi	r25, 0x07	; 7
 206:	3c 93       	st	X, r19
 208:	11 96       	adiw	r26, 0x01	; 1
 20a:	8c 91       	ld	r24, X
 20c:	11 97       	sbiw	r26, 0x01	; 1
 20e:	88 7f       	andi	r24, 0xF8	; 248
 210:	89 2b       	or	r24, r25
 212:	11 96       	adiw	r26, 0x01	; 1
 214:	8c 93       	st	X, r24
 216:	11 97       	sbiw	r26, 0x01	; 1
		message->length = messageBuffer[ serviceIndex ].length;
 218:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <serviceIndex>
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	26 9f       	mul	r18, r22
 220:	f0 01       	movw	r30, r0
 222:	27 9f       	mul	r18, r23
 224:	f0 0d       	add	r31, r0
 226:	11 24       	eor	r1, r1
 228:	ed 5f       	subi	r30, 0xFD	; 253
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	82 85       	ldd	r24, Z+10	; 0x0a
 22e:	1a 96       	adiw	r26, 0x0a	; 10
 230:	8c 93       	st	X, r24
 232:	1a 97       	sbiw	r26, 0x0a	; 10

		for( uint8_t i = 0; i < message->length; ++i )
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	12 c0       	rjmp	.+36     	; 0x25c <getMessage+0x7a>
		{
			message->data[ i ] = messageBuffer[ serviceIndex ].data[ i ];
 238:	29 2f       	mov	r18, r25
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	4b e0       	ldi	r20, 0x0B	; 11
 23e:	46 9f       	mul	r20, r22
 240:	f0 01       	movw	r30, r0
 242:	47 9f       	mul	r20, r23
 244:	f0 0d       	add	r31, r0
 246:	11 24       	eor	r1, r1
 248:	ed 5f       	subi	r30, 0xFD	; 253
 24a:	fe 4f       	sbci	r31, 0xFE	; 254
 24c:	e2 0f       	add	r30, r18
 24e:	f3 1f       	adc	r31, r19
 250:	42 81       	ldd	r20, Z+2	; 0x02
 252:	fd 01       	movw	r30, r26
 254:	e2 0f       	add	r30, r18
 256:	f3 1f       	adc	r31, r19
 258:	42 83       	std	Z+2, r20	; 0x02
	{
		// Load the data from the next message received in FIFO order into the out message
		message->id = messageBuffer[ serviceIndex ].id;
		message->length = messageBuffer[ serviceIndex ].length;

		for( uint8_t i = 0; i < message->length; ++i )
 25a:	9f 5f       	subi	r25, 0xFF	; 255
 25c:	98 17       	cp	r25, r24
 25e:	60 f3       	brcs	.-40     	; 0x238 <getMessage+0x56>
		{
			message->data[ i ] = messageBuffer[ serviceIndex ].data[ i ];
		}

		// Increment the index pointing to the next message to be serviced
		serviceIndex = (serviceIndex + 1) % MESSAGE_BUFFER_LENGTH;
 260:	cb 01       	movw	r24, r22
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	64 e1       	ldi	r22, 0x14	; 20
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 26c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <serviceIndex>

		messageAvailable = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
 *
 */
uint8_t getMessage( CANMessage * message )
{
	// Default to no message available
	uint8_t messageAvailable = 0;
 274:	80 e0       	ldi	r24, 0x00	; 0

		messageAvailable = 1;
	}

	return messageAvailable;
}
 276:	08 95       	ret

00000278 <__vector_18>:
 * Note that the NO_BLOCK attribute is not applied here, so while this is running,
 * all interrupts are blocked.
 *
 */
ISR( CANIT_vect )
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	cf 93       	push	r28
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	// **Save off CANPAGE to prevent application code bugs**
	uint8_t canPage = CANPAGE;
 29c:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 2a0:	87 c0       	rjmp	.+270    	; 0x3b0 <__vector_18+0x138>
	{
		// Point to the Message Object that needs to be serviced
		CANPAGE = CANHPMOB & 0xF0;
 2a2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>

		// Service the correct kind of interrupt
		// Transmit Interrupts
		if( CANSTMOB & (1 << TXOK) )
 2ac:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 2b0:	86 ff       	sbrs	r24, 6
 2b2:	0c c0       	rjmp	.+24     	; 0x2cc <__vector_18+0x54>
		{
			// Acknowledge the interrupt
			CANSTMOB = 0;
 2b4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>

			// Free up the MOb
			CANCDMOB = 0;
 2b8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>

			// Determine the MOb index
			uint8_t mob = (CANPAGE & 0xF0) >> 8;
 2bc:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>

			// Disable interrupts for this MOb
			if( mob < 8 )
			{
				CANIE2 &= ~(1 << mob);
 2c0:	ee ed       	ldi	r30, 0xDE	; 222
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	80 83       	st	Z, r24
 2ca:	72 c0       	rjmp	.+228    	; 0x3b0 <__vector_18+0x138>
			{
				CANIE1 &= ~(1 << (mob-8));
			}
		}
		// Receive Interrupts
		else if ( CANSTMOB & (1 << RXOK) )
 2cc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 2d0:	85 ff       	sbrs	r24, 5
 2d2:	62 c0       	rjmp	.+196    	; 0x398 <__vector_18+0x120>
		{
			// Default to impossible ID
			uint16_t id = 0xFFFF;

			// Load the message data into a free message buffer object
			if( CANCDMOB & (1 << IDE) )
 2d4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 2d8:	84 ff       	sbrs	r24, 4
 2da:	0e c0       	rjmp	.+28     	; 0x2f8 <__vector_18+0x80>
			{
				// Message type is CAN 2.0B
				id = (CANIDT4 >> 3) | ((CANIDT3 & 0x7F) << 5); 
 2dc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 2e0:	86 95       	lsr	r24
 2e2:	86 95       	lsr	r24
 2e4:	86 95       	lsr	r24
 2e6:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 2ea:	4f 77       	andi	r20, 0x7F	; 127
 2ec:	90 e2       	ldi	r25, 0x20	; 32
 2ee:	49 9f       	mul	r20, r25
 2f0:	a0 01       	movw	r20, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	48 2b       	or	r20, r24
 2f6:	0f c0       	rjmp	.+30     	; 0x316 <__vector_18+0x9e>
			}
			else
			{
				// Message type is CAN 2.0A
				id = (CANIDT2 >> 5) | (((uint16_t)CANIDT1 << 3));
 2f8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 2fc:	82 95       	swap	r24
 2fe:	86 95       	lsr	r24
 300:	87 70       	andi	r24, 0x07	; 7
 302:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	44 0f       	add	r20, r20
 30a:	55 1f       	adc	r21, r21
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	48 2b       	or	r20, r24
			}

			messageBuffer[bufIndex].id = id;
 316:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bufIndex>
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	8b e0       	ldi	r24, 0x0B	; 11
 31e:	82 9f       	mul	r24, r18
 320:	f0 01       	movw	r30, r0
 322:	83 9f       	mul	r24, r19
 324:	f0 0d       	add	r31, r0
 326:	11 24       	eor	r1, r1
 328:	ed 5f       	subi	r30, 0xFD	; 253
 32a:	fe 4f       	sbci	r31, 0xFE	; 254
 32c:	40 83       	st	Z, r20
 32e:	95 2f       	mov	r25, r21
 330:	97 70       	andi	r25, 0x07	; 7
 332:	81 81       	ldd	r24, Z+1	; 0x01
 334:	88 7f       	andi	r24, 0xF8	; 248
 336:	89 2b       	or	r24, r25
 338:	81 83       	std	Z+1, r24	; 0x01

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;
 33a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 33e:	8f 70       	andi	r24, 0x0F	; 15
 340:	82 87       	std	Z+10, r24	; 0x0a

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e c0       	rjmp	.+28     	; 0x362 <__vector_18+0xea>
			{
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
 346:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 34a:	4b e0       	ldi	r20, 0x0B	; 11
 34c:	42 9f       	mul	r20, r18
 34e:	f0 01       	movw	r30, r0
 350:	43 9f       	mul	r20, r19
 352:	f0 0d       	add	r31, r0
 354:	11 24       	eor	r1, r1
 356:	ed 5f       	subi	r30, 0xFD	; 253
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	e9 0f       	add	r30, r25
 35c:	f1 1d       	adc	r31, r1
 35e:	82 83       	std	Z+2, r24	; 0x02
			messageBuffer[bufIndex].id = id;

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 360:	9f 5f       	subi	r25, 0xFF	; 255
 362:	8b e0       	ldi	r24, 0x0B	; 11
 364:	82 9f       	mul	r24, r18
 366:	f0 01       	movw	r30, r0
 368:	83 9f       	mul	r24, r19
 36a:	f0 0d       	add	r31, r0
 36c:	11 24       	eor	r1, r1
 36e:	ed 5f       	subi	r30, 0xFD	; 253
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	82 85       	ldd	r24, Z+10	; 0x0a
 374:	98 17       	cp	r25, r24
 376:	38 f3       	brcs	.-50     	; 0x346 <__vector_18+0xce>
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
			}

			bufIndex = (bufIndex + 1) % MESSAGE_BUFFER_LENGTH;
 378:	c9 01       	movw	r24, r18
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	64 e1       	ldi	r22, 0x14	; 20
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 384:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufIndex>

			// Acknowledge the interrupt
			CANSTMOB = 0;
 388:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>

			CANCDMOB |= (2 << CONMOB0);
 38c:	ef ee       	ldi	r30, 0xEF	; 239
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	80 68       	ori	r24, 0x80	; 128
 394:	80 83       	st	Z, r24
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <__vector_18+0x138>
			
		}
		else if ( CANGIT & ~(1 << CANIT) )
 398:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	89 2b       	or	r24, r25
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <__vector_18+0x138>
		{
			// Preserve the last error received
			lastError = CANGIT;
 3a4:	ea ed       	ldi	r30, 0xDA	; 218
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			// Clear the error
			CANGIT = 0;
 3ae:	10 82       	st	Z, r1
	uint8_t canPage = CANPAGE;

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 3b0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 3b4:	82 95       	swap	r24
 3b6:	8f 70       	andi	r24, 0x0F	; 15
 3b8:	8f 30       	cpi	r24, 0x0F	; 15
 3ba:	09 f0       	breq	.+2      	; 0x3be <__vector_18+0x146>
 3bc:	72 cf       	rjmp	.-284    	; 0x2a2 <__vector_18+0x2a>
			CANGIT = 0;
		}
	}

	// Restore CANPAGE register to where application code had it before interrupt
	CANPAGE = canPage;
 3be:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	cf 91       	pop	r28
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <main>:

#define CAN_ID_SNELHEIDSMETER 0x50


int main(void)
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	2b 97       	sbiw	r28, 0x0b	; 11
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	CANMessage rx_message; 
	uint8_t result; 
   
    DDRC |= (1<<PC0);
 3fa:	87 b1       	in	r24, 0x07	; 7
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	87 b9       	out	0x07, r24	; 7
	initCAN(); 
 400:	0e 94 5e 00 	call	0xbc	; 0xbc <initCAN>
   
   	result = listenForMessage(CAN_ID_SNELHEIDSMETER, 8);
 404:	68 e0       	ldi	r22, 0x08	; 8
 406:	80 e5       	ldi	r24, 0x50	; 80
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 94 00 	call	0x128	; 0x128 <listenForMessage>
		// PORTC |= (1<<PC0);				//hoog maken pin
	
		// PORTC &= ~(1 << PC0);			//laag maken pin	
		
		
			uint8_t myMessage = getMessage(&rx_message);
 40e:	ce 01       	movw	r24, r28
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <getMessage>
			if (myMessage) {
 416:	88 23       	and	r24, r24
 418:	d1 f3       	breq	.-12     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				
						PORTC = (1<<PC0);	
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	88 b9       	out	0x08, r24	; 8
 41e:	f7 cf       	rjmp	.-18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>

00000420 <__divmodhi4>:
 420:	97 fb       	bst	r25, 7
 422:	07 2e       	mov	r0, r23
 424:	16 f4       	brtc	.+4      	; 0x42a <__divmodhi4+0xa>
 426:	00 94       	com	r0
 428:	07 d0       	rcall	.+14     	; 0x438 <__divmodhi4_neg1>
 42a:	77 fd       	sbrc	r23, 7
 42c:	09 d0       	rcall	.+18     	; 0x440 <__divmodhi4_neg2>
 42e:	0e 94 24 02 	call	0x448	; 0x448 <__udivmodhi4>
 432:	07 fc       	sbrc	r0, 7
 434:	05 d0       	rcall	.+10     	; 0x440 <__divmodhi4_neg2>
 436:	3e f4       	brtc	.+14     	; 0x446 <__divmodhi4_exit>

00000438 <__divmodhi4_neg1>:
 438:	90 95       	com	r25
 43a:	81 95       	neg	r24
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__divmodhi4_neg2>:
 440:	70 95       	com	r23
 442:	61 95       	neg	r22
 444:	7f 4f       	sbci	r23, 0xFF	; 255

00000446 <__divmodhi4_exit>:
 446:	08 95       	ret

00000448 <__udivmodhi4>:
 448:	aa 1b       	sub	r26, r26
 44a:	bb 1b       	sub	r27, r27
 44c:	51 e1       	ldi	r21, 0x11	; 17
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__udivmodhi4_ep>

00000450 <__udivmodhi4_loop>:
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	a6 17       	cp	r26, r22
 456:	b7 07       	cpc	r27, r23
 458:	10 f0       	brcs	.+4      	; 0x45e <__udivmodhi4_ep>
 45a:	a6 1b       	sub	r26, r22
 45c:	b7 0b       	sbc	r27, r23

0000045e <__udivmodhi4_ep>:
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	5a 95       	dec	r21
 464:	a9 f7       	brne	.-22     	; 0x450 <__udivmodhi4_loop>
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	bc 01       	movw	r22, r24
 46c:	cd 01       	movw	r24, r26
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
