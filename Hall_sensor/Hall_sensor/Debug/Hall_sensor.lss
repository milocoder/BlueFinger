
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000083a  000008ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  000008d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000940  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecb  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0a  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b0  00000000  00000000  00002495  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c0  00000000  00000000  00003199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_12>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e3       	ldi	r30, 0x3A	; 58
  a8:	f8 e0       	ldi	r31, 0x08	; 8
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a4 30       	cpi	r26, 0x04	; 4
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a4 e0       	ldi	r26, 0x04	; 4
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a0 31       	cpi	r26, 0x10	; 16
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  ca:	0c 94 1b 04 	jmp	0x836	; 0x836 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <CalculateSpeed>:
		
	}
	
}

float CalculateSpeed() {
  d2:	8f 92       	push	r8
  d4:	9f 92       	push	r9
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <CalculateSpeed+0x16>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	float snelheidKmH = 0.0; // Snelheid in km/h
	volatile int rpmaantal = 0; // Aantal keer magneet langs hall
  ec:	1a 82       	std	Y+2, r1	; 0x02
  ee:	19 82       	std	Y+1, r1	; 0x01
	unsigned long HuidigAantalMili = millis();
  f0:	0e 94 a3 01 	call	0x346	; 0x346 <millis>
  f4:	4b 01       	movw	r8, r22
  f6:	5c 01       	movw	r10, r24
	unsigned long TijdsVerschilMilli = HuidigAantalMili - VorigeMilli;
  f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <VorigeMilli>
  fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <VorigeMilli+0x1>
 100:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <VorigeMilli+0x2>
 104:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <VorigeMilli+0x3>
 108:	a5 01       	movw	r20, r10
 10a:	94 01       	movw	r18, r8
 10c:	28 1b       	sub	r18, r24
 10e:	39 0b       	sbc	r19, r25
 110:	4a 0b       	sbc	r20, r26
 112:	5b 0b       	sbc	r21, r27
 114:	ca 01       	movw	r24, r20
 116:	b9 01       	movw	r22, r18
	TijdsVerschilSeconden = TijdsVerschilMilli / 1000.0;
 118:	0e 94 c8 02 	call	0x590	; 0x590 <__floatunsisf>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	4a e7       	ldi	r20, 0x7A	; 122
 122:	54 e4       	ldi	r21, 0x44	; 68
 124:	0e 94 20 02 	call	0x440	; 0x440 <__divsf3>
 128:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 12c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 130:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 134:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>

	if(PINC & (1 << PC0)){
 138:	30 9b       	sbis	0x06, 0	; 6
 13a:	07 c0       	rjmp	.+14     	; 0x14a <CalculateSpeed+0x78>
		rpmaantal++;
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	89 83       	std	Y+1, r24	; 0x01
		PORTF = 0xFF;	//led lichtje voor feedback
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	81 bb       	out	0x11, r24	; 17
	}

	// Meet de snelheid alleen als er minstens één omwenteling is gedetecteerd en een kwart seconde voorbij is
	if(rpmaantal > 0 && TijdsVerschilSeconden > 0.25) {
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	18 16       	cp	r1, r24
 150:	19 06       	cpc	r1, r25
 152:	dc f5       	brge	.+118    	; 0x1ca <CalculateSpeed+0xf8>
 154:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end>
 158:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x1>
 15c:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end+0x2>
 160:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x3>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e8       	ldi	r20, 0x80	; 128
 16a:	5e e3       	ldi	r21, 0x3E	; 62
 16c:	c7 01       	movw	r24, r14
 16e:	b6 01       	movw	r22, r12
 170:	0e 94 56 03 	call	0x6ac	; 0x6ac <__gesf2>
 174:	18 16       	cp	r1, r24
 176:	6c f5       	brge	.+90     	; 0x1d2 <CalculateSpeed+0x100>
		snelheidKmH = (OmtrekWiel* rpmaantal * 3.6) / TijdsVerschilSeconden;
 178:	69 81       	ldd	r22, Y+1	; 0x01
 17a:	7a 81       	ldd	r23, Y+2	; 0x02
 17c:	07 2e       	mov	r0, r23
 17e:	00 0c       	add	r0, r0
 180:	88 0b       	sbc	r24, r24
 182:	99 0b       	sbc	r25, r25
 184:	0e 94 ca 02 	call	0x594	; 0x594 <__floatsisf>
 188:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 194:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 198:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__mulsf3>
 19c:	26 e6       	ldi	r18, 0x66	; 102
 19e:	36 e6       	ldi	r19, 0x66	; 102
 1a0:	46 e6       	ldi	r20, 0x66	; 102
 1a2:	50 e4       	ldi	r21, 0x40	; 64
 1a4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__mulsf3>
 1a8:	a7 01       	movw	r20, r14
 1aa:	96 01       	movw	r18, r12
 1ac:	0e 94 20 02 	call	0x440	; 0x440 <__divsf3>
 1b0:	6b 01       	movw	r12, r22
 1b2:	7c 01       	movw	r14, r24
		

		// Reset de teller en de timer voor de volgende meting
		rpmaantal = 0;
 1b4:	1a 82       	std	Y+2, r1	; 0x02
 1b6:	19 82       	std	Y+1, r1	; 0x01
		VorigeMilli = HuidigAantalMili;
 1b8:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <VorigeMilli>
 1bc:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <VorigeMilli+0x1>
 1c0:	a0 92 0a 01 	sts	0x010A, r10	; 0x80010a <VorigeMilli+0x2>
 1c4:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <VorigeMilli+0x3>
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <CalculateSpeed+0x106>
	}
	
}

float CalculateSpeed() {
	float snelheidKmH = 0.0; // Snelheid in km/h
 1ca:	c1 2c       	mov	r12, r1
 1cc:	d1 2c       	mov	r13, r1
 1ce:	76 01       	movw	r14, r12
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <CalculateSpeed+0x106>
 1d2:	c1 2c       	mov	r12, r1
 1d4:	d1 2c       	mov	r13, r1
 1d6:	76 01       	movw	r14, r12
		VorigeMilli = HuidigAantalMili;
	}


	// Als er meer dan 2 seconden voorbij is dan en de rmpaantal is gelijk aan 0 -> auto staat stil of aan opstarten. Min. meting snelheid = 2.5 kmh
	if(TijdsVerschilSeconden > 2 && rpmaantal == 0) snelheidKmH = 0.0;
 1d8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 1dc:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 1e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
 1e4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e4       	ldi	r21, 0x40	; 64
 1f0:	0e 94 56 03 	call	0x6ac	; 0x6ac <__gesf2>
 1f4:	18 16       	cp	r1, r24
 1f6:	3c f4       	brge	.+14     	; 0x206 <CalculateSpeed+0x134>
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	89 2b       	or	r24, r25
 1fe:	19 f4       	brne	.+6      	; 0x206 <CalculateSpeed+0x134>
 200:	c1 2c       	mov	r12, r1
 202:	d1 2c       	mov	r13, r1
 204:	76 01       	movw	r14, r12
	
	
	return snelheidKmH;
}
 206:	c7 01       	movw	r24, r14
 208:	b6 01       	movw	r22, r12
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	bf 90       	pop	r11
 21c:	af 90       	pop	r10
 21e:	9f 90       	pop	r9
 220:	8f 90       	pop	r8
 222:	08 95       	ret

00000224 <writeFloatToEEPROM>:

void writeFloatToEEPROM(float value, int address)
{
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	4b 01       	movw	r8, r22
 23e:	5c 01       	movw	r10, r24
 240:	8a 01       	movw	r16, r20
	int val1 = (int)value; // pak getal voor de komma
 242:	0e 94 92 02 	call	0x524	; 0x524 <__fixsfsi>
 246:	6b 01       	movw	r12, r22
 248:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
 24a:	07 2e       	mov	r0, r23
 24c:	00 0c       	add	r0, r0
 24e:	88 0b       	sbc	r24, r24
 250:	99 0b       	sbc	r25, r25
 252:	0e 94 ca 02 	call	0x594	; 0x594 <__floatsisf>
 256:	9b 01       	movw	r18, r22
 258:	ac 01       	movw	r20, r24
 25a:	c5 01       	movw	r24, r10
 25c:	b4 01       	movw	r22, r8
 25e:	0e 94 b3 01 	call	0x366	; 0x366 <__subsf3>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	48 ec       	ldi	r20, 0xC8	; 200
 268:	52 e4       	ldi	r21, 0x42	; 66
 26a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__mulsf3>
 26e:	0e 94 92 02 	call	0x524	; 0x524 <__fixsfsi>
 272:	eb 01       	movw	r28, r22
 274:	21 96       	adiw	r28, 0x01	; 1
	eeprom_write_byte((uint8_t*)address, val1);
 276:	6c 2d       	mov	r22, r12
 278:	c8 01       	movw	r24, r16
 27a:	0e 94 0e 04 	call	0x81c	; 0x81c <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 27e:	6c 2f       	mov	r22, r28
 280:	c8 01       	movw	r24, r16
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	0e 94 0e 04 	call	0x81c	; 0x81c <eeprom_write_byte>
	
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	9f 90       	pop	r9
 29e:	8f 90       	pop	r8
 2a0:	08 95       	ret

000002a2 <main>:
void writeFloatToEEPROM(float value, int address);
float CalculateSpeed(); 


int main() {
	init_millis(16000000UL);  
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	74 e2       	ldi	r23, 0x24	; 36
 2a6:	84 ef       	ldi	r24, 0xF4	; 244
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 8a 01 	call	0x314	; 0x314 <init_millis>
	sei();  // Enable interrupts
 2ae:	78 94       	sei
	
	DDRF = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 bb       	out	0x10, r24	; 16
	DDRC = 0; 
 2b4:	17 b8       	out	0x07, r1	; 7
	PORTC = 0; 	
 2b6:	18 b8       	out	0x08, r1	; 8
	
	int addressHall = 1;
 2b8:	c1 e0       	ldi	r28, 0x01	; 1
 2ba:	d0 e0       	ldi	r29, 0x00	; 0

	while (1) {
		float Speed = CalculateSpeed();	
 2bc:	0e 94 69 00 	call	0xd2	; 0xd2 <CalculateSpeed>

		//naar EEPROM schrijven
		writeFloatToEEPROM(Speed, addressHall);
 2c0:	ae 01       	movw	r20, r28
 2c2:	0e 94 12 01 	call	0x224	; 0x224 <writeFloatToEEPROM>
		addressHall += 3;
 2c6:	23 96       	adiw	r28, 0x03	; 3
 2c8:	f9 cf       	rjmp	.-14     	; 0x2bc <main+0x1a>

000002ca <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
  timer1_millis++;
 2dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer1_millis>
 2e0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer1_millis+0x1>
 2e4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer1_millis+0x2>
 2e8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer1_millis+0x3>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	a1 1d       	adc	r26, r1
 2f0:	b1 1d       	adc	r27, r1
 2f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer1_millis>
 2f6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <timer1_millis+0x1>
 2fa:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <timer1_millis+0x2>
 2fe:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <timer1_millis+0x3>
}
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 314:	20 e4       	ldi	r18, 0x40	; 64
 316:	3f e1       	ldi	r19, 0x1F	; 31
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 320:	e1 e8       	ldi	r30, 0x81	; 129
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	8a 60       	ori	r24, 0x0A	; 10
 328:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 32a:	bb 27       	eor	r27, r27
 32c:	a5 2f       	mov	r26, r21
 32e:	94 2f       	mov	r25, r20
 330:	83 2f       	mov	r24, r19
 332:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 336:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 33a:	ef e6       	ldi	r30, 0x6F	; 111
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	82 60       	ori	r24, 0x02	; 2
 342:	80 83       	st	Z, r24
 344:	08 95       	ret

00000346 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 346:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	09 c0       	rjmp	.+18     	; 0x35e <millis+0x18>
    millis_return = timer1_millis;
 34c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <timer1_millis>
 350:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <timer1_millis+0x1>
 354:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer1_millis+0x2>
 358:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer1_millis+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	21 11       	cpse	r18, r1
 360:	f5 cf       	rjmp	.-22     	; 0x34c <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 362:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 364:	08 95       	ret

00000366 <__subsf3>:
 366:	50 58       	subi	r21, 0x80	; 128

00000368 <__addsf3>:
 368:	bb 27       	eor	r27, r27
 36a:	aa 27       	eor	r26, r26
 36c:	0e 94 cb 01 	call	0x396	; 0x396 <__addsf3x>
 370:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_round>
 374:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_pscA>
 378:	38 f0       	brcs	.+14     	; 0x388 <__addsf3+0x20>
 37a:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscB>
 37e:	20 f0       	brcs	.+8      	; 0x388 <__addsf3+0x20>
 380:	39 f4       	brne	.+14     	; 0x390 <__addsf3+0x28>
 382:	9f 3f       	cpi	r25, 0xFF	; 255
 384:	19 f4       	brne	.+6      	; 0x38c <__addsf3+0x24>
 386:	26 f4       	brtc	.+8      	; 0x390 <__addsf3+0x28>
 388:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_nan>
 38c:	0e f4       	brtc	.+2      	; 0x390 <__addsf3+0x28>
 38e:	e0 95       	com	r30
 390:	e7 fb       	bst	r30, 7
 392:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>

00000396 <__addsf3x>:
 396:	e9 2f       	mov	r30, r25
 398:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_split3>
 39c:	58 f3       	brcs	.-42     	; 0x374 <__addsf3+0xc>
 39e:	ba 17       	cp	r27, r26
 3a0:	62 07       	cpc	r22, r18
 3a2:	73 07       	cpc	r23, r19
 3a4:	84 07       	cpc	r24, r20
 3a6:	95 07       	cpc	r25, r21
 3a8:	20 f0       	brcs	.+8      	; 0x3b2 <__addsf3x+0x1c>
 3aa:	79 f4       	brne	.+30     	; 0x3ca <__addsf3x+0x34>
 3ac:	a6 f5       	brtc	.+104    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ae:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_zero>
 3b2:	0e f4       	brtc	.+2      	; 0x3b6 <__addsf3x+0x20>
 3b4:	e0 95       	com	r30
 3b6:	0b 2e       	mov	r0, r27
 3b8:	ba 2f       	mov	r27, r26
 3ba:	a0 2d       	mov	r26, r0
 3bc:	0b 01       	movw	r0, r22
 3be:	b9 01       	movw	r22, r18
 3c0:	90 01       	movw	r18, r0
 3c2:	0c 01       	movw	r0, r24
 3c4:	ca 01       	movw	r24, r20
 3c6:	a0 01       	movw	r20, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	ff 27       	eor	r31, r31
 3cc:	59 1b       	sub	r21, r25
 3ce:	99 f0       	breq	.+38     	; 0x3f6 <__addsf3x+0x60>
 3d0:	59 3f       	cpi	r21, 0xF9	; 249
 3d2:	50 f4       	brcc	.+20     	; 0x3e8 <__addsf3x+0x52>
 3d4:	50 3e       	cpi	r21, 0xE0	; 224
 3d6:	68 f1       	brcs	.+90     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3d8:	1a 16       	cp	r1, r26
 3da:	f0 40       	sbci	r31, 0x00	; 0
 3dc:	a2 2f       	mov	r26, r18
 3de:	23 2f       	mov	r18, r19
 3e0:	34 2f       	mov	r19, r20
 3e2:	44 27       	eor	r20, r20
 3e4:	58 5f       	subi	r21, 0xF8	; 248
 3e6:	f3 cf       	rjmp	.-26     	; 0x3ce <__addsf3x+0x38>
 3e8:	46 95       	lsr	r20
 3ea:	37 95       	ror	r19
 3ec:	27 95       	ror	r18
 3ee:	a7 95       	ror	r26
 3f0:	f0 40       	sbci	r31, 0x00	; 0
 3f2:	53 95       	inc	r21
 3f4:	c9 f7       	brne	.-14     	; 0x3e8 <__addsf3x+0x52>
 3f6:	7e f4       	brtc	.+30     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f8:	1f 16       	cp	r1, r31
 3fa:	ba 0b       	sbc	r27, r26
 3fc:	62 0b       	sbc	r22, r18
 3fe:	73 0b       	sbc	r23, r19
 400:	84 0b       	sbc	r24, r20
 402:	ba f0       	brmi	.+46     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 404:	91 50       	subi	r25, 0x01	; 1
 406:	a1 f0       	breq	.+40     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 408:	ff 0f       	add	r31, r31
 40a:	bb 1f       	adc	r27, r27
 40c:	66 1f       	adc	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	88 1f       	adc	r24, r24
 412:	c2 f7       	brpl	.-16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 414:	0e c0       	rjmp	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 416:	ba 0f       	add	r27, r26
 418:	62 1f       	adc	r22, r18
 41a:	73 1f       	adc	r23, r19
 41c:	84 1f       	adc	r24, r20
 41e:	48 f4       	brcc	.+18     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 420:	87 95       	ror	r24
 422:	77 95       	ror	r23
 424:	67 95       	ror	r22
 426:	b7 95       	ror	r27
 428:	f7 95       	ror	r31
 42a:	9e 3f       	cpi	r25, 0xFE	; 254
 42c:	08 f0       	brcs	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	b0 cf       	rjmp	.-160    	; 0x390 <__addsf3+0x28>
 430:	93 95       	inc	r25
 432:	88 0f       	add	r24, r24
 434:	08 f0       	brcs	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	99 27       	eor	r25, r25
 438:	ee 0f       	add	r30, r30
 43a:	97 95       	ror	r25
 43c:	87 95       	ror	r24
 43e:	08 95       	ret

00000440 <__divsf3>:
 440:	0e 94 34 02 	call	0x468	; 0x468 <__divsf3x>
 444:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_round>
 448:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscB>
 44c:	58 f0       	brcs	.+22     	; 0x464 <__divsf3+0x24>
 44e:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_pscA>
 452:	40 f0       	brcs	.+16     	; 0x464 <__divsf3+0x24>
 454:	29 f4       	brne	.+10     	; 0x460 <__divsf3+0x20>
 456:	5f 3f       	cpi	r21, 0xFF	; 255
 458:	29 f0       	breq	.+10     	; 0x464 <__divsf3+0x24>
 45a:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>
 45e:	51 11       	cpse	r21, r1
 460:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 464:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_nan>

00000468 <__divsf3x>:
 468:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_split3>
 46c:	68 f3       	brcs	.-38     	; 0x448 <__divsf3+0x8>

0000046e <__divsf3_pse>:
 46e:	99 23       	and	r25, r25
 470:	b1 f3       	breq	.-20     	; 0x45e <__divsf3+0x1e>
 472:	55 23       	and	r21, r21
 474:	91 f3       	breq	.-28     	; 0x45a <__divsf3+0x1a>
 476:	95 1b       	sub	r25, r21
 478:	55 0b       	sbc	r21, r21
 47a:	bb 27       	eor	r27, r27
 47c:	aa 27       	eor	r26, r26
 47e:	62 17       	cp	r22, r18
 480:	73 07       	cpc	r23, r19
 482:	84 07       	cpc	r24, r20
 484:	38 f0       	brcs	.+14     	; 0x494 <__divsf3_pse+0x26>
 486:	9f 5f       	subi	r25, 0xFF	; 255
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	44 1f       	adc	r20, r20
 490:	aa 1f       	adc	r26, r26
 492:	a9 f3       	breq	.-22     	; 0x47e <__divsf3_pse+0x10>
 494:	35 d0       	rcall	.+106    	; 0x500 <__divsf3_pse+0x92>
 496:	0e 2e       	mov	r0, r30
 498:	3a f0       	brmi	.+14     	; 0x4a8 <__divsf3_pse+0x3a>
 49a:	e0 e8       	ldi	r30, 0x80	; 128
 49c:	32 d0       	rcall	.+100    	; 0x502 <__divsf3_pse+0x94>
 49e:	91 50       	subi	r25, 0x01	; 1
 4a0:	50 40       	sbci	r21, 0x00	; 0
 4a2:	e6 95       	lsr	r30
 4a4:	00 1c       	adc	r0, r0
 4a6:	ca f7       	brpl	.-14     	; 0x49a <__divsf3_pse+0x2c>
 4a8:	2b d0       	rcall	.+86     	; 0x500 <__divsf3_pse+0x92>
 4aa:	fe 2f       	mov	r31, r30
 4ac:	29 d0       	rcall	.+82     	; 0x500 <__divsf3_pse+0x92>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	bb 1f       	adc	r27, r27
 4b6:	26 17       	cp	r18, r22
 4b8:	37 07       	cpc	r19, r23
 4ba:	48 07       	cpc	r20, r24
 4bc:	ab 07       	cpc	r26, r27
 4be:	b0 e8       	ldi	r27, 0x80	; 128
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__divsf3_pse+0x56>
 4c2:	bb 0b       	sbc	r27, r27
 4c4:	80 2d       	mov	r24, r0
 4c6:	bf 01       	movw	r22, r30
 4c8:	ff 27       	eor	r31, r31
 4ca:	93 58       	subi	r25, 0x83	; 131
 4cc:	5f 4f       	sbci	r21, 0xFF	; 255
 4ce:	3a f0       	brmi	.+14     	; 0x4de <__divsf3_pse+0x70>
 4d0:	9e 3f       	cpi	r25, 0xFE	; 254
 4d2:	51 05       	cpc	r21, r1
 4d4:	78 f0       	brcs	.+30     	; 0x4f4 <__divsf3_pse+0x86>
 4d6:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>
 4da:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 4de:	5f 3f       	cpi	r21, 0xFF	; 255
 4e0:	e4 f3       	brlt	.-8      	; 0x4da <__divsf3_pse+0x6c>
 4e2:	98 3e       	cpi	r25, 0xE8	; 232
 4e4:	d4 f3       	brlt	.-12     	; 0x4da <__divsf3_pse+0x6c>
 4e6:	86 95       	lsr	r24
 4e8:	77 95       	ror	r23
 4ea:	67 95       	ror	r22
 4ec:	b7 95       	ror	r27
 4ee:	f7 95       	ror	r31
 4f0:	9f 5f       	subi	r25, 0xFF	; 255
 4f2:	c9 f7       	brne	.-14     	; 0x4e6 <__divsf3_pse+0x78>
 4f4:	88 0f       	add	r24, r24
 4f6:	91 1d       	adc	r25, r1
 4f8:	96 95       	lsr	r25
 4fa:	87 95       	ror	r24
 4fc:	97 f9       	bld	r25, 7
 4fe:	08 95       	ret
 500:	e1 e0       	ldi	r30, 0x01	; 1
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	bb 1f       	adc	r27, r27
 50a:	62 17       	cp	r22, r18
 50c:	73 07       	cpc	r23, r19
 50e:	84 07       	cpc	r24, r20
 510:	ba 07       	cpc	r27, r26
 512:	20 f0       	brcs	.+8      	; 0x51c <__divsf3_pse+0xae>
 514:	62 1b       	sub	r22, r18
 516:	73 0b       	sbc	r23, r19
 518:	84 0b       	sbc	r24, r20
 51a:	ba 0b       	sbc	r27, r26
 51c:	ee 1f       	adc	r30, r30
 51e:	88 f7       	brcc	.-30     	; 0x502 <__divsf3_pse+0x94>
 520:	e0 95       	com	r30
 522:	08 95       	ret

00000524 <__fixsfsi>:
 524:	0e 94 99 02 	call	0x532	; 0x532 <__fixunssfsi>
 528:	68 94       	set
 52a:	b1 11       	cpse	r27, r1
 52c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 530:	08 95       	ret

00000532 <__fixunssfsi>:
 532:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_splitA>
 536:	88 f0       	brcs	.+34     	; 0x55a <__fixunssfsi+0x28>
 538:	9f 57       	subi	r25, 0x7F	; 127
 53a:	98 f0       	brcs	.+38     	; 0x562 <__fixunssfsi+0x30>
 53c:	b9 2f       	mov	r27, r25
 53e:	99 27       	eor	r25, r25
 540:	b7 51       	subi	r27, 0x17	; 23
 542:	b0 f0       	brcs	.+44     	; 0x570 <__fixunssfsi+0x3e>
 544:	e1 f0       	breq	.+56     	; 0x57e <__fixunssfsi+0x4c>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	1a f0       	brmi	.+6      	; 0x556 <__fixunssfsi+0x24>
 550:	ba 95       	dec	r27
 552:	c9 f7       	brne	.-14     	; 0x546 <__fixunssfsi+0x14>
 554:	14 c0       	rjmp	.+40     	; 0x57e <__fixunssfsi+0x4c>
 556:	b1 30       	cpi	r27, 0x01	; 1
 558:	91 f0       	breq	.+36     	; 0x57e <__fixunssfsi+0x4c>
 55a:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_zero>
 55e:	b1 e0       	ldi	r27, 0x01	; 1
 560:	08 95       	ret
 562:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_zero>
 566:	67 2f       	mov	r22, r23
 568:	78 2f       	mov	r23, r24
 56a:	88 27       	eor	r24, r24
 56c:	b8 5f       	subi	r27, 0xF8	; 248
 56e:	39 f0       	breq	.+14     	; 0x57e <__fixunssfsi+0x4c>
 570:	b9 3f       	cpi	r27, 0xF9	; 249
 572:	cc f3       	brlt	.-14     	; 0x566 <__fixunssfsi+0x34>
 574:	86 95       	lsr	r24
 576:	77 95       	ror	r23
 578:	67 95       	ror	r22
 57a:	b3 95       	inc	r27
 57c:	d9 f7       	brne	.-10     	; 0x574 <__fixunssfsi+0x42>
 57e:	3e f4       	brtc	.+14     	; 0x58e <__fixunssfsi+0x5c>
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__floatunsisf>:
 590:	e8 94       	clt
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <__floatsisf+0x12>

00000594 <__floatsisf>:
 594:	97 fb       	bst	r25, 7
 596:	3e f4       	brtc	.+14     	; 0x5a6 <__floatsisf+0x12>
 598:	90 95       	com	r25
 59a:	80 95       	com	r24
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	99 23       	and	r25, r25
 5a8:	a9 f0       	breq	.+42     	; 0x5d4 <__floatsisf+0x40>
 5aa:	f9 2f       	mov	r31, r25
 5ac:	96 e9       	ldi	r25, 0x96	; 150
 5ae:	bb 27       	eor	r27, r27
 5b0:	93 95       	inc	r25
 5b2:	f6 95       	lsr	r31
 5b4:	87 95       	ror	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b7 95       	ror	r27
 5bc:	f1 11       	cpse	r31, r1
 5be:	f8 cf       	rjmp	.-16     	; 0x5b0 <__floatsisf+0x1c>
 5c0:	fa f4       	brpl	.+62     	; 0x600 <__floatsisf+0x6c>
 5c2:	bb 0f       	add	r27, r27
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__floatsisf+0x36>
 5c6:	60 ff       	sbrs	r22, 0
 5c8:	1b c0       	rjmp	.+54     	; 0x600 <__floatsisf+0x6c>
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	16 c0       	rjmp	.+44     	; 0x600 <__floatsisf+0x6c>
 5d4:	88 23       	and	r24, r24
 5d6:	11 f0       	breq	.+4      	; 0x5dc <__floatsisf+0x48>
 5d8:	96 e9       	ldi	r25, 0x96	; 150
 5da:	11 c0       	rjmp	.+34     	; 0x5fe <__floatsisf+0x6a>
 5dc:	77 23       	and	r23, r23
 5de:	21 f0       	breq	.+8      	; 0x5e8 <__floatsisf+0x54>
 5e0:	9e e8       	ldi	r25, 0x8E	; 142
 5e2:	87 2f       	mov	r24, r23
 5e4:	76 2f       	mov	r23, r22
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <__floatsisf+0x5e>
 5e8:	66 23       	and	r22, r22
 5ea:	71 f0       	breq	.+28     	; 0x608 <__floatsisf+0x74>
 5ec:	96 e8       	ldi	r25, 0x86	; 134
 5ee:	86 2f       	mov	r24, r22
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	2a f0       	brmi	.+10     	; 0x600 <__floatsisf+0x6c>
 5f6:	9a 95       	dec	r25
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	da f7       	brpl	.-10     	; 0x5f6 <__floatsisf+0x62>
 600:	88 0f       	add	r24, r24
 602:	96 95       	lsr	r25
 604:	87 95       	ror	r24
 606:	97 f9       	bld	r25, 7
 608:	08 95       	ret

0000060a <__fp_inf>:
 60a:	97 f9       	bld	r25, 7
 60c:	9f 67       	ori	r25, 0x7F	; 127
 60e:	80 e8       	ldi	r24, 0x80	; 128
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	08 95       	ret

00000616 <__fp_nan>:
 616:	9f ef       	ldi	r25, 0xFF	; 255
 618:	80 ec       	ldi	r24, 0xC0	; 192
 61a:	08 95       	ret

0000061c <__fp_pscA>:
 61c:	00 24       	eor	r0, r0
 61e:	0a 94       	dec	r0
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	18 06       	cpc	r1, r24
 626:	09 06       	cpc	r0, r25
 628:	08 95       	ret

0000062a <__fp_pscB>:
 62a:	00 24       	eor	r0, r0
 62c:	0a 94       	dec	r0
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	14 06       	cpc	r1, r20
 634:	05 06       	cpc	r0, r21
 636:	08 95       	ret

00000638 <__fp_round>:
 638:	09 2e       	mov	r0, r25
 63a:	03 94       	inc	r0
 63c:	00 0c       	add	r0, r0
 63e:	11 f4       	brne	.+4      	; 0x644 <__fp_round+0xc>
 640:	88 23       	and	r24, r24
 642:	52 f0       	brmi	.+20     	; 0x658 <__fp_round+0x20>
 644:	bb 0f       	add	r27, r27
 646:	40 f4       	brcc	.+16     	; 0x658 <__fp_round+0x20>
 648:	bf 2b       	or	r27, r31
 64a:	11 f4       	brne	.+4      	; 0x650 <__fp_round+0x18>
 64c:	60 ff       	sbrs	r22, 0
 64e:	04 c0       	rjmp	.+8      	; 0x658 <__fp_round+0x20>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	08 95       	ret

0000065a <__fp_split3>:
 65a:	57 fd       	sbrc	r21, 7
 65c:	90 58       	subi	r25, 0x80	; 128
 65e:	44 0f       	add	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	59 f0       	breq	.+22     	; 0x67a <__fp_splitA+0x10>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	71 f0       	breq	.+28     	; 0x684 <__fp_splitA+0x1a>
 668:	47 95       	ror	r20

0000066a <__fp_splitA>:
 66a:	88 0f       	add	r24, r24
 66c:	97 fb       	bst	r25, 7
 66e:	99 1f       	adc	r25, r25
 670:	61 f0       	breq	.+24     	; 0x68a <__fp_splitA+0x20>
 672:	9f 3f       	cpi	r25, 0xFF	; 255
 674:	79 f0       	breq	.+30     	; 0x694 <__fp_splitA+0x2a>
 676:	87 95       	ror	r24
 678:	08 95       	ret
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	55 1f       	adc	r21, r21
 682:	f2 cf       	rjmp	.-28     	; 0x668 <__fp_split3+0xe>
 684:	46 95       	lsr	r20
 686:	f1 df       	rcall	.-30     	; 0x66a <__fp_splitA>
 688:	08 c0       	rjmp	.+16     	; 0x69a <__fp_splitA+0x30>
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	99 1f       	adc	r25, r25
 692:	f1 cf       	rjmp	.-30     	; 0x676 <__fp_splitA+0xc>
 694:	86 95       	lsr	r24
 696:	71 05       	cpc	r23, r1
 698:	61 05       	cpc	r22, r1
 69a:	08 94       	sec
 69c:	08 95       	ret

0000069e <__fp_zero>:
 69e:	e8 94       	clt

000006a0 <__fp_szero>:
 6a0:	bb 27       	eor	r27, r27
 6a2:	66 27       	eor	r22, r22
 6a4:	77 27       	eor	r23, r23
 6a6:	cb 01       	movw	r24, r22
 6a8:	97 f9       	bld	r25, 7
 6aa:	08 95       	ret

000006ac <__gesf2>:
 6ac:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_cmp>
 6b0:	08 f4       	brcc	.+2      	; 0x6b4 <__gesf2+0x8>
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	08 95       	ret

000006b6 <__mulsf3>:
 6b6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__mulsf3x>
 6ba:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_round>
 6be:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_pscA>
 6c2:	38 f0       	brcs	.+14     	; 0x6d2 <__mulsf3+0x1c>
 6c4:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscB>
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__mulsf3+0x1c>
 6ca:	95 23       	and	r25, r21
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <__mulsf3+0x1c>
 6ce:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>
 6d2:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_nan>
 6d6:	11 24       	eor	r1, r1
 6d8:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>

000006dc <__mulsf3x>:
 6dc:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_split3>
 6e0:	70 f3       	brcs	.-36     	; 0x6be <__mulsf3+0x8>

000006e2 <__mulsf3_pse>:
 6e2:	95 9f       	mul	r25, r21
 6e4:	c1 f3       	breq	.-16     	; 0x6d6 <__mulsf3+0x20>
 6e6:	95 0f       	add	r25, r21
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	55 1f       	adc	r21, r21
 6ec:	62 9f       	mul	r22, r18
 6ee:	f0 01       	movw	r30, r0
 6f0:	72 9f       	mul	r23, r18
 6f2:	bb 27       	eor	r27, r27
 6f4:	f0 0d       	add	r31, r0
 6f6:	b1 1d       	adc	r27, r1
 6f8:	63 9f       	mul	r22, r19
 6fa:	aa 27       	eor	r26, r26
 6fc:	f0 0d       	add	r31, r0
 6fe:	b1 1d       	adc	r27, r1
 700:	aa 1f       	adc	r26, r26
 702:	64 9f       	mul	r22, r20
 704:	66 27       	eor	r22, r22
 706:	b0 0d       	add	r27, r0
 708:	a1 1d       	adc	r26, r1
 70a:	66 1f       	adc	r22, r22
 70c:	82 9f       	mul	r24, r18
 70e:	22 27       	eor	r18, r18
 710:	b0 0d       	add	r27, r0
 712:	a1 1d       	adc	r26, r1
 714:	62 1f       	adc	r22, r18
 716:	73 9f       	mul	r23, r19
 718:	b0 0d       	add	r27, r0
 71a:	a1 1d       	adc	r26, r1
 71c:	62 1f       	adc	r22, r18
 71e:	83 9f       	mul	r24, r19
 720:	a0 0d       	add	r26, r0
 722:	61 1d       	adc	r22, r1
 724:	22 1f       	adc	r18, r18
 726:	74 9f       	mul	r23, r20
 728:	33 27       	eor	r19, r19
 72a:	a0 0d       	add	r26, r0
 72c:	61 1d       	adc	r22, r1
 72e:	23 1f       	adc	r18, r19
 730:	84 9f       	mul	r24, r20
 732:	60 0d       	add	r22, r0
 734:	21 1d       	adc	r18, r1
 736:	82 2f       	mov	r24, r18
 738:	76 2f       	mov	r23, r22
 73a:	6a 2f       	mov	r22, r26
 73c:	11 24       	eor	r1, r1
 73e:	9f 57       	subi	r25, 0x7F	; 127
 740:	50 40       	sbci	r21, 0x00	; 0
 742:	9a f0       	brmi	.+38     	; 0x76a <__mulsf3_pse+0x88>
 744:	f1 f0       	breq	.+60     	; 0x782 <__mulsf3_pse+0xa0>
 746:	88 23       	and	r24, r24
 748:	4a f0       	brmi	.+18     	; 0x75c <__mulsf3_pse+0x7a>
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	bb 1f       	adc	r27, r27
 750:	66 1f       	adc	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	91 50       	subi	r25, 0x01	; 1
 758:	50 40       	sbci	r21, 0x00	; 0
 75a:	a9 f7       	brne	.-22     	; 0x746 <__mulsf3_pse+0x64>
 75c:	9e 3f       	cpi	r25, 0xFE	; 254
 75e:	51 05       	cpc	r21, r1
 760:	80 f0       	brcs	.+32     	; 0x782 <__mulsf3_pse+0xa0>
 762:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>
 766:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 76a:	5f 3f       	cpi	r21, 0xFF	; 255
 76c:	e4 f3       	brlt	.-8      	; 0x766 <__mulsf3_pse+0x84>
 76e:	98 3e       	cpi	r25, 0xE8	; 232
 770:	d4 f3       	brlt	.-12     	; 0x766 <__mulsf3_pse+0x84>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b7 95       	ror	r27
 77a:	f7 95       	ror	r31
 77c:	e7 95       	ror	r30
 77e:	9f 5f       	subi	r25, 0xFF	; 255
 780:	c1 f7       	brne	.-16     	; 0x772 <__mulsf3_pse+0x90>
 782:	fe 2b       	or	r31, r30
 784:	88 0f       	add	r24, r24
 786:	91 1d       	adc	r25, r1
 788:	96 95       	lsr	r25
 78a:	87 95       	ror	r24
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__fp_cmp>:
 790:	99 0f       	add	r25, r25
 792:	00 08       	sbc	r0, r0
 794:	55 0f       	add	r21, r21
 796:	aa 0b       	sbc	r26, r26
 798:	e0 e8       	ldi	r30, 0x80	; 128
 79a:	fe ef       	ldi	r31, 0xFE	; 254
 79c:	16 16       	cp	r1, r22
 79e:	17 06       	cpc	r1, r23
 7a0:	e8 07       	cpc	r30, r24
 7a2:	f9 07       	cpc	r31, r25
 7a4:	c0 f0       	brcs	.+48     	; 0x7d6 <__fp_cmp+0x46>
 7a6:	12 16       	cp	r1, r18
 7a8:	13 06       	cpc	r1, r19
 7aa:	e4 07       	cpc	r30, r20
 7ac:	f5 07       	cpc	r31, r21
 7ae:	98 f0       	brcs	.+38     	; 0x7d6 <__fp_cmp+0x46>
 7b0:	62 1b       	sub	r22, r18
 7b2:	73 0b       	sbc	r23, r19
 7b4:	84 0b       	sbc	r24, r20
 7b6:	95 0b       	sbc	r25, r21
 7b8:	39 f4       	brne	.+14     	; 0x7c8 <__fp_cmp+0x38>
 7ba:	0a 26       	eor	r0, r26
 7bc:	61 f0       	breq	.+24     	; 0x7d6 <__fp_cmp+0x46>
 7be:	23 2b       	or	r18, r19
 7c0:	24 2b       	or	r18, r20
 7c2:	25 2b       	or	r18, r21
 7c4:	21 f4       	brne	.+8      	; 0x7ce <__fp_cmp+0x3e>
 7c6:	08 95       	ret
 7c8:	0a 26       	eor	r0, r26
 7ca:	09 f4       	brne	.+2      	; 0x7ce <__fp_cmp+0x3e>
 7cc:	a1 40       	sbci	r26, 0x01	; 1
 7ce:	a6 95       	lsr	r26
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	81 1d       	adc	r24, r1
 7d4:	81 1d       	adc	r24, r1
 7d6:	08 95       	ret

000007d8 <__udivmodsi4>:
 7d8:	a1 e2       	ldi	r26, 0x21	; 33
 7da:	1a 2e       	mov	r1, r26
 7dc:	aa 1b       	sub	r26, r26
 7de:	bb 1b       	sub	r27, r27
 7e0:	fd 01       	movw	r30, r26
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <__udivmodsi4_ep>

000007e4 <__udivmodsi4_loop>:
 7e4:	aa 1f       	adc	r26, r26
 7e6:	bb 1f       	adc	r27, r27
 7e8:	ee 1f       	adc	r30, r30
 7ea:	ff 1f       	adc	r31, r31
 7ec:	a2 17       	cp	r26, r18
 7ee:	b3 07       	cpc	r27, r19
 7f0:	e4 07       	cpc	r30, r20
 7f2:	f5 07       	cpc	r31, r21
 7f4:	20 f0       	brcs	.+8      	; 0x7fe <__udivmodsi4_ep>
 7f6:	a2 1b       	sub	r26, r18
 7f8:	b3 0b       	sbc	r27, r19
 7fa:	e4 0b       	sbc	r30, r20
 7fc:	f5 0b       	sbc	r31, r21

000007fe <__udivmodsi4_ep>:
 7fe:	66 1f       	adc	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	1a 94       	dec	r1
 808:	69 f7       	brne	.-38     	; 0x7e4 <__udivmodsi4_loop>
 80a:	60 95       	com	r22
 80c:	70 95       	com	r23
 80e:	80 95       	com	r24
 810:	90 95       	com	r25
 812:	9b 01       	movw	r18, r22
 814:	ac 01       	movw	r20, r24
 816:	bd 01       	movw	r22, r26
 818:	cf 01       	movw	r24, r30
 81a:	08 95       	ret

0000081c <eeprom_write_byte>:
 81c:	26 2f       	mov	r18, r22

0000081e <eeprom_write_r18>:
 81e:	f9 99       	sbic	0x1f, 1	; 31
 820:	fe cf       	rjmp	.-4      	; 0x81e <eeprom_write_r18>
 822:	92 bd       	out	0x22, r25	; 34
 824:	81 bd       	out	0x21, r24	; 33
 826:	20 bd       	out	0x20, r18	; 32
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	f8 94       	cli
 82c:	fa 9a       	sbi	0x1f, 2	; 31
 82e:	f9 9a       	sbi	0x1f, 1	; 31
 830:	0f be       	out	0x3f, r0	; 63
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	08 95       	ret

00000836 <_exit>:
 836:	f8 94       	cli

00000838 <__stop_program>:
 838:	ff cf       	rjmp	.-2      	; 0x838 <__stop_program>
