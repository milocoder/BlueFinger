
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000860  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea5  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c01  00000000  00000000  0000177d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000614  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c2  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ae 30       	cpi	r26, 0x0E	; 14
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  b4:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
		}		
	}
}

void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	4b 01       	movw	r8, r22
  d6:	5c 01       	movw	r10, r24
  d8:	8a 01       	movw	r16, r20
	int val1 = (int)value; // pak getal voor de komma
  da:	0e 94 32 02 	call	0x464	; 0x464 <__fixsfsi>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
  e2:	07 2e       	mov	r0, r23
  e4:	00 0c       	add	r0, r0
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__floatsisf>
  ee:	9b 01       	movw	r18, r22
  f0:	ac 01       	movw	r20, r24
  f2:	c5 01       	movw	r24, r10
  f4:	b4 01       	movw	r22, r8
  f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__subsf3>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	48 ec       	ldi	r20, 0xC8	; 200
 100:	52 e4       	ldi	r21, 0x42	; 66
 102:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
 106:	0e 94 32 02 	call	0x464	; 0x464 <__fixsfsi>
 10a:	eb 01       	movw	r28, r22
 10c:	21 96       	adiw	r28, 0x01	; 1
	eeprom_write_byte((uint8_t*)address, val1);
 10e:	6c 2d       	mov	r22, r12
 110:	c8 01       	movw	r24, r16
 112:	0e 94 ae 03 	call	0x75c	; 0x75c <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 116:	6c 2f       	mov	r22, r28
 118:	c8 01       	movw	r24, r16
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 ae 03 	call	0x75c	; 0x75c <eeprom_write_byte>
	
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	bf 90       	pop	r11
 132:	af 90       	pop	r10
 134:	9f 90       	pop	r9
 136:	8f 90       	pop	r8
 138:	08 95       	ret

0000013a <main>:
void writeFloatToEEPROM(float value, int address);


int main(void)
{	
	init_millis(12000000UL);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	7b e1       	ldi	r23, 0x1B	; 27
 13e:	87 eb       	ldi	r24, 0xB7	; 183
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 2a 01 	call	0x254	; 0x254 <init_millis>
	sei();  // Enable interrupts
 146:	78 94       	sei
	
	int addressHall = 0;
	float omtrek_wiel = 1.35;
	float TijdVerschilSeconden = 0; 
		
	DDRF = 0xFF;		//output ledje
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		//input hall sensor
 14c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 14e:	18 b8       	out	0x08, r1	; 8
	//int huidige_status_hall = 1; 
	//int vorige_status_hall = 0; 
	//uint32_t huidige_tijd_ms = 0; 
	unsigned long VorigeAantalMili = 0; 	
	
	int addressHall = 0;
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
	sei();  // Enable interrupts
	
	//int huidige_status_hall = 1; 
	//int vorige_status_hall = 0; 
	//uint32_t huidige_tijd_ms = 0; 
	unsigned long VorigeAantalMili = 0; 	
 154:	c1 2c       	mov	r12, r1
 156:	d1 2c       	mov	r13, r1
 158:	76 01       	movw	r14, r12
	DDRC = 0;		//input hall sensor
	PORTC = 0;
	
	while(1) {
	
		unsigned long HuidigeAantalMili = millis();
 15a:	0e 94 43 01 	call	0x286	; 0x286 <millis>
		TijdVerschilSeconden = (float)(HuidigeAantalMili - VorigeAantalMili)/1000;
 15e:	6c 19       	sub	r22, r12
 160:	7d 09       	sbc	r23, r13
 162:	8e 09       	sbc	r24, r14
 164:	9f 09       	sbc	r25, r15
 166:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__floatunsisf>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4a e7       	ldi	r20, 0x7A	; 122
 170:	54 e4       	ldi	r21, 0x44	; 68
 172:	0e 94 c0 01 	call	0x380	; 0x380 <__divsf3>
 176:	4b 01       	movw	r8, r22
 178:	5c 01       	movw	r10, r24
		
		if(TijdVerschilSeconden > 0.1)
 17a:	2d ec       	ldi	r18, 0xCD	; 205
 17c:	3c ec       	ldi	r19, 0xCC	; 204
 17e:	4c ec       	ldi	r20, 0xCC	; 204
 180:	5d e3       	ldi	r21, 0x3D	; 61
 182:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__gesf2>
 186:	18 16       	cp	r1, r24
 188:	5c f4       	brge	.+22     	; 0x1a0 <main+0x66>
		{
			if (!(~PINC & (1 << PC0))) {
 18a:	30 9b       	sbis	0x06, 0	; 6
 18c:	09 c0       	rjmp	.+18     	; 0x1a0 <main+0x66>
				rpmaantal++;
 18e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rpmaantal>
 192:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rpmaantal+0x1>
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rpmaantal+0x1>
 19c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rpmaantal>
			}			
		}
		
		// Meet de snelheid alleen als er minstens één omwenteling is gedetecteerd en 0.1 seconde voorbij is
		if(rpmaantal > 0) {
 1a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rpmaantal>
 1a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rpmaantal+0x1>
 1a8:	18 16       	cp	r1, r24
 1aa:	19 06       	cpc	r1, r25
 1ac:	b4 f6       	brge	.-84     	; 0x15a <main+0x20>
			PORTF = 0xFF;	//led lichtje voor feedback
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	81 bb       	out	0x11, r24	; 17
			snelheidms = omtrek_wiel / TijdVerschilSeconden; 
 1b2:	a5 01       	movw	r20, r10
 1b4:	94 01       	movw	r18, r8
 1b6:	6d ec       	ldi	r22, 0xCD	; 205
 1b8:	7c ec       	ldi	r23, 0xCC	; 204
 1ba:	8c ea       	ldi	r24, 0xAC	; 172
 1bc:	9f e3       	ldi	r25, 0x3F	; 63
 1be:	0e 94 c0 01 	call	0x380	; 0x380 <__divsf3>
 1c2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			snelheidKmH = snelheidms * 3.6;
 1d2:	26 e6       	ldi	r18, 0x66	; 102
 1d4:	36 e6       	ldi	r19, 0x66	; 102
 1d6:	46 e6       	ldi	r20, 0x66	; 102
 1d8:	50 e4       	ldi	r21, 0x40	; 64
 1da:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
 1de:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <snelheidKmH>
 1e2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <snelheidKmH+0x1>
 1e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <snelheidKmH+0x2>
 1ea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <snelheidKmH+0x3>
			
			writeFloatToEEPROM(snelheidKmH, addressHall);
 1ee:	ae 01       	movw	r20, r28
 1f0:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			
			addressHall += 2;
 1f4:	22 96       	adiw	r28, 0x02	; 2

			// Reset de teller en de timer voor de volgende meting
			rpmaantal = 0;
 1f6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rpmaantal+0x1>
 1fa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rpmaantal>
			VorigeAantalMili = millis();
 1fe:	0e 94 43 01 	call	0x286	; 0x286 <millis>
 202:	6b 01       	movw	r12, r22
 204:	7c 01       	movw	r14, r24
			PORTF = 0x00;
 206:	11 ba       	out	0x11, r1	; 17
 208:	a8 cf       	rjmp	.-176    	; 0x15a <main+0x20>

0000020a <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
  timer1_millis++;
 21c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timer1_millis>
 220:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timer1_millis+0x1>
 224:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <timer1_millis+0x2>
 228:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <timer1_millis+0x3>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	a1 1d       	adc	r26, r1
 230:	b1 1d       	adc	r27, r1
 232:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timer1_millis>
 236:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timer1_millis+0x1>
 23a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timer1_millis+0x2>
 23e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timer1_millis+0x3>
}
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 254:	20 e4       	ldi	r18, 0x40	; 64
 256:	3f e1       	ldi	r19, 0x1F	; 31
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	0e 94 8c 03 	call	0x718	; 0x718 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8a 60       	ori	r24, 0x0A	; 10
 268:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 26a:	bb 27       	eor	r27, r27
 26c:	a5 2f       	mov	r26, r21
 26e:	94 2f       	mov	r25, r20
 270:	83 2f       	mov	r24, r19
 272:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 276:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 27a:	ef e6       	ldi	r30, 0x6F	; 111
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 286:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	09 c0       	rjmp	.+18     	; 0x29e <millis+0x18>
    millis_return = timer1_millis;
 28c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <timer1_millis>
 290:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <timer1_millis+0x1>
 294:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer1_millis+0x2>
 298:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer1_millis+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	21 11       	cpse	r18, r1
 2a0:	f5 cf       	rjmp	.-22     	; 0x28c <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2a2:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 2a4:	08 95       	ret

000002a6 <__subsf3>:
 2a6:	50 58       	subi	r21, 0x80	; 128

000002a8 <__addsf3>:
 2a8:	bb 27       	eor	r27, r27
 2aa:	aa 27       	eor	r26, r26
 2ac:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__addsf3x>
 2b0:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_round>
 2b4:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_pscA>
 2b8:	38 f0       	brcs	.+14     	; 0x2c8 <__addsf3+0x20>
 2ba:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_pscB>
 2be:	20 f0       	brcs	.+8      	; 0x2c8 <__addsf3+0x20>
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <__addsf3+0x28>
 2c2:	9f 3f       	cpi	r25, 0xFF	; 255
 2c4:	19 f4       	brne	.+6      	; 0x2cc <__addsf3+0x24>
 2c6:	26 f4       	brtc	.+8      	; 0x2d0 <__addsf3+0x28>
 2c8:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_nan>
 2cc:	0e f4       	brtc	.+2      	; 0x2d0 <__addsf3+0x28>
 2ce:	e0 95       	com	r30
 2d0:	e7 fb       	bst	r30, 7
 2d2:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_inf>

000002d6 <__addsf3x>:
 2d6:	e9 2f       	mov	r30, r25
 2d8:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_split3>
 2dc:	58 f3       	brcs	.-42     	; 0x2b4 <__addsf3+0xc>
 2de:	ba 17       	cp	r27, r26
 2e0:	62 07       	cpc	r22, r18
 2e2:	73 07       	cpc	r23, r19
 2e4:	84 07       	cpc	r24, r20
 2e6:	95 07       	cpc	r25, r21
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <__addsf3x+0x1c>
 2ea:	79 f4       	brne	.+30     	; 0x30a <__addsf3x+0x34>
 2ec:	a6 f5       	brtc	.+104    	; 0x356 <__addsf3x+0x80>
 2ee:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__fp_zero>
 2f2:	0e f4       	brtc	.+2      	; 0x2f6 <__addsf3x+0x20>
 2f4:	e0 95       	com	r30
 2f6:	0b 2e       	mov	r0, r27
 2f8:	ba 2f       	mov	r27, r26
 2fa:	a0 2d       	mov	r26, r0
 2fc:	0b 01       	movw	r0, r22
 2fe:	b9 01       	movw	r22, r18
 300:	90 01       	movw	r18, r0
 302:	0c 01       	movw	r0, r24
 304:	ca 01       	movw	r24, r20
 306:	a0 01       	movw	r20, r0
 308:	11 24       	eor	r1, r1
 30a:	ff 27       	eor	r31, r31
 30c:	59 1b       	sub	r21, r25
 30e:	99 f0       	breq	.+38     	; 0x336 <__addsf3x+0x60>
 310:	59 3f       	cpi	r21, 0xF9	; 249
 312:	50 f4       	brcc	.+20     	; 0x328 <__addsf3x+0x52>
 314:	50 3e       	cpi	r21, 0xE0	; 224
 316:	68 f1       	brcs	.+90     	; 0x372 <__addsf3x+0x9c>
 318:	1a 16       	cp	r1, r26
 31a:	f0 40       	sbci	r31, 0x00	; 0
 31c:	a2 2f       	mov	r26, r18
 31e:	23 2f       	mov	r18, r19
 320:	34 2f       	mov	r19, r20
 322:	44 27       	eor	r20, r20
 324:	58 5f       	subi	r21, 0xF8	; 248
 326:	f3 cf       	rjmp	.-26     	; 0x30e <__addsf3x+0x38>
 328:	46 95       	lsr	r20
 32a:	37 95       	ror	r19
 32c:	27 95       	ror	r18
 32e:	a7 95       	ror	r26
 330:	f0 40       	sbci	r31, 0x00	; 0
 332:	53 95       	inc	r21
 334:	c9 f7       	brne	.-14     	; 0x328 <__addsf3x+0x52>
 336:	7e f4       	brtc	.+30     	; 0x356 <__addsf3x+0x80>
 338:	1f 16       	cp	r1, r31
 33a:	ba 0b       	sbc	r27, r26
 33c:	62 0b       	sbc	r22, r18
 33e:	73 0b       	sbc	r23, r19
 340:	84 0b       	sbc	r24, r20
 342:	ba f0       	brmi	.+46     	; 0x372 <__addsf3x+0x9c>
 344:	91 50       	subi	r25, 0x01	; 1
 346:	a1 f0       	breq	.+40     	; 0x370 <__addsf3x+0x9a>
 348:	ff 0f       	add	r31, r31
 34a:	bb 1f       	adc	r27, r27
 34c:	66 1f       	adc	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	c2 f7       	brpl	.-16     	; 0x344 <__addsf3x+0x6e>
 354:	0e c0       	rjmp	.+28     	; 0x372 <__addsf3x+0x9c>
 356:	ba 0f       	add	r27, r26
 358:	62 1f       	adc	r22, r18
 35a:	73 1f       	adc	r23, r19
 35c:	84 1f       	adc	r24, r20
 35e:	48 f4       	brcc	.+18     	; 0x372 <__addsf3x+0x9c>
 360:	87 95       	ror	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f7 95       	ror	r31
 36a:	9e 3f       	cpi	r25, 0xFE	; 254
 36c:	08 f0       	brcs	.+2      	; 0x370 <__addsf3x+0x9a>
 36e:	b0 cf       	rjmp	.-160    	; 0x2d0 <__addsf3+0x28>
 370:	93 95       	inc	r25
 372:	88 0f       	add	r24, r24
 374:	08 f0       	brcs	.+2      	; 0x378 <__addsf3x+0xa2>
 376:	99 27       	eor	r25, r25
 378:	ee 0f       	add	r30, r30
 37a:	97 95       	ror	r25
 37c:	87 95       	ror	r24
 37e:	08 95       	ret

00000380 <__divsf3>:
 380:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__divsf3x>
 384:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_round>
 388:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_pscB>
 38c:	58 f0       	brcs	.+22     	; 0x3a4 <__divsf3+0x24>
 38e:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_pscA>
 392:	40 f0       	brcs	.+16     	; 0x3a4 <__divsf3+0x24>
 394:	29 f4       	brne	.+10     	; 0x3a0 <__divsf3+0x20>
 396:	5f 3f       	cpi	r21, 0xFF	; 255
 398:	29 f0       	breq	.+10     	; 0x3a4 <__divsf3+0x24>
 39a:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_inf>
 39e:	51 11       	cpse	r21, r1
 3a0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_szero>
 3a4:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_nan>

000003a8 <__divsf3x>:
 3a8:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_split3>
 3ac:	68 f3       	brcs	.-38     	; 0x388 <__divsf3+0x8>

000003ae <__divsf3_pse>:
 3ae:	99 23       	and	r25, r25
 3b0:	b1 f3       	breq	.-20     	; 0x39e <__divsf3+0x1e>
 3b2:	55 23       	and	r21, r21
 3b4:	91 f3       	breq	.-28     	; 0x39a <__divsf3+0x1a>
 3b6:	95 1b       	sub	r25, r21
 3b8:	55 0b       	sbc	r21, r21
 3ba:	bb 27       	eor	r27, r27
 3bc:	aa 27       	eor	r26, r26
 3be:	62 17       	cp	r22, r18
 3c0:	73 07       	cpc	r23, r19
 3c2:	84 07       	cpc	r24, r20
 3c4:	38 f0       	brcs	.+14     	; 0x3d4 <__divsf3_pse+0x26>
 3c6:	9f 5f       	subi	r25, 0xFF	; 255
 3c8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	44 1f       	adc	r20, r20
 3d0:	aa 1f       	adc	r26, r26
 3d2:	a9 f3       	breq	.-22     	; 0x3be <__divsf3_pse+0x10>
 3d4:	35 d0       	rcall	.+106    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3d6:	0e 2e       	mov	r0, r30
 3d8:	3a f0       	brmi	.+14     	; 0x3e8 <__divsf3_pse+0x3a>
 3da:	e0 e8       	ldi	r30, 0x80	; 128
 3dc:	32 d0       	rcall	.+100    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3de:	91 50       	subi	r25, 0x01	; 1
 3e0:	50 40       	sbci	r21, 0x00	; 0
 3e2:	e6 95       	lsr	r30
 3e4:	00 1c       	adc	r0, r0
 3e6:	ca f7       	brpl	.-14     	; 0x3da <__divsf3_pse+0x2c>
 3e8:	2b d0       	rcall	.+86     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3ea:	fe 2f       	mov	r31, r30
 3ec:	29 d0       	rcall	.+82     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3ee:	66 0f       	add	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	bb 1f       	adc	r27, r27
 3f6:	26 17       	cp	r18, r22
 3f8:	37 07       	cpc	r19, r23
 3fa:	48 07       	cpc	r20, r24
 3fc:	ab 07       	cpc	r26, r27
 3fe:	b0 e8       	ldi	r27, 0x80	; 128
 400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	bb 0b       	sbc	r27, r27
 404:	80 2d       	mov	r24, r0
 406:	bf 01       	movw	r22, r30
 408:	ff 27       	eor	r31, r31
 40a:	93 58       	subi	r25, 0x83	; 131
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	3a f0       	brmi	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	9e 3f       	cpi	r25, 0xFE	; 254
 412:	51 05       	cpc	r21, r1
 414:	78 f0       	brcs	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 416:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_inf>
 41a:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_szero>
 41e:	5f 3f       	cpi	r21, 0xFF	; 255
 420:	e4 f3       	brlt	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	98 3e       	cpi	r25, 0xE8	; 232
 424:	d4 f3       	brlt	.-12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 426:	86 95       	lsr	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b7 95       	ror	r27
 42e:	f7 95       	ror	r31
 430:	9f 5f       	subi	r25, 0xFF	; 255
 432:	c9 f7       	brne	.-14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 434:	88 0f       	add	r24, r24
 436:	91 1d       	adc	r25, r1
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
 43c:	97 f9       	bld	r25, 7
 43e:	08 95       	ret
 440:	e1 e0       	ldi	r30, 0x01	; 1
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	bb 1f       	adc	r27, r27
 44a:	62 17       	cp	r22, r18
 44c:	73 07       	cpc	r23, r19
 44e:	84 07       	cpc	r24, r20
 450:	ba 07       	cpc	r27, r26
 452:	20 f0       	brcs	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 454:	62 1b       	sub	r22, r18
 456:	73 0b       	sbc	r23, r19
 458:	84 0b       	sbc	r24, r20
 45a:	ba 0b       	sbc	r27, r26
 45c:	ee 1f       	adc	r30, r30
 45e:	88 f7       	brcc	.-30     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 460:	e0 95       	com	r30
 462:	08 95       	ret

00000464 <__fixsfsi>:
 464:	0e 94 39 02 	call	0x472	; 0x472 <__fixunssfsi>
 468:	68 94       	set
 46a:	b1 11       	cpse	r27, r1
 46c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_szero>
 470:	08 95       	ret

00000472 <__fixunssfsi>:
 472:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fp_splitA>
 476:	88 f0       	brcs	.+34     	; 0x49a <__fixunssfsi+0x28>
 478:	9f 57       	subi	r25, 0x7F	; 127
 47a:	98 f0       	brcs	.+38     	; 0x4a2 <__fixunssfsi+0x30>
 47c:	b9 2f       	mov	r27, r25
 47e:	99 27       	eor	r25, r25
 480:	b7 51       	subi	r27, 0x17	; 23
 482:	b0 f0       	brcs	.+44     	; 0x4b0 <__fixunssfsi+0x3e>
 484:	e1 f0       	breq	.+56     	; 0x4be <__fixunssfsi+0x4c>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	1a f0       	brmi	.+6      	; 0x496 <__fixunssfsi+0x24>
 490:	ba 95       	dec	r27
 492:	c9 f7       	brne	.-14     	; 0x486 <__fixunssfsi+0x14>
 494:	14 c0       	rjmp	.+40     	; 0x4be <__fixunssfsi+0x4c>
 496:	b1 30       	cpi	r27, 0x01	; 1
 498:	91 f0       	breq	.+36     	; 0x4be <__fixunssfsi+0x4c>
 49a:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_zero>
 49e:	b1 e0       	ldi	r27, 0x01	; 1
 4a0:	08 95       	ret
 4a2:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__fp_zero>
 4a6:	67 2f       	mov	r22, r23
 4a8:	78 2f       	mov	r23, r24
 4aa:	88 27       	eor	r24, r24
 4ac:	b8 5f       	subi	r27, 0xF8	; 248
 4ae:	39 f0       	breq	.+14     	; 0x4be <__fixunssfsi+0x4c>
 4b0:	b9 3f       	cpi	r27, 0xF9	; 249
 4b2:	cc f3       	brlt	.-14     	; 0x4a6 <__fixunssfsi+0x34>
 4b4:	86 95       	lsr	r24
 4b6:	77 95       	ror	r23
 4b8:	67 95       	ror	r22
 4ba:	b3 95       	inc	r27
 4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__fixunssfsi+0x42>
 4be:	3e f4       	brtc	.+14     	; 0x4ce <__fixunssfsi+0x5c>
 4c0:	90 95       	com	r25
 4c2:	80 95       	com	r24
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	08 95       	ret

000004d0 <__floatunsisf>:
 4d0:	e8 94       	clt
 4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <__floatsisf+0x12>

000004d4 <__floatsisf>:
 4d4:	97 fb       	bst	r25, 7
 4d6:	3e f4       	brtc	.+14     	; 0x4e6 <__floatsisf+0x12>
 4d8:	90 95       	com	r25
 4da:	80 95       	com	r24
 4dc:	70 95       	com	r23
 4de:	61 95       	neg	r22
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	99 23       	and	r25, r25
 4e8:	a9 f0       	breq	.+42     	; 0x514 <__floatsisf+0x40>
 4ea:	f9 2f       	mov	r31, r25
 4ec:	96 e9       	ldi	r25, 0x96	; 150
 4ee:	bb 27       	eor	r27, r27
 4f0:	93 95       	inc	r25
 4f2:	f6 95       	lsr	r31
 4f4:	87 95       	ror	r24
 4f6:	77 95       	ror	r23
 4f8:	67 95       	ror	r22
 4fa:	b7 95       	ror	r27
 4fc:	f1 11       	cpse	r31, r1
 4fe:	f8 cf       	rjmp	.-16     	; 0x4f0 <__floatsisf+0x1c>
 500:	fa f4       	brpl	.+62     	; 0x540 <__floatsisf+0x6c>
 502:	bb 0f       	add	r27, r27
 504:	11 f4       	brne	.+4      	; 0x50a <__floatsisf+0x36>
 506:	60 ff       	sbrs	r22, 0
 508:	1b c0       	rjmp	.+54     	; 0x540 <__floatsisf+0x6c>
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	16 c0       	rjmp	.+44     	; 0x540 <__floatsisf+0x6c>
 514:	88 23       	and	r24, r24
 516:	11 f0       	breq	.+4      	; 0x51c <__floatsisf+0x48>
 518:	96 e9       	ldi	r25, 0x96	; 150
 51a:	11 c0       	rjmp	.+34     	; 0x53e <__floatsisf+0x6a>
 51c:	77 23       	and	r23, r23
 51e:	21 f0       	breq	.+8      	; 0x528 <__floatsisf+0x54>
 520:	9e e8       	ldi	r25, 0x8E	; 142
 522:	87 2f       	mov	r24, r23
 524:	76 2f       	mov	r23, r22
 526:	05 c0       	rjmp	.+10     	; 0x532 <__floatsisf+0x5e>
 528:	66 23       	and	r22, r22
 52a:	71 f0       	breq	.+28     	; 0x548 <__floatsisf+0x74>
 52c:	96 e8       	ldi	r25, 0x86	; 134
 52e:	86 2f       	mov	r24, r22
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	2a f0       	brmi	.+10     	; 0x540 <__floatsisf+0x6c>
 536:	9a 95       	dec	r25
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	da f7       	brpl	.-10     	; 0x536 <__floatsisf+0x62>
 540:	88 0f       	add	r24, r24
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	97 f9       	bld	r25, 7
 548:	08 95       	ret

0000054a <__fp_inf>:
 54a:	97 f9       	bld	r25, 7
 54c:	9f 67       	ori	r25, 0x7F	; 127
 54e:	80 e8       	ldi	r24, 0x80	; 128
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	08 95       	ret

00000556 <__fp_nan>:
 556:	9f ef       	ldi	r25, 0xFF	; 255
 558:	80 ec       	ldi	r24, 0xC0	; 192
 55a:	08 95       	ret

0000055c <__fp_pscA>:
 55c:	00 24       	eor	r0, r0
 55e:	0a 94       	dec	r0
 560:	16 16       	cp	r1, r22
 562:	17 06       	cpc	r1, r23
 564:	18 06       	cpc	r1, r24
 566:	09 06       	cpc	r0, r25
 568:	08 95       	ret

0000056a <__fp_pscB>:
 56a:	00 24       	eor	r0, r0
 56c:	0a 94       	dec	r0
 56e:	12 16       	cp	r1, r18
 570:	13 06       	cpc	r1, r19
 572:	14 06       	cpc	r1, r20
 574:	05 06       	cpc	r0, r21
 576:	08 95       	ret

00000578 <__fp_round>:
 578:	09 2e       	mov	r0, r25
 57a:	03 94       	inc	r0
 57c:	00 0c       	add	r0, r0
 57e:	11 f4       	brne	.+4      	; 0x584 <__fp_round+0xc>
 580:	88 23       	and	r24, r24
 582:	52 f0       	brmi	.+20     	; 0x598 <__fp_round+0x20>
 584:	bb 0f       	add	r27, r27
 586:	40 f4       	brcc	.+16     	; 0x598 <__fp_round+0x20>
 588:	bf 2b       	or	r27, r31
 58a:	11 f4       	brne	.+4      	; 0x590 <__fp_round+0x18>
 58c:	60 ff       	sbrs	r22, 0
 58e:	04 c0       	rjmp	.+8      	; 0x598 <__fp_round+0x20>
 590:	6f 5f       	subi	r22, 0xFF	; 255
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__fp_split3>:
 59a:	57 fd       	sbrc	r21, 7
 59c:	90 58       	subi	r25, 0x80	; 128
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	59 f0       	breq	.+22     	; 0x5ba <__fp_splitA+0x10>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <__fp_splitA+0x1a>
 5a8:	47 95       	ror	r20

000005aa <__fp_splitA>:
 5aa:	88 0f       	add	r24, r24
 5ac:	97 fb       	bst	r25, 7
 5ae:	99 1f       	adc	r25, r25
 5b0:	61 f0       	breq	.+24     	; 0x5ca <__fp_splitA+0x20>
 5b2:	9f 3f       	cpi	r25, 0xFF	; 255
 5b4:	79 f0       	breq	.+30     	; 0x5d4 <__fp_splitA+0x2a>
 5b6:	87 95       	ror	r24
 5b8:	08 95       	ret
 5ba:	12 16       	cp	r1, r18
 5bc:	13 06       	cpc	r1, r19
 5be:	14 06       	cpc	r1, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	f2 cf       	rjmp	.-28     	; 0x5a8 <__fp_split3+0xe>
 5c4:	46 95       	lsr	r20
 5c6:	f1 df       	rcall	.-30     	; 0x5aa <__fp_splitA>
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <__fp_splitA+0x30>
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	f1 cf       	rjmp	.-30     	; 0x5b6 <__fp_splitA+0xc>
 5d4:	86 95       	lsr	r24
 5d6:	71 05       	cpc	r23, r1
 5d8:	61 05       	cpc	r22, r1
 5da:	08 94       	sec
 5dc:	08 95       	ret

000005de <__fp_zero>:
 5de:	e8 94       	clt

000005e0 <__fp_szero>:
 5e0:	bb 27       	eor	r27, r27
 5e2:	66 27       	eor	r22, r22
 5e4:	77 27       	eor	r23, r23
 5e6:	cb 01       	movw	r24, r22
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__gesf2>:
 5ec:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_cmp>
 5f0:	08 f4       	brcc	.+2      	; 0x5f4 <__gesf2+0x8>
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	08 95       	ret

000005f6 <__mulsf3>:
 5f6:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3x>
 5fa:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_round>
 5fe:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_pscA>
 602:	38 f0       	brcs	.+14     	; 0x612 <__mulsf3+0x1c>
 604:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_pscB>
 608:	20 f0       	brcs	.+8      	; 0x612 <__mulsf3+0x1c>
 60a:	95 23       	and	r25, r21
 60c:	11 f0       	breq	.+4      	; 0x612 <__mulsf3+0x1c>
 60e:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_inf>
 612:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_nan>
 616:	11 24       	eor	r1, r1
 618:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_szero>

0000061c <__mulsf3x>:
 61c:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_split3>
 620:	70 f3       	brcs	.-36     	; 0x5fe <__mulsf3+0x8>

00000622 <__mulsf3_pse>:
 622:	95 9f       	mul	r25, r21
 624:	c1 f3       	breq	.-16     	; 0x616 <__mulsf3+0x20>
 626:	95 0f       	add	r25, r21
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	55 1f       	adc	r21, r21
 62c:	62 9f       	mul	r22, r18
 62e:	f0 01       	movw	r30, r0
 630:	72 9f       	mul	r23, r18
 632:	bb 27       	eor	r27, r27
 634:	f0 0d       	add	r31, r0
 636:	b1 1d       	adc	r27, r1
 638:	63 9f       	mul	r22, r19
 63a:	aa 27       	eor	r26, r26
 63c:	f0 0d       	add	r31, r0
 63e:	b1 1d       	adc	r27, r1
 640:	aa 1f       	adc	r26, r26
 642:	64 9f       	mul	r22, r20
 644:	66 27       	eor	r22, r22
 646:	b0 0d       	add	r27, r0
 648:	a1 1d       	adc	r26, r1
 64a:	66 1f       	adc	r22, r22
 64c:	82 9f       	mul	r24, r18
 64e:	22 27       	eor	r18, r18
 650:	b0 0d       	add	r27, r0
 652:	a1 1d       	adc	r26, r1
 654:	62 1f       	adc	r22, r18
 656:	73 9f       	mul	r23, r19
 658:	b0 0d       	add	r27, r0
 65a:	a1 1d       	adc	r26, r1
 65c:	62 1f       	adc	r22, r18
 65e:	83 9f       	mul	r24, r19
 660:	a0 0d       	add	r26, r0
 662:	61 1d       	adc	r22, r1
 664:	22 1f       	adc	r18, r18
 666:	74 9f       	mul	r23, r20
 668:	33 27       	eor	r19, r19
 66a:	a0 0d       	add	r26, r0
 66c:	61 1d       	adc	r22, r1
 66e:	23 1f       	adc	r18, r19
 670:	84 9f       	mul	r24, r20
 672:	60 0d       	add	r22, r0
 674:	21 1d       	adc	r18, r1
 676:	82 2f       	mov	r24, r18
 678:	76 2f       	mov	r23, r22
 67a:	6a 2f       	mov	r22, r26
 67c:	11 24       	eor	r1, r1
 67e:	9f 57       	subi	r25, 0x7F	; 127
 680:	50 40       	sbci	r21, 0x00	; 0
 682:	9a f0       	brmi	.+38     	; 0x6aa <__mulsf3_pse+0x88>
 684:	f1 f0       	breq	.+60     	; 0x6c2 <__mulsf3_pse+0xa0>
 686:	88 23       	and	r24, r24
 688:	4a f0       	brmi	.+18     	; 0x69c <__mulsf3_pse+0x7a>
 68a:	ee 0f       	add	r30, r30
 68c:	ff 1f       	adc	r31, r31
 68e:	bb 1f       	adc	r27, r27
 690:	66 1f       	adc	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	91 50       	subi	r25, 0x01	; 1
 698:	50 40       	sbci	r21, 0x00	; 0
 69a:	a9 f7       	brne	.-22     	; 0x686 <__mulsf3_pse+0x64>
 69c:	9e 3f       	cpi	r25, 0xFE	; 254
 69e:	51 05       	cpc	r21, r1
 6a0:	80 f0       	brcs	.+32     	; 0x6c2 <__mulsf3_pse+0xa0>
 6a2:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_inf>
 6a6:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_szero>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	e4 f3       	brlt	.-8      	; 0x6a6 <__mulsf3_pse+0x84>
 6ae:	98 3e       	cpi	r25, 0xE8	; 232
 6b0:	d4 f3       	brlt	.-12     	; 0x6a6 <__mulsf3_pse+0x84>
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f7 95       	ror	r31
 6bc:	e7 95       	ror	r30
 6be:	9f 5f       	subi	r25, 0xFF	; 255
 6c0:	c1 f7       	brne	.-16     	; 0x6b2 <__mulsf3_pse+0x90>
 6c2:	fe 2b       	or	r31, r30
 6c4:	88 0f       	add	r24, r24
 6c6:	91 1d       	adc	r25, r1
 6c8:	96 95       	lsr	r25
 6ca:	87 95       	ror	r24
 6cc:	97 f9       	bld	r25, 7
 6ce:	08 95       	ret

000006d0 <__fp_cmp>:
 6d0:	99 0f       	add	r25, r25
 6d2:	00 08       	sbc	r0, r0
 6d4:	55 0f       	add	r21, r21
 6d6:	aa 0b       	sbc	r26, r26
 6d8:	e0 e8       	ldi	r30, 0x80	; 128
 6da:	fe ef       	ldi	r31, 0xFE	; 254
 6dc:	16 16       	cp	r1, r22
 6de:	17 06       	cpc	r1, r23
 6e0:	e8 07       	cpc	r30, r24
 6e2:	f9 07       	cpc	r31, r25
 6e4:	c0 f0       	brcs	.+48     	; 0x716 <__fp_cmp+0x46>
 6e6:	12 16       	cp	r1, r18
 6e8:	13 06       	cpc	r1, r19
 6ea:	e4 07       	cpc	r30, r20
 6ec:	f5 07       	cpc	r31, r21
 6ee:	98 f0       	brcs	.+38     	; 0x716 <__fp_cmp+0x46>
 6f0:	62 1b       	sub	r22, r18
 6f2:	73 0b       	sbc	r23, r19
 6f4:	84 0b       	sbc	r24, r20
 6f6:	95 0b       	sbc	r25, r21
 6f8:	39 f4       	brne	.+14     	; 0x708 <__fp_cmp+0x38>
 6fa:	0a 26       	eor	r0, r26
 6fc:	61 f0       	breq	.+24     	; 0x716 <__fp_cmp+0x46>
 6fe:	23 2b       	or	r18, r19
 700:	24 2b       	or	r18, r20
 702:	25 2b       	or	r18, r21
 704:	21 f4       	brne	.+8      	; 0x70e <__fp_cmp+0x3e>
 706:	08 95       	ret
 708:	0a 26       	eor	r0, r26
 70a:	09 f4       	brne	.+2      	; 0x70e <__fp_cmp+0x3e>
 70c:	a1 40       	sbci	r26, 0x01	; 1
 70e:	a6 95       	lsr	r26
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	81 1d       	adc	r24, r1
 714:	81 1d       	adc	r24, r1
 716:	08 95       	ret

00000718 <__udivmodsi4>:
 718:	a1 e2       	ldi	r26, 0x21	; 33
 71a:	1a 2e       	mov	r1, r26
 71c:	aa 1b       	sub	r26, r26
 71e:	bb 1b       	sub	r27, r27
 720:	fd 01       	movw	r30, r26
 722:	0d c0       	rjmp	.+26     	; 0x73e <__udivmodsi4_ep>

00000724 <__udivmodsi4_loop>:
 724:	aa 1f       	adc	r26, r26
 726:	bb 1f       	adc	r27, r27
 728:	ee 1f       	adc	r30, r30
 72a:	ff 1f       	adc	r31, r31
 72c:	a2 17       	cp	r26, r18
 72e:	b3 07       	cpc	r27, r19
 730:	e4 07       	cpc	r30, r20
 732:	f5 07       	cpc	r31, r21
 734:	20 f0       	brcs	.+8      	; 0x73e <__udivmodsi4_ep>
 736:	a2 1b       	sub	r26, r18
 738:	b3 0b       	sbc	r27, r19
 73a:	e4 0b       	sbc	r30, r20
 73c:	f5 0b       	sbc	r31, r21

0000073e <__udivmodsi4_ep>:
 73e:	66 1f       	adc	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	88 1f       	adc	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	1a 94       	dec	r1
 748:	69 f7       	brne	.-38     	; 0x724 <__udivmodsi4_loop>
 74a:	60 95       	com	r22
 74c:	70 95       	com	r23
 74e:	80 95       	com	r24
 750:	90 95       	com	r25
 752:	9b 01       	movw	r18, r22
 754:	ac 01       	movw	r20, r24
 756:	bd 01       	movw	r22, r26
 758:	cf 01       	movw	r24, r30
 75a:	08 95       	ret

0000075c <eeprom_write_byte>:
 75c:	26 2f       	mov	r18, r22

0000075e <eeprom_write_r18>:
 75e:	f9 99       	sbic	0x1f, 1	; 31
 760:	fe cf       	rjmp	.-4      	; 0x75e <eeprom_write_r18>
 762:	92 bd       	out	0x22, r25	; 34
 764:	81 bd       	out	0x21, r24	; 33
 766:	20 bd       	out	0x20, r18	; 32
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	fa 9a       	sbi	0x1f, 2	; 31
 76e:	f9 9a       	sbi	0x1f, 1	; 31
 770:	0f be       	out	0x3f, r0	; 63
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	08 95       	ret

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
