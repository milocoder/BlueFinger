
Datalogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000de  00800100  00800100  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5e  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfe  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000602  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000025e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000626  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e3  00000000  00000000  00002d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000030f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ae 3d       	cpi	r26, 0xDE	; 222
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 5f 01 	call	0x2be	; 0x2be <main>
  b4:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <initCAN>:

		messageAvailable = 1;
	}

	return messageAvailable;
}
  bc:	e8 ed       	ldi	r30, 0xD8	; 216
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
  d2:	83 e1       	ldi	r24, 0x13	; 19
  d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <initCAN+0x30>
  dc:	98 2f       	mov	r25, r24
  de:	92 95       	swap	r25
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
  e6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	b0 f3       	brcs	.-20     	; 0xdc <initCAN+0x20>
  f0:	78 94       	sei
  f2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
  f6:	80 eb       	ldi	r24, 0xB0	; 176
  f8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
  fc:	e8 ed       	ldi	r30, 0xD8	; 216
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <getLastCANError>:
 108:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	96 fb       	bst	r25, 6
 10e:	22 27       	eor	r18, r18
 110:	20 f9       	bld	r18, 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	20 fb       	bst	r18, 0
 116:	80 f9       	bld	r24, 0
 118:	95 fb       	bst	r25, 5
 11a:	22 27       	eor	r18, r18
 11c:	20 f9       	bld	r18, 0
 11e:	20 fb       	bst	r18, 0
 120:	81 f9       	bld	r24, 1
 122:	94 fb       	bst	r25, 4
 124:	22 27       	eor	r18, r18
 126:	20 f9       	bld	r18, 0
 128:	20 fb       	bst	r18, 0
 12a:	82 f9       	bld	r24, 2
 12c:	93 fb       	bst	r25, 3
 12e:	22 27       	eor	r18, r18
 130:	20 f9       	bld	r18, 0
 132:	20 fb       	bst	r18, 0
 134:	83 f9       	bld	r24, 3
 136:	92 fb       	bst	r25, 2
 138:	22 27       	eor	r18, r18
 13a:	20 f9       	bld	r18, 0
 13c:	20 fb       	bst	r18, 0
 13e:	84 f9       	bld	r24, 4
 140:	91 fb       	bst	r25, 1
 142:	22 27       	eor	r18, r18
 144:	20 f9       	bld	r18, 0
 146:	20 fb       	bst	r18, 0
 148:	85 f9       	bld	r24, 5
 14a:	90 fb       	bst	r25, 0
 14c:	86 f9       	bld	r24, 6
 14e:	08 95       	ret

00000150 <__vector_18>:
 * Note that the NO_BLOCK attribute is not applied here, so while this is running,
 * all interrupts are blocked.
 *
 */
ISR( CANIT_vect )
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	cf 93       	push	r28
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	// **Save off CANPAGE to prevent application code bugs**
	uint8_t canPage = CANPAGE;
 174:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 178:	87 c0       	rjmp	.+270    	; 0x288 <__vector_18+0x138>
	{
		// Point to the Message Object that needs to be serviced
		CANPAGE = CANHPMOB & 0xF0;
 17a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

		// Service the correct kind of interrupt
		// Transmit Interrupts
		if( CANSTMOB & (1 << TXOK) )
 184:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
 188:	86 ff       	sbrs	r24, 6
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <__vector_18+0x54>
		{
			// Acknowledge the interrupt
			CANSTMOB = 0;
 18c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			// Free up the MOb
			CANCDMOB = 0;
 190:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

			// Determine the MOb index
			uint8_t mob = (CANPAGE & 0xF0) >> 8;
 194:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

			// Disable interrupts for this MOb
			if( mob < 8 )
			{
				CANIE2 &= ~(1 << mob);
 198:	ee ed       	ldi	r30, 0xDE	; 222
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	80 83       	st	Z, r24
 1a2:	72 c0       	rjmp	.+228    	; 0x288 <__vector_18+0x138>
			{
				CANIE1 &= ~(1 << (mob-8));
			}
		}
		// Receive Interrupts
		else if ( CANSTMOB & (1 << RXOK) )
 1a4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
 1a8:	85 ff       	sbrs	r24, 5
 1aa:	62 c0       	rjmp	.+196    	; 0x270 <__vector_18+0x120>
		{
			// Default to impossible ID
			uint16_t id = 0xFFFF;

			// Load the message data into a free message buffer object
			if( CANCDMOB & (1 << IDE) )
 1ac:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 1b0:	84 ff       	sbrs	r24, 4
 1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <__vector_18+0x80>
			{
				// Message type is CAN 2.0B
				id = (CANIDT4 >> 3) | ((CANIDT3 & 0x7F) << 5); 
 1b4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
 1b8:	86 95       	lsr	r24
 1ba:	86 95       	lsr	r24
 1bc:	86 95       	lsr	r24
 1be:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
 1c2:	4f 77       	andi	r20, 0x7F	; 127
 1c4:	90 e2       	ldi	r25, 0x20	; 32
 1c6:	49 9f       	mul	r20, r25
 1c8:	a0 01       	movw	r20, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	48 2b       	or	r20, r24
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <__vector_18+0x9e>
			}
			else
			{
				// Message type is CAN 2.0A
				id = (CANIDT2 >> 5) | (((uint16_t)CANIDT1 << 3));
 1d0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
 1d4:	82 95       	swap	r24
 1d6:	86 95       	lsr	r24
 1d8:	87 70       	andi	r24, 0x07	; 7
 1da:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	48 2b       	or	r20, r24
			}

			messageBuffer[bufIndex].id = id;
 1ee:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bufIndex>
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	8b e0       	ldi	r24, 0x0B	; 11
 1f6:	82 9f       	mul	r24, r18
 1f8:	f0 01       	movw	r30, r0
 1fa:	83 9f       	mul	r24, r19
 1fc:	f0 0d       	add	r31, r0
 1fe:	11 24       	eor	r1, r1
 200:	ee 5f       	subi	r30, 0xFE	; 254
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	40 83       	st	Z, r20
 206:	95 2f       	mov	r25, r21
 208:	97 70       	andi	r25, 0x07	; 7
 20a:	81 81       	ldd	r24, Z+1	; 0x01
 20c:	88 7f       	andi	r24, 0xF8	; 248
 20e:	89 2b       	or	r24, r25
 210:	81 83       	std	Z+1, r24	; 0x01

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;
 212:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	82 87       	std	Z+10, r24	; 0x0a

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e c0       	rjmp	.+28     	; 0x23a <__vector_18+0xea>
			{
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
 21e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
 222:	4b e0       	ldi	r20, 0x0B	; 11
 224:	42 9f       	mul	r20, r18
 226:	f0 01       	movw	r30, r0
 228:	43 9f       	mul	r20, r19
 22a:	f0 0d       	add	r31, r0
 22c:	11 24       	eor	r1, r1
 22e:	ee 5f       	subi	r30, 0xFE	; 254
 230:	fe 4f       	sbci	r31, 0xFE	; 254
 232:	e9 0f       	add	r30, r25
 234:	f1 1d       	adc	r31, r1
 236:	82 83       	std	Z+2, r24	; 0x02
			messageBuffer[bufIndex].id = id;

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	8b e0       	ldi	r24, 0x0B	; 11
 23c:	82 9f       	mul	r24, r18
 23e:	f0 01       	movw	r30, r0
 240:	83 9f       	mul	r24, r19
 242:	f0 0d       	add	r31, r0
 244:	11 24       	eor	r1, r1
 246:	ee 5f       	subi	r30, 0xFE	; 254
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	82 85       	ldd	r24, Z+10	; 0x0a
 24c:	98 17       	cp	r25, r24
 24e:	38 f3       	brcs	.-50     	; 0x21e <__vector_18+0xce>
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
			}

			bufIndex = (bufIndex + 1) % MESSAGE_BUFFER_LENGTH;
 250:	c9 01       	movw	r24, r18
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	64 e1       	ldi	r22, 0x14	; 20
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodhi4>
 25c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufIndex>

			// Acknowledge the interrupt
			CANSTMOB = 0;
 260:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			CANCDMOB |= (2 << CONMOB0);
 264:	ef ee       	ldi	r30, 0xEF	; 239
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	80 83       	st	Z, r24
 26e:	0c c0       	rjmp	.+24     	; 0x288 <__vector_18+0x138>
			
		}
		else if ( CANGIT & ~(1 << CANIT) )
 270:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	8f 77       	andi	r24, 0x7F	; 127
 278:	89 2b       	or	r24, r25
 27a:	31 f0       	breq	.+12     	; 0x288 <__vector_18+0x138>
		{
			// Preserve the last error received
			lastError = CANGIT;
 27c:	ea ed       	ldi	r30, 0xDA	; 218
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			// Clear the error
			CANGIT = 0;
 286:	10 82       	st	Z, r1
	uint8_t canPage = CANPAGE;

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 288:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
 28c:	82 95       	swap	r24
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	8f 30       	cpi	r24, 0x0F	; 15
 292:	09 f0       	breq	.+2      	; 0x296 <__vector_18+0x146>
 294:	72 cf       	rjmp	.-284    	; 0x17a <__vector_18+0x2a>
			CANGIT = 0;
		}
	}

	// Restore CANPAGE register to where application code had it before interrupt
	CANPAGE = canPage;
 296:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	cf 91       	pop	r28
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <main>:
		_delay_ms(25);
		PORTC = 0;
		_delay_ms(25);	
	}
	*/
	DDRC = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	87 b9       	out	0x07, r24	; 7
	initCAN();
 2c2:	0e 94 5e 00 	call	0xbc	; 0xbc <initCAN>
	CANErrorStatus errorStatus = getLastCANError();
 2c6:	0e 94 84 00 	call	0x108	; 0x108 <getLastCANError>
	if (*(uint8_t*)&errorStatus) 
 2ca:	88 23       	and	r24, r24
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <main+0x16>
	{
		PORTC = 1;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <main+0x18>
	} else 
	{
		PORTC = 0;
 2d4:	18 b8       	out	0x08, r1	; 8
	}
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret

000002dc <__divmodhi4>:
 2dc:	97 fb       	bst	r25, 7
 2de:	07 2e       	mov	r0, r23
 2e0:	16 f4       	brtc	.+4      	; 0x2e6 <__divmodhi4+0xa>
 2e2:	00 94       	com	r0
 2e4:	07 d0       	rcall	.+14     	; 0x2f4 <__divmodhi4_neg1>
 2e6:	77 fd       	sbrc	r23, 7
 2e8:	09 d0       	rcall	.+18     	; 0x2fc <__divmodhi4_neg2>
 2ea:	0e 94 82 01 	call	0x304	; 0x304 <__udivmodhi4>
 2ee:	07 fc       	sbrc	r0, 7
 2f0:	05 d0       	rcall	.+10     	; 0x2fc <__divmodhi4_neg2>
 2f2:	3e f4       	brtc	.+14     	; 0x302 <__divmodhi4_exit>

000002f4 <__divmodhi4_neg1>:
 2f4:	90 95       	com	r25
 2f6:	81 95       	neg	r24
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	08 95       	ret

000002fc <__divmodhi4_neg2>:
 2fc:	70 95       	com	r23
 2fe:	61 95       	neg	r22
 300:	7f 4f       	sbci	r23, 0xFF	; 255

00000302 <__divmodhi4_exit>:
 302:	08 95       	ret

00000304 <__udivmodhi4>:
 304:	aa 1b       	sub	r26, r26
 306:	bb 1b       	sub	r27, r27
 308:	51 e1       	ldi	r21, 0x11	; 17
 30a:	07 c0       	rjmp	.+14     	; 0x31a <__udivmodhi4_ep>

0000030c <__udivmodhi4_loop>:
 30c:	aa 1f       	adc	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	a6 17       	cp	r26, r22
 312:	b7 07       	cpc	r27, r23
 314:	10 f0       	brcs	.+4      	; 0x31a <__udivmodhi4_ep>
 316:	a6 1b       	sub	r26, r22
 318:	b7 0b       	sbc	r27, r23

0000031a <__udivmodhi4_ep>:
 31a:	88 1f       	adc	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	5a 95       	dec	r21
 320:	a9 f7       	brne	.-22     	; 0x30c <__udivmodhi4_loop>
 322:	80 95       	com	r24
 324:	90 95       	com	r25
 326:	bc 01       	movw	r22, r24
 328:	cd 01       	movw	r24, r26
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
