
Datalogger_ontvangen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000df  00800100  00800100  000007b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f1e  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be4  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000652  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f4  00000000  00000000  000031ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000349f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	af 3d       	cpi	r26, 0xDF	; 223
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 4b 03 	call	0x696	; 0x696 <main>
  b4:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <initCAN>:

	// Set the MOB's mode to transmission, also activating it.
	CANCDMOB |= (0x01 << CONMOB0);

	return 1;
}
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	88 ed       	ldi	r24, 0xD8	; 216
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	28 ed       	ldi	r18, 0xD8	; 216
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	21 60       	ori	r18, 0x01	; 1
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
  d8:	82 ee       	ldi	r24, 0xE2	; 226
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	26 e0       	ldi	r18, 0x06	; 6
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
  e2:	83 ee       	ldi	r24, 0xE3	; 227
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	24 e0       	ldi	r18, 0x04	; 4
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	84 ee       	ldi	r24, 0xE4	; 228
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	23 e1       	ldi	r18, 0x13	; 19
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	0e c0       	rjmp	.+28     	; 0x116 <initCAN+0x5a>
  fa:	8d ee       	ldi	r24, 0xED	; 237
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	29 81       	ldd	r18, Y+1	; 0x01
 100:	22 95       	swap	r18
 102:	20 7f       	andi	r18, 0xF0	; 240
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
 108:	8f ee       	ldi	r24, 0xEF	; 239
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	10 82       	st	Z, r1
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	78 f3       	brcs	.-34     	; 0xfa <initCAN+0x3e>
 11c:	78 94       	sei
 11e:	8a ed       	ldi	r24, 0xDA	; 218
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	10 82       	st	Z, r1
 126:	8b ed       	ldi	r24, 0xDB	; 219
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	20 eb       	ldi	r18, 0xB0	; 176
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	88 ed       	ldi	r24, 0xD8	; 216
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	28 ed       	ldi	r18, 0xD8	; 216
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	22 60       	ori	r18, 0x02	; 2
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <getFreeMob>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	1f 92       	push	r1
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	19 82       	std	Y+1, r1	; 0x01
 158:	16 c0       	rjmp	.+44     	; 0x186 <getFreeMob+0x3a>
 15a:	8d ee       	ldi	r24, 0xED	; 237
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	29 81       	ldd	r18, Y+1	; 0x01
 160:	22 95       	swap	r18
 162:	20 7f       	andi	r18, 0xF0	; 240
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 168:	8f ee       	ldi	r24, 0xEF	; 239
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	80 7c       	andi	r24, 0xC0	; 192
 176:	99 27       	eor	r25, r25
 178:	89 2b       	or	r24, r25
 17a:	11 f4       	brne	.+4      	; 0x180 <getFreeMob+0x34>
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	07 c0       	rjmp	.+14     	; 0x18e <getFreeMob+0x42>
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	8f 30       	cpi	r24, 0x0F	; 15
 18a:	38 f3       	brcs	.-50     	; 0x15a <getFreeMob+0xe>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <listenForMessage>:
 * @param[in] id - the provided id
 * @return 0 if no free message objects left, 1 otherwise
 *
 */
uint8_t listenForMessage( uint16_t id, uint8_t expectedLength )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <listenForMessage+0x6>
 19c:	00 d0       	rcall	.+0      	; 0x19e <listenForMessage+0x8>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	9b 83       	std	Y+3, r25	; 0x03
 1a4:	8a 83       	std	Y+2, r24	; 0x02
 1a6:	6c 83       	std	Y+4, r22	; 0x04
	// Try to get a free MOb
	uint8_t mobIndex = getFreeMob();
 1a8:	0e 94 a6 00 	call	0x14c	; 0x14c <getFreeMob>
 1ac:	89 83       	std	Y+1, r24	; 0x01

	if( mobIndex == 0xFF )
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	8f 3f       	cpi	r24, 0xFF	; 255
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <listenForMessage+0x22>
	{
		// No free Message Objects
		return 0;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	77 c0       	rjmp	.+238    	; 0x2a6 <listenForMessage+0x110>
	}

	// Point to the free message object
	CANPAGE |= (mobIndex << 4);
 1b8:	8d ee       	ldi	r24, 0xED	; 237
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	2d ee       	ldi	r18, 0xED	; 237
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	42 2f       	mov	r20, r18
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	22 2f       	mov	r18, r18
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	22 95       	swap	r18
 1ce:	32 95       	swap	r19
 1d0:	30 7f       	andi	r19, 0xF0	; 240
 1d2:	32 27       	eor	r19, r18
 1d4:	20 7f       	andi	r18, 0xF0	; 240
 1d6:	32 27       	eor	r19, r18
 1d8:	24 2b       	or	r18, r20
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18

	// Set the MOb's CAN id to the id to be listened for
	CANIDT4 = 0;
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	10 82       	st	Z, r1
	CANIDT3 = 0;
 1e6:	81 ef       	ldi	r24, 0xF1	; 241
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	10 82       	st	Z, r1
	CANIDT2 = id << 5;
 1ee:	82 ef       	ldi	r24, 0xF2	; 242
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	2a 81       	ldd	r18, Y+2	; 0x02
 1f4:	22 95       	swap	r18
 1f6:	22 0f       	add	r18, r18
 1f8:	20 7e       	andi	r18, 0xE0	; 224
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	CANIDT1 = id >> 3;
 1fe:	83 ef       	ldi	r24, 0xF3	; 243
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	2a 81       	ldd	r18, Y+2	; 0x02
 204:	3b 81       	ldd	r19, Y+3	; 0x03
 206:	36 95       	lsr	r19
 208:	27 95       	ror	r18
 20a:	36 95       	lsr	r19
 20c:	27 95       	ror	r18
 20e:	36 95       	lsr	r19
 210:	27 95       	ror	r18
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18

	if( expectedLength > 8 )
 216:	8c 81       	ldd	r24, Y+4	; 0x04
 218:	89 30       	cpi	r24, 0x09	; 9
 21a:	10 f0       	brcs	.+4      	; 0x220 <listenForMessage+0x8a>
	{
		expectedLength = 8;
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	8c 83       	std	Y+4, r24	; 0x04
	}

	// Set the MOb's expected length
	CANCDMOB |= expectedLength;
 220:	8f ee       	ldi	r24, 0xEF	; 239
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	2f ee       	ldi	r18, 0xEF	; 239
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	f9 01       	movw	r30, r18
 22a:	30 81       	ld	r19, Z
 22c:	2c 81       	ldd	r18, Y+4	; 0x04
 22e:	23 2b       	or	r18, r19
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18

	// Enable interrupts for this MOb
	if( mobIndex < 8 )
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	88 30       	cpi	r24, 0x08	; 8
 238:	a8 f4       	brcc	.+42     	; 0x264 <listenForMessage+0xce>
	{
		CANIE2 |= (1 << mobIndex);
 23a:	8e ed       	ldi	r24, 0xDE	; 222
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2e ed       	ldi	r18, 0xDE	; 222
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	62 2f       	mov	r22, r18
 248:	29 81       	ldd	r18, Y+1	; 0x01
 24a:	42 2f       	mov	r20, r18
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <listenForMessage+0xc2>
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	4a 95       	dec	r20
 25a:	e2 f7       	brpl	.-8      	; 0x254 <listenForMessage+0xbe>
 25c:	26 2b       	or	r18, r22
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
 262:	17 c0       	rjmp	.+46     	; 0x292 <listenForMessage+0xfc>
	}
	else
	{
		CANIE1 |= (1 << (mobIndex-8));
 264:	8f ed       	ldi	r24, 0xDF	; 223
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	2f ed       	ldi	r18, 0xDF	; 223
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	f9 01       	movw	r30, r18
 26e:	20 81       	ld	r18, Z
 270:	62 2f       	mov	r22, r18
 272:	29 81       	ldd	r18, Y+1	; 0x01
 274:	22 2f       	mov	r18, r18
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	a9 01       	movw	r20, r18
 27a:	48 50       	subi	r20, 0x08	; 8
 27c:	51 09       	sbc	r21, r1
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <listenForMessage+0xf2>
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	4a 95       	dec	r20
 28a:	e2 f7       	brpl	.-8      	; 0x284 <listenForMessage+0xee>
 28c:	26 2b       	or	r18, r22
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
	}

	// Set the MOb's mode to receive, also activating it.
	CANCDMOB |= (0x02 << CONMOB0);
 292:	8f ee       	ldi	r24, 0xEF	; 239
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2f ee       	ldi	r18, 0xEF	; 239
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	20 68       	ori	r18, 0x80	; 128
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18

	return 1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
}
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <getMessage>:
 * @param[out] message - message data to fill
 * @return 1 if message was filled, 0 otherwise
 *
 */
uint8_t getMessage( CANMessage * message )
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <getMessage+0x6>
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <getMessage+0x8>
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	9c 83       	std	Y+4, r25	; 0x04
 2c2:	8b 83       	std	Y+3, r24	; 0x03
	// Default to no message available
	uint8_t messageAvailable = 0;
 2c4:	19 82       	std	Y+1, r1	; 0x01

	if( serviceIndex != bufIndex )
 2c6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 2ce:	98 17       	cp	r25, r24
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <getMessage+0x20>
 2d2:	67 c0       	rjmp	.+206    	; 0x3a2 <getMessage+0xee>
	{
		// Load the data from the next message received in FIFO order into the out message
		message->id = messageBuffer[ serviceIndex ].id;
 2d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	4b e0       	ldi	r20, 0x0B	; 11
 2de:	42 9f       	mul	r20, r18
 2e0:	c0 01       	movw	r24, r0
 2e2:	43 9f       	mul	r20, r19
 2e4:	90 0d       	add	r25, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8d 5f       	subi	r24, 0xFD	; 253
 2ea:	9e 4f       	sbci	r25, 0xFE	; 254
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 81       	ld	r18, Z
 2f0:	fc 01       	movw	r30, r24
 2f2:	81 81       	ldd	r24, Z+1	; 0x01
 2f4:	38 2f       	mov	r19, r24
 2f6:	37 70       	andi	r19, 0x07	; 7
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	9c 81       	ldd	r25, Y+4	; 0x04
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
 300:	23 2f       	mov	r18, r19
 302:	27 70       	andi	r18, 0x07	; 7
 304:	fc 01       	movw	r30, r24
 306:	31 81       	ldd	r19, Z+1	; 0x01
 308:	38 7f       	andi	r19, 0xF8	; 248
 30a:	23 2b       	or	r18, r19
 30c:	fc 01       	movw	r30, r24
 30e:	21 83       	std	Z+1, r18	; 0x01
		message->length = messageBuffer[ serviceIndex ].length;
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	4b e0       	ldi	r20, 0x0B	; 11
 31a:	42 9f       	mul	r20, r18
 31c:	c0 01       	movw	r24, r0
 31e:	43 9f       	mul	r20, r19
 320:	90 0d       	add	r25, r0
 322:	11 24       	eor	r1, r1
 324:	83 5f       	subi	r24, 0xF3	; 243
 326:	9e 4f       	sbci	r25, 0xFE	; 254
 328:	fc 01       	movw	r30, r24
 32a:	20 81       	ld	r18, Z
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	9c 81       	ldd	r25, Y+4	; 0x04
 330:	fc 01       	movw	r30, r24
 332:	22 87       	std	Z+10, r18	; 0x0a

		for( uint8_t i = 0; i < message->length; ++i )
 334:	1a 82       	std	Y+2, r1	; 0x02
 336:	20 c0       	rjmp	.+64     	; 0x378 <getMessage+0xc4>
		{
			message->data[ i ] = messageBuffer[ serviceIndex ].data[ i ];
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 342:	62 2f       	mov	r22, r18
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	2a 81       	ldd	r18, Y+2	; 0x02
 348:	22 2f       	mov	r18, r18
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	eb e0       	ldi	r30, 0x0B	; 11
 34e:	e6 9f       	mul	r30, r22
 350:	a0 01       	movw	r20, r0
 352:	e7 9f       	mul	r30, r23
 354:	50 0d       	add	r21, r0
 356:	11 24       	eor	r1, r1
 358:	24 0f       	add	r18, r20
 35a:	35 1f       	adc	r19, r21
 35c:	2b 5f       	subi	r18, 0xFB	; 251
 35e:	3e 4f       	sbci	r19, 0xFE	; 254
 360:	f9 01       	movw	r30, r18
 362:	40 81       	ld	r20, Z
 364:	2b 81       	ldd	r18, Y+3	; 0x03
 366:	3c 81       	ldd	r19, Y+4	; 0x04
 368:	82 0f       	add	r24, r18
 36a:	93 1f       	adc	r25, r19
 36c:	02 96       	adiw	r24, 0x02	; 2
 36e:	fc 01       	movw	r30, r24
 370:	40 83       	st	Z, r20
	{
		// Load the data from the next message received in FIFO order into the out message
		message->id = messageBuffer[ serviceIndex ].id;
		message->length = messageBuffer[ serviceIndex ].length;

		for( uint8_t i = 0; i < message->length; ++i )
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	8a 83       	std	Y+2, r24	; 0x02
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	9c 81       	ldd	r25, Y+4	; 0x04
 37c:	fc 01       	movw	r30, r24
 37e:	92 85       	ldd	r25, Z+10	; 0x0a
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	89 17       	cp	r24, r25
 384:	c8 f2       	brcs	.-78     	; 0x338 <getMessage+0x84>
		{
			message->data[ i ] = messageBuffer[ serviceIndex ].data[ i ];
		}

		// Increment the index pointing to the next message to be serviced
		serviceIndex = (serviceIndex + 1) % MESSAGE_BUFFER_LENGTH;
 386:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	24 e1       	ldi	r18, 0x14	; 20
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	b9 01       	movw	r22, r18
 396:	0e 94 75 03 	call	0x6ea	; 0x6ea <__divmodhi4>
 39a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		messageAvailable = 1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	89 83       	std	Y+1, r24	; 0x01
	}

	return messageAvailable;
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <__vector_18>:
 * Note that the NO_BLOCK attribute is not applied here, so while this is running,
 * all interrupts are blocked.
 *
 */
ISR( CANIT_vect )
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	25 97       	sbiw	r28, 0x05	; 5
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	cd bf       	out	0x3d, r28	; 61
	// **Save off CANPAGE to prevent application code bugs**
	uint8_t canPage = CANPAGE;
 3e4:	8d ee       	ldi	r24, 0xED	; 237
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	80 81       	ld	r24, Z
 3ec:	8c 83       	std	Y+4, r24	; 0x04

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 3ee:	2b c1       	rjmp	.+598    	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
	{
		// Point to the Message Object that needs to be serviced
		CANPAGE = CANHPMOB & 0xF0;
 3f0:	8d ee       	ldi	r24, 0xED	; 237
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	2c ee       	ldi	r18, 0xEC	; 236
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	20 7f       	andi	r18, 0xF0	; 240
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18

		// Service the correct kind of interrupt
		// Transmit Interrupts
		if( CANSTMOB & (1 << TXOK) )
 402:	8e ee       	ldi	r24, 0xEE	; 238
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	fc 01       	movw	r30, r24
 408:	80 81       	ld	r24, Z
 40a:	88 2f       	mov	r24, r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	80 74       	andi	r24, 0x40	; 64
 410:	99 27       	eor	r25, r25
 412:	89 2b       	or	r24, r25
 414:	09 f4       	brne	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 416:	3f c0       	rjmp	.+126    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
		{
			// Acknowledge the interrupt
			CANSTMOB = 0;
 418:	8e ee       	ldi	r24, 0xEE	; 238
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	fc 01       	movw	r30, r24
 41e:	10 82       	st	Z, r1

			// Free up the MOb
			CANCDMOB = 0;
 420:	8f ee       	ldi	r24, 0xEF	; 239
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	10 82       	st	Z, r1

			// Determine the MOb index
			uint8_t mob = (CANPAGE & 0xF0) >> 8;
 428:	8d ee       	ldi	r24, 0xED	; 237
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
 430:	1d 82       	std	Y+5, r1	; 0x05

			// Disable interrupts for this MOb
			if( mob < 8 )
 432:	8d 81       	ldd	r24, Y+5	; 0x05
 434:	88 30       	cpi	r24, 0x08	; 8
 436:	b0 f4       	brcc	.+44     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			{
				CANIE2 &= ~(1 << mob);
 438:	8e ed       	ldi	r24, 0xDE	; 222
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	2e ed       	ldi	r18, 0xDE	; 222
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	62 2f       	mov	r22, r18
 446:	2d 81       	ldd	r18, Y+5	; 0x05
 448:	42 2f       	mov	r20, r18
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	4a 95       	dec	r20
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	20 95       	com	r18
 45c:	26 23       	and	r18, r22
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
 462:	f1 c0       	rjmp	.+482    	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
			}
			else
			{
				CANIE1 &= ~(1 << (mob-8));
 464:	8f ed       	ldi	r24, 0xDF	; 223
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	2f ed       	ldi	r18, 0xDF	; 223
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	20 81       	ld	r18, Z
 470:	62 2f       	mov	r22, r18
 472:	2d 81       	ldd	r18, Y+5	; 0x05
 474:	22 2f       	mov	r18, r18
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	a9 01       	movw	r20, r18
 47a:	48 50       	subi	r20, 0x08	; 8
 47c:	51 09       	sbc	r21, r1
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	4a 95       	dec	r20
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 48c:	20 95       	com	r18
 48e:	26 23       	and	r18, r22
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
 494:	d8 c0       	rjmp	.+432    	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
			}
		}
		// Receive Interrupts
		else if ( CANSTMOB & (1 << RXOK) )
 496:	8e ee       	ldi	r24, 0xEE	; 238
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	80 81       	ld	r24, Z
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	80 72       	andi	r24, 0x20	; 32
 4a4:	99 27       	eor	r25, r25
 4a6:	89 2b       	or	r24, r25
 4a8:	09 f4       	brne	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4aa:	ba c0       	rjmp	.+372    	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
		{
			// Default to impossible ID
			uint16_t id = 0xFFFF;
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	9a 83       	std	Y+2, r25	; 0x02
 4b2:	89 83       	std	Y+1, r24	; 0x01

			// Load the message data into a free message buffer object
			if( CANCDMOB & (1 << IDE) )
 4b4:	8f ee       	ldi	r24, 0xEF	; 239
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	80 81       	ld	r24, Z
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	80 71       	andi	r24, 0x10	; 16
 4c2:	99 27       	eor	r25, r25
 4c4:	89 2b       	or	r24, r25
 4c6:	f1 f0       	breq	.+60     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
			{
				// Message type is CAN 2.0B
				id = (CANIDT4 >> 3) | ((CANIDT3 & 0x7F) << 5); 
 4c8:	80 ef       	ldi	r24, 0xF0	; 240
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	80 81       	ld	r24, Z
 4d0:	86 95       	lsr	r24
 4d2:	86 95       	lsr	r24
 4d4:	86 95       	lsr	r24
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 ef       	ldi	r24, 0xF1	; 241
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	fc 01       	movw	r30, r24
 4e0:	80 81       	ld	r24, Z
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	8f 77       	andi	r24, 0x7F	; 127
 4e8:	99 27       	eor	r25, r25
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	82 95       	swap	r24
 4f0:	92 95       	swap	r25
 4f2:	90 7f       	andi	r25, 0xF0	; 240
 4f4:	98 27       	eor	r25, r24
 4f6:	80 7f       	andi	r24, 0xF0	; 240
 4f8:	98 27       	eor	r25, r24
 4fa:	82 2b       	or	r24, r18
 4fc:	93 2b       	or	r25, r19
 4fe:	9a 83       	std	Y+2, r25	; 0x02
 500:	89 83       	std	Y+1, r24	; 0x01
 502:	19 c0       	rjmp	.+50     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
			}
			else
			{
				// Message type is CAN 2.0A
				id = (CANIDT2 >> 5) | (((uint16_t)CANIDT1 << 3));
 504:	82 ef       	ldi	r24, 0xF2	; 242
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	80 81       	ld	r24, Z
 50c:	82 95       	swap	r24
 50e:	86 95       	lsr	r24
 510:	87 70       	andi	r24, 0x07	; 7
 512:	28 2f       	mov	r18, r24
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	83 ef       	ldi	r24, 0xF3	; 243
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	80 81       	ld	r24, Z
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	82 2b       	or	r24, r18
 530:	93 2b       	or	r25, r19
 532:	9a 83       	std	Y+2, r25	; 0x02
 534:	89 83       	std	Y+1, r24	; 0x01
			}

			messageBuffer[bufIndex].id = id;
 536:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 53a:	48 2f       	mov	r20, r24
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	9c 01       	movw	r18, r24
 544:	37 70       	andi	r19, 0x07	; 7
 546:	6b e0       	ldi	r22, 0x0B	; 11
 548:	64 9f       	mul	r22, r20
 54a:	c0 01       	movw	r24, r0
 54c:	65 9f       	mul	r22, r21
 54e:	90 0d       	add	r25, r0
 550:	11 24       	eor	r1, r1
 552:	8d 5f       	subi	r24, 0xFD	; 253
 554:	9e 4f       	sbci	r25, 0xFE	; 254
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
 55a:	23 2f       	mov	r18, r19
 55c:	27 70       	andi	r18, 0x07	; 7
 55e:	fc 01       	movw	r30, r24
 560:	31 81       	ldd	r19, Z+1	; 0x01
 562:	38 7f       	andi	r19, 0xF8	; 248
 564:	23 2b       	or	r18, r19
 566:	fc 01       	movw	r30, r24
 568:	21 83       	std	Z+1, r18	; 0x01

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;
 56a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	8f ee       	ldi	r24, 0xEF	; 239
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	fc 01       	movw	r30, r24
 578:	80 81       	ld	r24, Z
 57a:	48 2f       	mov	r20, r24
 57c:	4f 70       	andi	r20, 0x0F	; 15
 57e:	5b e0       	ldi	r21, 0x0B	; 11
 580:	52 9f       	mul	r21, r18
 582:	c0 01       	movw	r24, r0
 584:	53 9f       	mul	r21, r19
 586:	90 0d       	add	r25, r0
 588:	11 24       	eor	r1, r1
 58a:	83 5f       	subi	r24, 0xF3	; 243
 58c:	9e 4f       	sbci	r25, 0xFE	; 254
 58e:	fc 01       	movw	r30, r24
 590:	40 83       	st	Z, r20

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 592:	1b 82       	std	Y+3, r1	; 0x03
 594:	1a c0       	rjmp	.+52     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
			{
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
 596:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 59a:	48 2f       	mov	r20, r24
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	2a ef       	ldi	r18, 0xFA	; 250
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	f9 01       	movw	r30, r18
 5aa:	60 81       	ld	r22, Z
 5ac:	7b e0       	ldi	r23, 0x0B	; 11
 5ae:	74 9f       	mul	r23, r20
 5b0:	90 01       	movw	r18, r0
 5b2:	75 9f       	mul	r23, r21
 5b4:	30 0d       	add	r19, r0
 5b6:	11 24       	eor	r1, r1
 5b8:	82 0f       	add	r24, r18
 5ba:	93 1f       	adc	r25, r19
 5bc:	8b 5f       	subi	r24, 0xFB	; 251
 5be:	9e 4f       	sbci	r25, 0xFE	; 254
 5c0:	fc 01       	movw	r30, r24
 5c2:	60 83       	st	Z, r22
			messageBuffer[bufIndex].id = id;

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	8b 83       	std	Y+3, r24	; 0x03
 5ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	4b e0       	ldi	r20, 0x0B	; 11
 5d4:	42 9f       	mul	r20, r18
 5d6:	c0 01       	movw	r24, r0
 5d8:	43 9f       	mul	r20, r19
 5da:	90 0d       	add	r25, r0
 5dc:	11 24       	eor	r1, r1
 5de:	83 5f       	subi	r24, 0xF3	; 243
 5e0:	9e 4f       	sbci	r25, 0xFE	; 254
 5e2:	fc 01       	movw	r30, r24
 5e4:	90 81       	ld	r25, Z
 5e6:	8b 81       	ldd	r24, Y+3	; 0x03
 5e8:	89 17       	cp	r24, r25
 5ea:	a8 f2       	brcs	.-86     	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
			}

			bufIndex = (bufIndex + 1) % MESSAGE_BUFFER_LENGTH;
 5ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	24 e1       	ldi	r18, 0x14	; 20
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	b9 01       	movw	r22, r18
 5fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <__divmodhi4>
 600:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufIndex>

			// Acknowledge the interrupt
			CANSTMOB = 0;
 604:	8e ee       	ldi	r24, 0xEE	; 238
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	fc 01       	movw	r30, r24
 60a:	10 82       	st	Z, r1

			CANCDMOB |= (2 << CONMOB0);
 60c:	8f ee       	ldi	r24, 0xEF	; 239
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	2f ee       	ldi	r18, 0xEF	; 239
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	f9 01       	movw	r30, r18
 616:	20 81       	ld	r18, Z
 618:	20 68       	ori	r18, 0x80	; 128
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
 61e:	13 c0       	rjmp	.+38     	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
			
		}
		else if ( CANGIT & ~(1 << CANIT) )
 620:	8a ed       	ldi	r24, 0xDA	; 218
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	fc 01       	movw	r30, r24
 626:	80 81       	ld	r24, Z
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	8f 77       	andi	r24, 0x7F	; 127
 62e:	89 2b       	or	r24, r25
 630:	51 f0       	breq	.+20     	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
		{
			// Preserve the last error received
			lastError = CANGIT;
 632:	8a ed       	ldi	r24, 0xDA	; 218
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	fc 01       	movw	r30, r24
 638:	80 81       	ld	r24, Z
 63a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lastError>

			// Clear the error
			CANGIT = 0;
 63e:	8a ed       	ldi	r24, 0xDA	; 218
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	fc 01       	movw	r30, r24
 644:	10 82       	st	Z, r1
	uint8_t canPage = CANPAGE;

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 646:	8c ee       	ldi	r24, 0xEC	; 236
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	fc 01       	movw	r30, r24
 64c:	80 81       	ld	r24, Z
 64e:	82 95       	swap	r24
 650:	8f 70       	andi	r24, 0x0F	; 15
 652:	8f 30       	cpi	r24, 0x0F	; 15
 654:	09 f0       	breq	.+2      	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
 656:	cc ce       	rjmp	.-616    	; 0x3f0 <__vector_18+0x3e>
			CANGIT = 0;
		}
	}

	// Restore CANPAGE register to where application code had it before interrupt
	CANPAGE = canPage;
 658:	8d ee       	ldi	r24, 0xED	; 237
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	2c 81       	ldd	r18, Y+4	; 0x04
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
 662:	00 00       	nop
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <main>:
#include "can.h"

#define CAN_ID_SNELHEIDSMETER 0x10

int main(void)
{
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	2f 97       	sbiw	r28, 0x0f	; 15
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	f8 94       	cli
 6a4:	de bf       	out	0x3e, r29	; 62
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	cd bf       	out	0x3d, r28	; 61
	sei();
 6aa:	78 94       	sei
	initCAN();
 6ac:	0e 94 5e 00 	call	0xbc	; 0xbc <initCAN>
	
	uint8_t result1 = 0;
 6b0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t result2 = 0;
 6b2:	1a 82       	std	Y+2, r1	; 0x02
	
	bool foundMessage = false;
 6b4:	1b 82       	std	Y+3, r1	; 0x03
	bool foundId = false;
 6b6:	1c 82       	std	Y+4, r1	; 0x04
	
	CANMessage bericht;
	result1 = listenForMessage(CAN_ID_SNELHEIDSMETER, 8); // 0-geen MOB's available. 1- wel available
 6b8:	68 e0       	ldi	r22, 0x08	; 8
 6ba:	80 e1       	ldi	r24, 0x10	; 16
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 cb 00 	call	0x196	; 0x196 <listenForMessage>
 6c2:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		result2 = getMessage(&bericht); // 1-bericht gevuld. 0-niet gevuld
 6c4:	ce 01       	movw	r24, r28
 6c6:	05 96       	adiw	r24, 0x05	; 5
 6c8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <getMessage>
 6cc:	8a 83       	std	Y+2, r24	; 0x02
		if(result2)
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	88 23       	and	r24, r24
 6d2:	c1 f3       	breq	.-16     	; 0x6c4 <main+0x2e>
		{
			foundMessage = true;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	8b 83       	std	Y+3, r24	; 0x03
			if(bericht.id == CAN_ID_SNELHEIDSMETER)
 6d8:	8d 81       	ldd	r24, Y+5	; 0x05
 6da:	2e 81       	ldd	r18, Y+6	; 0x06
 6dc:	92 2f       	mov	r25, r18
 6de:	97 70       	andi	r25, 0x07	; 7
 6e0:	40 97       	sbiw	r24, 0x10	; 16
 6e2:	81 f7       	brne	.-32     	; 0x6c4 <main+0x2e>
			{
				foundId = true;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	8c 83       	std	Y+4, r24	; 0x04
			}
		}
	}
 6e8:	ed cf       	rjmp	.-38     	; 0x6c4 <main+0x2e>

000006ea <__divmodhi4>:
 6ea:	97 fb       	bst	r25, 7
 6ec:	07 2e       	mov	r0, r23
 6ee:	16 f4       	brtc	.+4      	; 0x6f4 <__divmodhi4+0xa>
 6f0:	00 94       	com	r0
 6f2:	07 d0       	rcall	.+14     	; 0x702 <__divmodhi4_neg1>
 6f4:	77 fd       	sbrc	r23, 7
 6f6:	09 d0       	rcall	.+18     	; 0x70a <__divmodhi4_neg2>
 6f8:	0e 94 89 03 	call	0x712	; 0x712 <__udivmodhi4>
 6fc:	07 fc       	sbrc	r0, 7
 6fe:	05 d0       	rcall	.+10     	; 0x70a <__divmodhi4_neg2>
 700:	3e f4       	brtc	.+14     	; 0x710 <__divmodhi4_exit>

00000702 <__divmodhi4_neg1>:
 702:	90 95       	com	r25
 704:	81 95       	neg	r24
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	08 95       	ret

0000070a <__divmodhi4_neg2>:
 70a:	70 95       	com	r23
 70c:	61 95       	neg	r22
 70e:	7f 4f       	sbci	r23, 0xFF	; 255

00000710 <__divmodhi4_exit>:
 710:	08 95       	ret

00000712 <__udivmodhi4>:
 712:	aa 1b       	sub	r26, r26
 714:	bb 1b       	sub	r27, r27
 716:	51 e1       	ldi	r21, 0x11	; 17
 718:	07 c0       	rjmp	.+14     	; 0x728 <__udivmodhi4_ep>

0000071a <__udivmodhi4_loop>:
 71a:	aa 1f       	adc	r26, r26
 71c:	bb 1f       	adc	r27, r27
 71e:	a6 17       	cp	r26, r22
 720:	b7 07       	cpc	r27, r23
 722:	10 f0       	brcs	.+4      	; 0x728 <__udivmodhi4_ep>
 724:	a6 1b       	sub	r26, r22
 726:	b7 0b       	sbc	r27, r23

00000728 <__udivmodhi4_ep>:
 728:	88 1f       	adc	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	5a 95       	dec	r21
 72e:	a9 f7       	brne	.-22     	; 0x71a <__udivmodhi4_loop>
 730:	80 95       	com	r24
 732:	90 95       	com	r25
 734:	bc 01       	movw	r22, r24
 736:	cd 01       	movw	r24, r26
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
