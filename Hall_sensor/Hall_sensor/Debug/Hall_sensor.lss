
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000716  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000078a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000007f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e98  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0e  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  00002316  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000374  00000000  00000000  00002f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000032f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 98 00 	call	0x130	; 0x130 <main>
  b4:	0c 94 89 03 	jmp	0x712	; 0x712 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
		
	}
}

void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	4b 01       	movw	r8, r22
  d2:	5c 01       	movw	r10, r24
  d4:	ea 01       	movw	r28, r20
	int val1 = (int)value; // pak getal voor de komma
  d6:	0e 94 29 02 	call	0x452	; 0x452 <__fixsfsi>
  da:	6b 01       	movw	r12, r22
  dc:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100); // pak kommagetal en doe keer 100
  de:	07 2e       	mov	r0, r23
  e0:	00 0c       	add	r0, r0
  e2:	88 0b       	sbc	r24, r24
  e4:	99 0b       	sbc	r25, r25
  e6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__floatsisf>
  ea:	9b 01       	movw	r18, r22
  ec:	ac 01       	movw	r20, r24
  ee:	c5 01       	movw	r24, r10
  f0:	b4 01       	movw	r22, r8
  f2:	0e 94 4a 01 	call	0x294	; 0x294 <__subsf3>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	48 ec       	ldi	r20, 0xC8	; 200
  fc:	52 e4       	ldi	r21, 0x42	; 66
  fe:	0e 94 ed 02 	call	0x5da	; 0x5da <__mulsf3>
 102:	0e 94 29 02 	call	0x452	; 0x452 <__fixsfsi>
 106:	b6 2e       	mov	r11, r22
	eeprom_write_byte((uint8_t*)address, val1);
 108:	6c 2d       	mov	r22, r12
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 110:	6b 2d       	mov	r22, r11
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <eeprom_write_byte>
	
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	af 90       	pop	r10
 12a:	9f 90       	pop	r9
 12c:	8f 90       	pop	r8
 12e:	08 95       	ret

00000130 <main>:
// if(!(~PINC & (1 << PC0))) hiermee kijk je of pin hoog is

void writeFloatToEEPROM(float value, int address);

int main(void)
{	
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <main+0x6>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	init_millis(12000000UL);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	7b e1       	ldi	r23, 0x1B	; 27
 13e:	87 eb       	ldi	r24, 0xB7	; 183
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 21 01 	call	0x242	; 0x242 <init_millis>
	sei();  // Enable interrupts
 146:	78 94       	sei
	
	// initialiseer in- en outputs
	DDRF = 0xFF;	//output led
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		// input hall sensor
 14c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 14e:	18 b8       	out	0x08, r1	; 8
	PORTF = 0;
 150:	11 ba       	out	0x11, r1	; 17
	
	int addressHall = 0;
	float omtrek_wiel = 1.35;
	volatile int rpmaantal = 0;
 152:	1a 82       	std	Y+2, r1	; 0x02
 154:	19 82       	std	Y+1, r1	; 0x01
	int vorigeStatusHall = 0;
	int huidigeStatusHall = 0;
	unsigned long timer = 0; // hierin wordt de huidige tijd gestopt in miliseconden
 156:	81 2c       	mov	r8, r1
 158:	91 2c       	mov	r9, r1
 15a:	54 01       	movw	r10, r8
	PORTF = 0;
	
	int addressHall = 0;
	float omtrek_wiel = 1.35;
	volatile int rpmaantal = 0;
	int vorigeStatusHall = 0;
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
	DDRF = 0xFF;	//output led
	DDRC = 0;		// input hall sensor
	PORTC = 0;
	PORTF = 0;
	
	int addressHall = 0;
 160:	e1 2c       	mov	r14, r1
 162:	f1 2c       	mov	r15, r1
 164:	01 c0       	rjmp	.+2      	; 0x168 <main+0x38>
 166:	98 01       	movw	r18, r16
	unsigned long timer = 0; // hierin wordt de huidige tijd gestopt in miliseconden
		
	while(1)
	{
		
		huidigeStatusHall = !(~PINC & (1 << PC0));
 168:	86 b1       	in	r24, 0x06	; 6
 16a:	01 e0       	ldi	r16, 0x01	; 1
 16c:	98 2f       	mov	r25, r24
 16e:	91 70       	andi	r25, 0x01	; 1
 170:	80 ff       	sbrs	r24, 0
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	10 e0       	ldi	r17, 0x00	; 0
		if(huidigeStatusHall) {
 176:	99 23       	and	r25, r25
 178:	59 f0       	breq	.+22     	; 0x190 <main+0x60>
			if(vorigeStatusHall == 0)
 17a:	23 2b       	or	r18, r19
 17c:	41 f4       	brne	.+16     	; 0x18e <main+0x5e>
			{
				PORTF = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	81 bb       	out	0x11, r24	; 17
				rpmaantal += 1;
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	9a 81       	ldd	r25, Y+2	; 0x02
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	9a 83       	std	Y+2, r25	; 0x02
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	01 c0       	rjmp	.+2      	; 0x190 <main+0x60>
				vorigeStatusHall = 1;
			} else {
				PORTF = 0;
 18e:	11 ba       	out	0x11, r1	; 17
			}
		}
		vorigeStatusHall = huidigeStatusHall;
		
		if(millis() - timer >= 418) // 418 komt overeen met 5 seconden in werkelijkheid
 190:	0e 94 3a 01 	call	0x274	; 0x274 <millis>
 194:	dc 01       	movw	r26, r24
 196:	cb 01       	movw	r24, r22
 198:	88 19       	sub	r24, r8
 19a:	99 09       	sbc	r25, r9
 19c:	aa 09       	sbc	r26, r10
 19e:	bb 09       	sbc	r27, r11
 1a0:	82 3a       	cpi	r24, 0xA2	; 162
 1a2:	91 40       	sbci	r25, 0x01	; 1
 1a4:	a1 05       	cpc	r26, r1
 1a6:	b1 05       	cpc	r27, r1
 1a8:	f0 f2       	brcs	.-68     	; 0x166 <main+0x36>
		{			
			float snelheidms = (float) (omtrek_wiel * rpmaantal) / 5;
 1aa:	69 81       	ldd	r22, Y+1	; 0x01
 1ac:	7a 81       	ldd	r23, Y+2	; 0x02
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__floatsisf>
 1ba:	2d ec       	ldi	r18, 0xCD	; 205
 1bc:	3c ec       	ldi	r19, 0xCC	; 204
 1be:	4c ea       	ldi	r20, 0xAC	; 172
 1c0:	5f e3       	ldi	r21, 0x3F	; 63
 1c2:	0e 94 ed 02 	call	0x5da	; 0x5da <__mulsf3>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	40 ea       	ldi	r20, 0xA0	; 160
 1cc:	50 e4       	ldi	r21, 0x40	; 64
 1ce:	0e 94 b7 01 	call	0x36e	; 0x36e <__divsf3>
			float snelheidkmh = snelheidms * 3.6;
 1d2:	26 e6       	ldi	r18, 0x66	; 102
 1d4:	36 e6       	ldi	r19, 0x66	; 102
 1d6:	46 e6       	ldi	r20, 0x66	; 102
 1d8:	50 e4       	ldi	r21, 0x40	; 64
 1da:	0e 94 ed 02 	call	0x5da	; 0x5da <__mulsf3>
			writeFloatToEEPROM(snelheidkmh, addressHall);
 1de:	a7 01       	movw	r20, r14
 1e0:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			
			addressHall += 2;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	e8 0e       	add	r14, r24
 1e8:	f1 1c       	adc	r15, r1
			rpmaantal = 0; // reset rpm
 1ea:	1a 82       	std	Y+2, r1	; 0x02
 1ec:	19 82       	std	Y+1, r1	; 0x01
			timer = millis(); // reset timer
 1ee:	0e 94 3a 01 	call	0x274	; 0x274 <millis>
 1f2:	4b 01       	movw	r8, r22
 1f4:	5c 01       	movw	r10, r24
 1f6:	b7 cf       	rjmp	.-146    	; 0x166 <main+0x36>

000001f8 <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
  timer1_millis++;
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 212:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 216:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	a1 1d       	adc	r26, r1
 21e:	b1 1d       	adc	r27, r1
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 224:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 228:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 22c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 242:	20 e4       	ldi	r18, 0x40	; 64
 244:	3f e1       	ldi	r19, 0x1F	; 31
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	8a 60       	ori	r24, 0x0A	; 10
 256:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 258:	bb 27       	eor	r27, r27
 25a:	a5 2f       	mov	r26, r21
 25c:	94 2f       	mov	r25, r20
 25e:	83 2f       	mov	r24, r19
 260:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 264:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 268:	ef e6       	ldi	r30, 0x6F	; 111
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	80 83       	st	Z, r24
 272:	08 95       	ret

00000274 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 274:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	09 c0       	rjmp	.+18     	; 0x28c <millis+0x18>
    millis_return = timer1_millis;
 27a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 286:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	21 11       	cpse	r18, r1
 28e:	f5 cf       	rjmp	.-22     	; 0x27a <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 290:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 292:	08 95       	ret

00000294 <__subsf3>:
 294:	50 58       	subi	r21, 0x80	; 128

00000296 <__addsf3>:
 296:	bb 27       	eor	r27, r27
 298:	aa 27       	eor	r26, r26
 29a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__addsf3x>
 29e:	0c 94 b3 02 	jmp	0x566	; 0x566 <__fp_round>
 2a2:	0e 94 a5 02 	call	0x54a	; 0x54a <__fp_pscA>
 2a6:	38 f0       	brcs	.+14     	; 0x2b6 <__addsf3+0x20>
 2a8:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_pscB>
 2ac:	20 f0       	brcs	.+8      	; 0x2b6 <__addsf3+0x20>
 2ae:	39 f4       	brne	.+14     	; 0x2be <__addsf3+0x28>
 2b0:	9f 3f       	cpi	r25, 0xFF	; 255
 2b2:	19 f4       	brne	.+6      	; 0x2ba <__addsf3+0x24>
 2b4:	26 f4       	brtc	.+8      	; 0x2be <__addsf3+0x28>
 2b6:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_nan>
 2ba:	0e f4       	brtc	.+2      	; 0x2be <__addsf3+0x28>
 2bc:	e0 95       	com	r30
 2be:	e7 fb       	bst	r30, 7
 2c0:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_inf>

000002c4 <__addsf3x>:
 2c4:	e9 2f       	mov	r30, r25
 2c6:	0e 94 c4 02 	call	0x588	; 0x588 <__fp_split3>
 2ca:	58 f3       	brcs	.-42     	; 0x2a2 <__addsf3+0xc>
 2cc:	ba 17       	cp	r27, r26
 2ce:	62 07       	cpc	r22, r18
 2d0:	73 07       	cpc	r23, r19
 2d2:	84 07       	cpc	r24, r20
 2d4:	95 07       	cpc	r25, r21
 2d6:	20 f0       	brcs	.+8      	; 0x2e0 <__addsf3x+0x1c>
 2d8:	79 f4       	brne	.+30     	; 0x2f8 <__addsf3x+0x34>
 2da:	a6 f5       	brtc	.+104    	; 0x344 <__addsf3x+0x80>
 2dc:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_zero>
 2e0:	0e f4       	brtc	.+2      	; 0x2e4 <__addsf3x+0x20>
 2e2:	e0 95       	com	r30
 2e4:	0b 2e       	mov	r0, r27
 2e6:	ba 2f       	mov	r27, r26
 2e8:	a0 2d       	mov	r26, r0
 2ea:	0b 01       	movw	r0, r22
 2ec:	b9 01       	movw	r22, r18
 2ee:	90 01       	movw	r18, r0
 2f0:	0c 01       	movw	r0, r24
 2f2:	ca 01       	movw	r24, r20
 2f4:	a0 01       	movw	r20, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	ff 27       	eor	r31, r31
 2fa:	59 1b       	sub	r21, r25
 2fc:	99 f0       	breq	.+38     	; 0x324 <__addsf3x+0x60>
 2fe:	59 3f       	cpi	r21, 0xF9	; 249
 300:	50 f4       	brcc	.+20     	; 0x316 <__addsf3x+0x52>
 302:	50 3e       	cpi	r21, 0xE0	; 224
 304:	68 f1       	brcs	.+90     	; 0x360 <__addsf3x+0x9c>
 306:	1a 16       	cp	r1, r26
 308:	f0 40       	sbci	r31, 0x00	; 0
 30a:	a2 2f       	mov	r26, r18
 30c:	23 2f       	mov	r18, r19
 30e:	34 2f       	mov	r19, r20
 310:	44 27       	eor	r20, r20
 312:	58 5f       	subi	r21, 0xF8	; 248
 314:	f3 cf       	rjmp	.-26     	; 0x2fc <__addsf3x+0x38>
 316:	46 95       	lsr	r20
 318:	37 95       	ror	r19
 31a:	27 95       	ror	r18
 31c:	a7 95       	ror	r26
 31e:	f0 40       	sbci	r31, 0x00	; 0
 320:	53 95       	inc	r21
 322:	c9 f7       	brne	.-14     	; 0x316 <__addsf3x+0x52>
 324:	7e f4       	brtc	.+30     	; 0x344 <__addsf3x+0x80>
 326:	1f 16       	cp	r1, r31
 328:	ba 0b       	sbc	r27, r26
 32a:	62 0b       	sbc	r22, r18
 32c:	73 0b       	sbc	r23, r19
 32e:	84 0b       	sbc	r24, r20
 330:	ba f0       	brmi	.+46     	; 0x360 <__addsf3x+0x9c>
 332:	91 50       	subi	r25, 0x01	; 1
 334:	a1 f0       	breq	.+40     	; 0x35e <__addsf3x+0x9a>
 336:	ff 0f       	add	r31, r31
 338:	bb 1f       	adc	r27, r27
 33a:	66 1f       	adc	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	c2 f7       	brpl	.-16     	; 0x332 <__addsf3x+0x6e>
 342:	0e c0       	rjmp	.+28     	; 0x360 <__addsf3x+0x9c>
 344:	ba 0f       	add	r27, r26
 346:	62 1f       	adc	r22, r18
 348:	73 1f       	adc	r23, r19
 34a:	84 1f       	adc	r24, r20
 34c:	48 f4       	brcc	.+18     	; 0x360 <__addsf3x+0x9c>
 34e:	87 95       	ror	r24
 350:	77 95       	ror	r23
 352:	67 95       	ror	r22
 354:	b7 95       	ror	r27
 356:	f7 95       	ror	r31
 358:	9e 3f       	cpi	r25, 0xFE	; 254
 35a:	08 f0       	brcs	.+2      	; 0x35e <__addsf3x+0x9a>
 35c:	b0 cf       	rjmp	.-160    	; 0x2be <__addsf3+0x28>
 35e:	93 95       	inc	r25
 360:	88 0f       	add	r24, r24
 362:	08 f0       	brcs	.+2      	; 0x366 <__addsf3x+0xa2>
 364:	99 27       	eor	r25, r25
 366:	ee 0f       	add	r30, r30
 368:	97 95       	ror	r25
 36a:	87 95       	ror	r24
 36c:	08 95       	ret

0000036e <__divsf3>:
 36e:	0e 94 cb 01 	call	0x396	; 0x396 <__divsf3x>
 372:	0c 94 b3 02 	jmp	0x566	; 0x566 <__fp_round>
 376:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_pscB>
 37a:	58 f0       	brcs	.+22     	; 0x392 <__divsf3+0x24>
 37c:	0e 94 a5 02 	call	0x54a	; 0x54a <__fp_pscA>
 380:	40 f0       	brcs	.+16     	; 0x392 <__divsf3+0x24>
 382:	29 f4       	brne	.+10     	; 0x38e <__divsf3+0x20>
 384:	5f 3f       	cpi	r21, 0xFF	; 255
 386:	29 f0       	breq	.+10     	; 0x392 <__divsf3+0x24>
 388:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_inf>
 38c:	51 11       	cpse	r21, r1
 38e:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_szero>
 392:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_nan>

00000396 <__divsf3x>:
 396:	0e 94 c4 02 	call	0x588	; 0x588 <__fp_split3>
 39a:	68 f3       	brcs	.-38     	; 0x376 <__divsf3+0x8>

0000039c <__divsf3_pse>:
 39c:	99 23       	and	r25, r25
 39e:	b1 f3       	breq	.-20     	; 0x38c <__divsf3+0x1e>
 3a0:	55 23       	and	r21, r21
 3a2:	91 f3       	breq	.-28     	; 0x388 <__divsf3+0x1a>
 3a4:	95 1b       	sub	r25, r21
 3a6:	55 0b       	sbc	r21, r21
 3a8:	bb 27       	eor	r27, r27
 3aa:	aa 27       	eor	r26, r26
 3ac:	62 17       	cp	r22, r18
 3ae:	73 07       	cpc	r23, r19
 3b0:	84 07       	cpc	r24, r20
 3b2:	38 f0       	brcs	.+14     	; 0x3c2 <__divsf3_pse+0x26>
 3b4:	9f 5f       	subi	r25, 0xFF	; 255
 3b6:	5f 4f       	sbci	r21, 0xFF	; 255
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	44 1f       	adc	r20, r20
 3be:	aa 1f       	adc	r26, r26
 3c0:	a9 f3       	breq	.-22     	; 0x3ac <__divsf3_pse+0x10>
 3c2:	35 d0       	rcall	.+106    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3c4:	0e 2e       	mov	r0, r30
 3c6:	3a f0       	brmi	.+14     	; 0x3d6 <__divsf3_pse+0x3a>
 3c8:	e0 e8       	ldi	r30, 0x80	; 128
 3ca:	32 d0       	rcall	.+100    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3cc:	91 50       	subi	r25, 0x01	; 1
 3ce:	50 40       	sbci	r21, 0x00	; 0
 3d0:	e6 95       	lsr	r30
 3d2:	00 1c       	adc	r0, r0
 3d4:	ca f7       	brpl	.-14     	; 0x3c8 <__divsf3_pse+0x2c>
 3d6:	2b d0       	rcall	.+86     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3d8:	fe 2f       	mov	r31, r30
 3da:	29 d0       	rcall	.+82     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	bb 1f       	adc	r27, r27
 3e4:	26 17       	cp	r18, r22
 3e6:	37 07       	cpc	r19, r23
 3e8:	48 07       	cpc	r20, r24
 3ea:	ab 07       	cpc	r26, r27
 3ec:	b0 e8       	ldi	r27, 0x80	; 128
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <__divsf3_pse+0x56>
 3f0:	bb 0b       	sbc	r27, r27
 3f2:	80 2d       	mov	r24, r0
 3f4:	bf 01       	movw	r22, r30
 3f6:	ff 27       	eor	r31, r31
 3f8:	93 58       	subi	r25, 0x83	; 131
 3fa:	5f 4f       	sbci	r21, 0xFF	; 255
 3fc:	3a f0       	brmi	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	9e 3f       	cpi	r25, 0xFE	; 254
 400:	51 05       	cpc	r21, r1
 402:	78 f0       	brcs	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 404:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_inf>
 408:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_szero>
 40c:	5f 3f       	cpi	r21, 0xFF	; 255
 40e:	e4 f3       	brlt	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	98 3e       	cpi	r25, 0xE8	; 232
 412:	d4 f3       	brlt	.-12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 414:	86 95       	lsr	r24
 416:	77 95       	ror	r23
 418:	67 95       	ror	r22
 41a:	b7 95       	ror	r27
 41c:	f7 95       	ror	r31
 41e:	9f 5f       	subi	r25, 0xFF	; 255
 420:	c9 f7       	brne	.-14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 422:	88 0f       	add	r24, r24
 424:	91 1d       	adc	r25, r1
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	97 f9       	bld	r25, 7
 42c:	08 95       	ret
 42e:	e1 e0       	ldi	r30, 0x01	; 1
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	bb 1f       	adc	r27, r27
 438:	62 17       	cp	r22, r18
 43a:	73 07       	cpc	r23, r19
 43c:	84 07       	cpc	r24, r20
 43e:	ba 07       	cpc	r27, r26
 440:	20 f0       	brcs	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 442:	62 1b       	sub	r22, r18
 444:	73 0b       	sbc	r23, r19
 446:	84 0b       	sbc	r24, r20
 448:	ba 0b       	sbc	r27, r26
 44a:	ee 1f       	adc	r30, r30
 44c:	88 f7       	brcc	.-30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 44e:	e0 95       	com	r30
 450:	08 95       	ret

00000452 <__fixsfsi>:
 452:	0e 94 30 02 	call	0x460	; 0x460 <__fixunssfsi>
 456:	68 94       	set
 458:	b1 11       	cpse	r27, r1
 45a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_szero>
 45e:	08 95       	ret

00000460 <__fixunssfsi>:
 460:	0e 94 cc 02 	call	0x598	; 0x598 <__fp_splitA>
 464:	88 f0       	brcs	.+34     	; 0x488 <__fixunssfsi+0x28>
 466:	9f 57       	subi	r25, 0x7F	; 127
 468:	98 f0       	brcs	.+38     	; 0x490 <__fixunssfsi+0x30>
 46a:	b9 2f       	mov	r27, r25
 46c:	99 27       	eor	r25, r25
 46e:	b7 51       	subi	r27, 0x17	; 23
 470:	b0 f0       	brcs	.+44     	; 0x49e <__fixunssfsi+0x3e>
 472:	e1 f0       	breq	.+56     	; 0x4ac <__fixunssfsi+0x4c>
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	1a f0       	brmi	.+6      	; 0x484 <__fixunssfsi+0x24>
 47e:	ba 95       	dec	r27
 480:	c9 f7       	brne	.-14     	; 0x474 <__fixunssfsi+0x14>
 482:	14 c0       	rjmp	.+40     	; 0x4ac <__fixunssfsi+0x4c>
 484:	b1 30       	cpi	r27, 0x01	; 1
 486:	91 f0       	breq	.+36     	; 0x4ac <__fixunssfsi+0x4c>
 488:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_zero>
 48c:	b1 e0       	ldi	r27, 0x01	; 1
 48e:	08 95       	ret
 490:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_zero>
 494:	67 2f       	mov	r22, r23
 496:	78 2f       	mov	r23, r24
 498:	88 27       	eor	r24, r24
 49a:	b8 5f       	subi	r27, 0xF8	; 248
 49c:	39 f0       	breq	.+14     	; 0x4ac <__fixunssfsi+0x4c>
 49e:	b9 3f       	cpi	r27, 0xF9	; 249
 4a0:	cc f3       	brlt	.-14     	; 0x494 <__fixunssfsi+0x34>
 4a2:	86 95       	lsr	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b3 95       	inc	r27
 4aa:	d9 f7       	brne	.-10     	; 0x4a2 <__fixunssfsi+0x42>
 4ac:	3e f4       	brtc	.+14     	; 0x4bc <__fixunssfsi+0x5c>
 4ae:	90 95       	com	r25
 4b0:	80 95       	com	r24
 4b2:	70 95       	com	r23
 4b4:	61 95       	neg	r22
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ba:	9f 4f       	sbci	r25, 0xFF	; 255
 4bc:	08 95       	ret

000004be <__floatunsisf>:
 4be:	e8 94       	clt
 4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <__floatsisf+0x12>

000004c2 <__floatsisf>:
 4c2:	97 fb       	bst	r25, 7
 4c4:	3e f4       	brtc	.+14     	; 0x4d4 <__floatsisf+0x12>
 4c6:	90 95       	com	r25
 4c8:	80 95       	com	r24
 4ca:	70 95       	com	r23
 4cc:	61 95       	neg	r22
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	99 23       	and	r25, r25
 4d6:	a9 f0       	breq	.+42     	; 0x502 <__floatsisf+0x40>
 4d8:	f9 2f       	mov	r31, r25
 4da:	96 e9       	ldi	r25, 0x96	; 150
 4dc:	bb 27       	eor	r27, r27
 4de:	93 95       	inc	r25
 4e0:	f6 95       	lsr	r31
 4e2:	87 95       	ror	r24
 4e4:	77 95       	ror	r23
 4e6:	67 95       	ror	r22
 4e8:	b7 95       	ror	r27
 4ea:	f1 11       	cpse	r31, r1
 4ec:	f8 cf       	rjmp	.-16     	; 0x4de <__floatsisf+0x1c>
 4ee:	fa f4       	brpl	.+62     	; 0x52e <__floatsisf+0x6c>
 4f0:	bb 0f       	add	r27, r27
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__floatsisf+0x36>
 4f4:	60 ff       	sbrs	r22, 0
 4f6:	1b c0       	rjmp	.+54     	; 0x52e <__floatsisf+0x6c>
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	16 c0       	rjmp	.+44     	; 0x52e <__floatsisf+0x6c>
 502:	88 23       	and	r24, r24
 504:	11 f0       	breq	.+4      	; 0x50a <__floatsisf+0x48>
 506:	96 e9       	ldi	r25, 0x96	; 150
 508:	11 c0       	rjmp	.+34     	; 0x52c <__floatsisf+0x6a>
 50a:	77 23       	and	r23, r23
 50c:	21 f0       	breq	.+8      	; 0x516 <__floatsisf+0x54>
 50e:	9e e8       	ldi	r25, 0x8E	; 142
 510:	87 2f       	mov	r24, r23
 512:	76 2f       	mov	r23, r22
 514:	05 c0       	rjmp	.+10     	; 0x520 <__floatsisf+0x5e>
 516:	66 23       	and	r22, r22
 518:	71 f0       	breq	.+28     	; 0x536 <__floatsisf+0x74>
 51a:	96 e8       	ldi	r25, 0x86	; 134
 51c:	86 2f       	mov	r24, r22
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	2a f0       	brmi	.+10     	; 0x52e <__floatsisf+0x6c>
 524:	9a 95       	dec	r25
 526:	66 0f       	add	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	88 1f       	adc	r24, r24
 52c:	da f7       	brpl	.-10     	; 0x524 <__floatsisf+0x62>
 52e:	88 0f       	add	r24, r24
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	97 f9       	bld	r25, 7
 536:	08 95       	ret

00000538 <__fp_inf>:
 538:	97 f9       	bld	r25, 7
 53a:	9f 67       	ori	r25, 0x7F	; 127
 53c:	80 e8       	ldi	r24, 0x80	; 128
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	08 95       	ret

00000544 <__fp_nan>:
 544:	9f ef       	ldi	r25, 0xFF	; 255
 546:	80 ec       	ldi	r24, 0xC0	; 192
 548:	08 95       	ret

0000054a <__fp_pscA>:
 54a:	00 24       	eor	r0, r0
 54c:	0a 94       	dec	r0
 54e:	16 16       	cp	r1, r22
 550:	17 06       	cpc	r1, r23
 552:	18 06       	cpc	r1, r24
 554:	09 06       	cpc	r0, r25
 556:	08 95       	ret

00000558 <__fp_pscB>:
 558:	00 24       	eor	r0, r0
 55a:	0a 94       	dec	r0
 55c:	12 16       	cp	r1, r18
 55e:	13 06       	cpc	r1, r19
 560:	14 06       	cpc	r1, r20
 562:	05 06       	cpc	r0, r21
 564:	08 95       	ret

00000566 <__fp_round>:
 566:	09 2e       	mov	r0, r25
 568:	03 94       	inc	r0
 56a:	00 0c       	add	r0, r0
 56c:	11 f4       	brne	.+4      	; 0x572 <__fp_round+0xc>
 56e:	88 23       	and	r24, r24
 570:	52 f0       	brmi	.+20     	; 0x586 <__fp_round+0x20>
 572:	bb 0f       	add	r27, r27
 574:	40 f4       	brcc	.+16     	; 0x586 <__fp_round+0x20>
 576:	bf 2b       	or	r27, r31
 578:	11 f4       	brne	.+4      	; 0x57e <__fp_round+0x18>
 57a:	60 ff       	sbrs	r22, 0
 57c:	04 c0       	rjmp	.+8      	; 0x586 <__fp_round+0x20>
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	08 95       	ret

00000588 <__fp_split3>:
 588:	57 fd       	sbrc	r21, 7
 58a:	90 58       	subi	r25, 0x80	; 128
 58c:	44 0f       	add	r20, r20
 58e:	55 1f       	adc	r21, r21
 590:	59 f0       	breq	.+22     	; 0x5a8 <__fp_splitA+0x10>
 592:	5f 3f       	cpi	r21, 0xFF	; 255
 594:	71 f0       	breq	.+28     	; 0x5b2 <__fp_splitA+0x1a>
 596:	47 95       	ror	r20

00000598 <__fp_splitA>:
 598:	88 0f       	add	r24, r24
 59a:	97 fb       	bst	r25, 7
 59c:	99 1f       	adc	r25, r25
 59e:	61 f0       	breq	.+24     	; 0x5b8 <__fp_splitA+0x20>
 5a0:	9f 3f       	cpi	r25, 0xFF	; 255
 5a2:	79 f0       	breq	.+30     	; 0x5c2 <__fp_splitA+0x2a>
 5a4:	87 95       	ror	r24
 5a6:	08 95       	ret
 5a8:	12 16       	cp	r1, r18
 5aa:	13 06       	cpc	r1, r19
 5ac:	14 06       	cpc	r1, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	f2 cf       	rjmp	.-28     	; 0x596 <__fp_split3+0xe>
 5b2:	46 95       	lsr	r20
 5b4:	f1 df       	rcall	.-30     	; 0x598 <__fp_splitA>
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <__fp_splitA+0x30>
 5b8:	16 16       	cp	r1, r22
 5ba:	17 06       	cpc	r1, r23
 5bc:	18 06       	cpc	r1, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	f1 cf       	rjmp	.-30     	; 0x5a4 <__fp_splitA+0xc>
 5c2:	86 95       	lsr	r24
 5c4:	71 05       	cpc	r23, r1
 5c6:	61 05       	cpc	r22, r1
 5c8:	08 94       	sec
 5ca:	08 95       	ret

000005cc <__fp_zero>:
 5cc:	e8 94       	clt

000005ce <__fp_szero>:
 5ce:	bb 27       	eor	r27, r27
 5d0:	66 27       	eor	r22, r22
 5d2:	77 27       	eor	r23, r23
 5d4:	cb 01       	movw	r24, r22
 5d6:	97 f9       	bld	r25, 7
 5d8:	08 95       	ret

000005da <__mulsf3>:
 5da:	0e 94 00 03 	call	0x600	; 0x600 <__mulsf3x>
 5de:	0c 94 b3 02 	jmp	0x566	; 0x566 <__fp_round>
 5e2:	0e 94 a5 02 	call	0x54a	; 0x54a <__fp_pscA>
 5e6:	38 f0       	brcs	.+14     	; 0x5f6 <__mulsf3+0x1c>
 5e8:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_pscB>
 5ec:	20 f0       	brcs	.+8      	; 0x5f6 <__mulsf3+0x1c>
 5ee:	95 23       	and	r25, r21
 5f0:	11 f0       	breq	.+4      	; 0x5f6 <__mulsf3+0x1c>
 5f2:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_inf>
 5f6:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_nan>
 5fa:	11 24       	eor	r1, r1
 5fc:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_szero>

00000600 <__mulsf3x>:
 600:	0e 94 c4 02 	call	0x588	; 0x588 <__fp_split3>
 604:	70 f3       	brcs	.-36     	; 0x5e2 <__mulsf3+0x8>

00000606 <__mulsf3_pse>:
 606:	95 9f       	mul	r25, r21
 608:	c1 f3       	breq	.-16     	; 0x5fa <__mulsf3+0x20>
 60a:	95 0f       	add	r25, r21
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	55 1f       	adc	r21, r21
 610:	62 9f       	mul	r22, r18
 612:	f0 01       	movw	r30, r0
 614:	72 9f       	mul	r23, r18
 616:	bb 27       	eor	r27, r27
 618:	f0 0d       	add	r31, r0
 61a:	b1 1d       	adc	r27, r1
 61c:	63 9f       	mul	r22, r19
 61e:	aa 27       	eor	r26, r26
 620:	f0 0d       	add	r31, r0
 622:	b1 1d       	adc	r27, r1
 624:	aa 1f       	adc	r26, r26
 626:	64 9f       	mul	r22, r20
 628:	66 27       	eor	r22, r22
 62a:	b0 0d       	add	r27, r0
 62c:	a1 1d       	adc	r26, r1
 62e:	66 1f       	adc	r22, r22
 630:	82 9f       	mul	r24, r18
 632:	22 27       	eor	r18, r18
 634:	b0 0d       	add	r27, r0
 636:	a1 1d       	adc	r26, r1
 638:	62 1f       	adc	r22, r18
 63a:	73 9f       	mul	r23, r19
 63c:	b0 0d       	add	r27, r0
 63e:	a1 1d       	adc	r26, r1
 640:	62 1f       	adc	r22, r18
 642:	83 9f       	mul	r24, r19
 644:	a0 0d       	add	r26, r0
 646:	61 1d       	adc	r22, r1
 648:	22 1f       	adc	r18, r18
 64a:	74 9f       	mul	r23, r20
 64c:	33 27       	eor	r19, r19
 64e:	a0 0d       	add	r26, r0
 650:	61 1d       	adc	r22, r1
 652:	23 1f       	adc	r18, r19
 654:	84 9f       	mul	r24, r20
 656:	60 0d       	add	r22, r0
 658:	21 1d       	adc	r18, r1
 65a:	82 2f       	mov	r24, r18
 65c:	76 2f       	mov	r23, r22
 65e:	6a 2f       	mov	r22, r26
 660:	11 24       	eor	r1, r1
 662:	9f 57       	subi	r25, 0x7F	; 127
 664:	50 40       	sbci	r21, 0x00	; 0
 666:	9a f0       	brmi	.+38     	; 0x68e <__mulsf3_pse+0x88>
 668:	f1 f0       	breq	.+60     	; 0x6a6 <__mulsf3_pse+0xa0>
 66a:	88 23       	and	r24, r24
 66c:	4a f0       	brmi	.+18     	; 0x680 <__mulsf3_pse+0x7a>
 66e:	ee 0f       	add	r30, r30
 670:	ff 1f       	adc	r31, r31
 672:	bb 1f       	adc	r27, r27
 674:	66 1f       	adc	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	91 50       	subi	r25, 0x01	; 1
 67c:	50 40       	sbci	r21, 0x00	; 0
 67e:	a9 f7       	brne	.-22     	; 0x66a <__mulsf3_pse+0x64>
 680:	9e 3f       	cpi	r25, 0xFE	; 254
 682:	51 05       	cpc	r21, r1
 684:	80 f0       	brcs	.+32     	; 0x6a6 <__mulsf3_pse+0xa0>
 686:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_inf>
 68a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_szero>
 68e:	5f 3f       	cpi	r21, 0xFF	; 255
 690:	e4 f3       	brlt	.-8      	; 0x68a <__mulsf3_pse+0x84>
 692:	98 3e       	cpi	r25, 0xE8	; 232
 694:	d4 f3       	brlt	.-12     	; 0x68a <__mulsf3_pse+0x84>
 696:	86 95       	lsr	r24
 698:	77 95       	ror	r23
 69a:	67 95       	ror	r22
 69c:	b7 95       	ror	r27
 69e:	f7 95       	ror	r31
 6a0:	e7 95       	ror	r30
 6a2:	9f 5f       	subi	r25, 0xFF	; 255
 6a4:	c1 f7       	brne	.-16     	; 0x696 <__mulsf3_pse+0x90>
 6a6:	fe 2b       	or	r31, r30
 6a8:	88 0f       	add	r24, r24
 6aa:	91 1d       	adc	r25, r1
 6ac:	96 95       	lsr	r25
 6ae:	87 95       	ror	r24
 6b0:	97 f9       	bld	r25, 7
 6b2:	08 95       	ret

000006b4 <__udivmodsi4>:
 6b4:	a1 e2       	ldi	r26, 0x21	; 33
 6b6:	1a 2e       	mov	r1, r26
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	fd 01       	movw	r30, r26
 6be:	0d c0       	rjmp	.+26     	; 0x6da <__udivmodsi4_ep>

000006c0 <__udivmodsi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	ee 1f       	adc	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	a2 17       	cp	r26, r18
 6ca:	b3 07       	cpc	r27, r19
 6cc:	e4 07       	cpc	r30, r20
 6ce:	f5 07       	cpc	r31, r21
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__udivmodsi4_ep>
 6d2:	a2 1b       	sub	r26, r18
 6d4:	b3 0b       	sbc	r27, r19
 6d6:	e4 0b       	sbc	r30, r20
 6d8:	f5 0b       	sbc	r31, r21

000006da <__udivmodsi4_ep>:
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	1a 94       	dec	r1
 6e4:	69 f7       	brne	.-38     	; 0x6c0 <__udivmodsi4_loop>
 6e6:	60 95       	com	r22
 6e8:	70 95       	com	r23
 6ea:	80 95       	com	r24
 6ec:	90 95       	com	r25
 6ee:	9b 01       	movw	r18, r22
 6f0:	ac 01       	movw	r20, r24
 6f2:	bd 01       	movw	r22, r26
 6f4:	cf 01       	movw	r24, r30
 6f6:	08 95       	ret

000006f8 <eeprom_write_byte>:
 6f8:	26 2f       	mov	r18, r22

000006fa <eeprom_write_r18>:
 6fa:	f9 99       	sbic	0x1f, 1	; 31
 6fc:	fe cf       	rjmp	.-4      	; 0x6fa <eeprom_write_r18>
 6fe:	92 bd       	out	0x22, r25	; 34
 700:	81 bd       	out	0x21, r24	; 33
 702:	20 bd       	out	0x20, r18	; 32
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	fa 9a       	sbi	0x1f, 2	; 31
 70a:	f9 9a       	sbi	0x1f, 1	; 31
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	08 95       	ret

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
