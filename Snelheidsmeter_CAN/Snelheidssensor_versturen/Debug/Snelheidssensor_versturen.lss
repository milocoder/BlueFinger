
Snelheidssensor_versturen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000090a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000896  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  00800100  00800100  0000090a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001265  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e70  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000891  00000000  00000000  00002afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000742  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f7  00000000  00000000  00003c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004295  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 3e       	cpi	r26, 0xE2	; 226
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 11 02 	call	0x422	; 0x422 <main>
  b4:	0c 94 49 04 	jmp	0x892	; 0x892 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <initCAN>:

		messageAvailable = 1;
	}

	return messageAvailable;
}
  bc:	e8 ed       	ldi	r30, 0xD8	; 216
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
  d2:	83 e1       	ldi	r24, 0x13	; 19
  d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <initCAN+0x30>
  dc:	98 2f       	mov	r25, r24
  de:	92 95       	swap	r25
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
  e6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	b0 f3       	brcs	.-20     	; 0xdc <initCAN+0x20>
  f0:	78 94       	sei
  f2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
  f6:	80 eb       	ldi	r24, 0xB0	; 176
  f8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
  fc:	e8 ed       	ldi	r30, 0xD8	; 216
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <getFreeMob>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0a c0       	rjmp	.+20     	; 0x120 <getFreeMob+0x18>
 10c:	98 2f       	mov	r25, r24
 10e:	92 95       	swap	r25
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 116:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 11a:	90 7c       	andi	r25, 0xC0	; 192
 11c:	21 f0       	breq	.+8      	; 0x126 <getFreeMob+0x1e>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	8f 30       	cpi	r24, 0x0F	; 15
 122:	a0 f3       	brcs	.-24     	; 0x10c <getFreeMob+0x4>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	08 95       	ret

00000128 <sendCAN>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	0e 94 84 00 	call	0x108	; 0x108 <getFreeMob>
 132:	8f 3f       	cpi	r24, 0xFF	; 255
 134:	09 f4       	brne	.+2      	; 0x138 <sendCAN+0x10>
 136:	58 c0       	rjmp	.+176    	; 0x1e8 <sendCAN+0xc0>
 138:	ed ee       	ldi	r30, 0xED	; 237
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	48 2f       	mov	r20, r24
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	9a 01       	movw	r18, r20
 144:	22 95       	swap	r18
 146:	32 95       	swap	r19
 148:	30 7f       	andi	r19, 0xF0	; 240
 14a:	32 27       	eor	r19, r18
 14c:	20 7f       	andi	r18, 0xF0	; 240
 14e:	32 27       	eor	r19, r18
 150:	29 2b       	or	r18, r25
 152:	20 83       	st	Z, r18
 154:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 158:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 15c:	98 81       	ld	r25, Y
 15e:	92 95       	swap	r25
 160:	99 0f       	add	r25, r25
 162:	90 7e       	andi	r25, 0xE0	; 224
 164:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 168:	98 81       	ld	r25, Y
 16a:	96 95       	lsr	r25
 16c:	96 95       	lsr	r25
 16e:	96 95       	lsr	r25
 170:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 174:	9a 85       	ldd	r25, Y+10	; 0x0a
 176:	99 30       	cpi	r25, 0x09	; 9
 178:	10 f0       	brcs	.+4      	; 0x17e <sendCAN+0x56>
 17a:	98 e0       	ldi	r25, 0x08	; 8
 17c:	9a 87       	std	Y+10, r25	; 0x0a
 17e:	9a 85       	ldd	r25, Y+10	; 0x0a
 180:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	07 c0       	rjmp	.+14     	; 0x196 <sendCAN+0x6e>
 188:	fe 01       	movw	r30, r28
 18a:	e9 0f       	add	r30, r25
 18c:	f1 1d       	adc	r31, r1
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 194:	9f 5f       	subi	r25, 0xFF	; 255
 196:	2a 85       	ldd	r18, Y+10	; 0x0a
 198:	92 17       	cp	r25, r18
 19a:	b0 f3       	brcs	.-20     	; 0x188 <sendCAN+0x60>
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	78 f4       	brcc	.+30     	; 0x1be <sendCAN+0x96>
 1a0:	ee ed       	ldi	r30, 0xDE	; 222
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	40 81       	ld	r20, Z
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <sendCAN+0x8a>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <sendCAN+0x86>
 1b6:	cb 01       	movw	r24, r22
 1b8:	84 2b       	or	r24, r20
 1ba:	80 83       	st	Z, r24
 1bc:	0e c0       	rjmp	.+28     	; 0x1da <sendCAN+0xb2>
 1be:	ef ed       	ldi	r30, 0xDF	; 223
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	20 81       	ld	r18, Z
 1c4:	48 50       	subi	r20, 0x08	; 8
 1c6:	51 09       	sbc	r21, r1
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <sendCAN+0xaa>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	4a 95       	dec	r20
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <sendCAN+0xa6>
 1d6:	82 2b       	or	r24, r18
 1d8:	80 83       	st	Z, r24
 1da:	ef ee       	ldi	r30, 0xEF	; 239
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	80 83       	st	Z, r24
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <sendCAN+0xc2>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <__vector_18>:
 * Note that the NO_BLOCK attribute is not applied here, so while this is running,
 * all interrupts are blocked.
 *
 */
ISR( CANIT_vect )
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	cf 93       	push	r28
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	// **Save off CANPAGE to prevent application code bugs**
	uint8_t canPage = CANPAGE;
 214:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 218:	87 c0       	rjmp	.+270    	; 0x328 <__vector_18+0x138>
	{
		// Point to the Message Object that needs to be serviced
		CANPAGE = CANHPMOB & 0xF0;
 21a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 21e:	80 7f       	andi	r24, 0xF0	; 240
 220:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>

		// Service the correct kind of interrupt
		// Transmit Interrupts
		if( CANSTMOB & (1 << TXOK) )
 224:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 228:	86 ff       	sbrs	r24, 6
 22a:	0c c0       	rjmp	.+24     	; 0x244 <__vector_18+0x54>
		{
			// Acknowledge the interrupt
			CANSTMOB = 0;
 22c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>

			// Free up the MOb
			CANCDMOB = 0;
 230:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>

			// Determine the MOb index
			uint8_t mob = (CANPAGE & 0xF0) >> 8;
 234:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>

			// Disable interrupts for this MOb
			if( mob < 8 )
			{
				CANIE2 &= ~(1 << mob);
 238:	ee ed       	ldi	r30, 0xDE	; 222
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	80 83       	st	Z, r24
 242:	72 c0       	rjmp	.+228    	; 0x328 <__vector_18+0x138>
			{
				CANIE1 &= ~(1 << (mob-8));
			}
		}
		// Receive Interrupts
		else if ( CANSTMOB & (1 << RXOK) )
 244:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 248:	85 ff       	sbrs	r24, 5
 24a:	62 c0       	rjmp	.+196    	; 0x310 <__vector_18+0x120>
		{
			// Default to impossible ID
			uint16_t id = 0xFFFF;

			// Load the message data into a free message buffer object
			if( CANCDMOB & (1 << IDE) )
 24c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 250:	84 ff       	sbrs	r24, 4
 252:	0e c0       	rjmp	.+28     	; 0x270 <__vector_18+0x80>
			{
				// Message type is CAN 2.0B
				id = (CANIDT4 >> 3) | ((CANIDT3 & 0x7F) << 5); 
 254:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 258:	86 95       	lsr	r24
 25a:	86 95       	lsr	r24
 25c:	86 95       	lsr	r24
 25e:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 262:	4f 77       	andi	r20, 0x7F	; 127
 264:	90 e2       	ldi	r25, 0x20	; 32
 266:	49 9f       	mul	r20, r25
 268:	a0 01       	movw	r20, r0
 26a:	11 24       	eor	r1, r1
 26c:	48 2b       	or	r20, r24
 26e:	0f c0       	rjmp	.+30     	; 0x28e <__vector_18+0x9e>
			}
			else
			{
				// Message type is CAN 2.0A
				id = (CANIDT2 >> 5) | (((uint16_t)CANIDT1 << 3));
 270:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 274:	82 95       	swap	r24
 276:	86 95       	lsr	r24
 278:	87 70       	andi	r24, 0x07	; 7
 27a:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	48 2b       	or	r20, r24
			}

			messageBuffer[bufIndex].id = id;
 28e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bufIndex>
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	8b e0       	ldi	r24, 0x0B	; 11
 296:	82 9f       	mul	r24, r18
 298:	f0 01       	movw	r30, r0
 29a:	83 9f       	mul	r24, r19
 29c:	f0 0d       	add	r31, r0
 29e:	11 24       	eor	r1, r1
 2a0:	ee 5f       	subi	r30, 0xFE	; 254
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	40 83       	st	Z, r20
 2a6:	95 2f       	mov	r25, r21
 2a8:	97 70       	andi	r25, 0x07	; 7
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	89 2b       	or	r24, r25
 2b0:	81 83       	std	Z+1, r24	; 0x01

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;
 2b2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	82 87       	std	Z+10, r24	; 0x0a

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <__vector_18+0xea>
			{
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
 2be:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 2c2:	4b e0       	ldi	r20, 0x0B	; 11
 2c4:	42 9f       	mul	r20, r18
 2c6:	f0 01       	movw	r30, r0
 2c8:	43 9f       	mul	r20, r19
 2ca:	f0 0d       	add	r31, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	ee 5f       	subi	r30, 0xFE	; 254
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	e9 0f       	add	r30, r25
 2d4:	f1 1d       	adc	r31, r1
 2d6:	82 83       	std	Z+2, r24	; 0x02
			messageBuffer[bufIndex].id = id;

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 2d8:	9f 5f       	subi	r25, 0xFF	; 255
 2da:	8b e0       	ldi	r24, 0x0B	; 11
 2dc:	82 9f       	mul	r24, r18
 2de:	f0 01       	movw	r30, r0
 2e0:	83 9f       	mul	r24, r19
 2e2:	f0 0d       	add	r31, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	ee 5f       	subi	r30, 0xFE	; 254
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	82 85       	ldd	r24, Z+10	; 0x0a
 2ec:	98 17       	cp	r25, r24
 2ee:	38 f3       	brcs	.-50     	; 0x2be <__vector_18+0xce>
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
			}

			bufIndex = (bufIndex + 1) % MESSAGE_BUFFER_LENGTH;
 2f0:	c9 01       	movw	r24, r18
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	64 e1       	ldi	r22, 0x14	; 20
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__divmodhi4>
 2fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufIndex>

			// Acknowledge the interrupt
			CANSTMOB = 0;
 300:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>

			CANCDMOB |= (2 << CONMOB0);
 304:	ef ee       	ldi	r30, 0xEF	; 239
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	80 83       	st	Z, r24
 30e:	0c c0       	rjmp	.+24     	; 0x328 <__vector_18+0x138>
			
		}
		else if ( CANGIT & ~(1 << CANIT) )
 310:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	8f 77       	andi	r24, 0x7F	; 127
 318:	89 2b       	or	r24, r25
 31a:	31 f0       	breq	.+12     	; 0x328 <__vector_18+0x138>
		{
			// Preserve the last error received
			lastError = CANGIT;
 31c:	ea ed       	ldi	r30, 0xDA	; 218
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			// Clear the error
			CANGIT = 0;
 326:	10 82       	st	Z, r1
	uint8_t canPage = CANPAGE;

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 328:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 32c:	82 95       	swap	r24
 32e:	8f 70       	andi	r24, 0x0F	; 15
 330:	8f 30       	cpi	r24, 0x0F	; 15
 332:	09 f0       	breq	.+2      	; 0x336 <__vector_18+0x146>
 334:	72 cf       	rjmp	.-284    	; 0x21a <__vector_18+0x2a>
			CANGIT = 0;
		}
	}

	// Restore CANPAGE register to where application code had it before interrupt
	CANPAGE = canPage;
 336:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	cf 91       	pop	r28
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <verstuurCan>:
		_delay_ms(3000);
	}
}

void verstuurCan(float snelheid)
{
 35e:	8f 92       	push	r8
 360:	9f 92       	push	r9
 362:	af 92       	push	r10
 364:	bf 92       	push	r11
 366:	cf 92       	push	r12
 368:	df 92       	push	r13
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	2b 97       	sbiw	r28, 0x0b	; 11
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
	// volgende stuk initaliseert de canmessage struct, verstuurt snelheid met data[0] en data[1]
	int voorKomma = (int)snelheid; // pak getal voor de komma
 386:	0e 94 ce 02 	call	0x59c	; 0x59c <__fixsfsi>
 38a:	6b 01       	movw	r12, r22
 38c:	7c 01       	movw	r14, r24
	int naKomma = (int)((snelheid-voorKomma)*100); // pak kommagetal en vermenigvuldig keer 100
 38e:	07 2e       	mov	r0, r23
 390:	00 0c       	add	r0, r0
 392:	88 0b       	sbc	r24, r24
 394:	99 0b       	sbc	r25, r25
 396:	0e 94 06 03 	call	0x60c	; 0x60c <__floatsisf>
 39a:	9b 01       	movw	r18, r22
 39c:	ac 01       	movw	r20, r24
 39e:	c5 01       	movw	r24, r10
 3a0:	b4 01       	movw	r22, r8
 3a2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__subsf3>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	48 ec       	ldi	r20, 0xC8	; 200
 3ac:	52 e4       	ldi	r21, 0x42	; 66
 3ae:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3>
 3b2:	0e 94 ce 02 	call	0x59c	; 0x59c <__fixsfsi>
	
	
	CANMessage tx_message;
	tx_message.id = 0x05; // can ID
 3b6:	85 e0       	ldi	r24, 0x05	; 5
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	88 7f       	andi	r24, 0xF8	; 248
 3be:	8a 83       	std	Y+2, r24	; 0x02
	tx_message.length = 8;
 3c0:	88 e0       	ldi	r24, 0x08	; 8
 3c2:	8b 87       	std	Y+11, r24	; 0x0b
	tx_message.data[0] = voorKomma;
 3c4:	cb 82       	std	Y+3, r12	; 0x03
	tx_message.data[1] = naKomma;
 3c6:	6c 83       	std	Y+4, r22	; 0x04
	for(int i = 2; i < 8; i++)
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	08 c0       	rjmp	.+16     	; 0x3de <verstuurCan+0x80>
		tx_message.data[i] = 0;
 3ce:	e3 e0       	ldi	r30, 0x03	; 3
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ec 0f       	add	r30, r28
 3d4:	fd 1f       	adc	r31, r29
 3d6:	e8 0f       	add	r30, r24
 3d8:	f9 1f       	adc	r31, r25
 3da:	10 82       	st	Z, r1
	CANMessage tx_message;
	tx_message.id = 0x05; // can ID
	tx_message.length = 8;
	tx_message.data[0] = voorKomma;
	tx_message.data[1] = naKomma;
	for(int i = 2; i < 8; i++)
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	91 05       	cpc	r25, r1
 3e2:	ac f3       	brlt	.-22     	; 0x3ce <verstuurCan+0x70>
		tx_message.data[i] = 0;
	sendCAN(&tx_message);	
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	0e 94 94 00 	call	0x128	; 0x128 <sendCAN>
}
 3ec:	2b 96       	adiw	r28, 0x0b	; 11
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	9f 90       	pop	r9
 40a:	8f 90       	pop	r8
 40c:	08 95       	ret

0000040e <init>:

void init()
{
	init_millis(F_CPU);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	74 e2       	ldi	r23, 0x24	; 36
 412:	84 ef       	ldi	r24, 0xF4	; 244
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 48 02 	call	0x490	; 0x490 <init_millis>
	sei();  // Zet interrupts aan
 41a:	78 94       	sei
	initCAN();	
 41c:	0e 94 5e 00 	call	0xbc	; 0xbc <initCAN>
 420:	08 95       	ret

00000422 <main>:
void init();
void verstuurCan(float snelheid);

int main(void)
{	
	init();
 422:	0e 94 07 02 	call	0x40e	; 0x40e <init>
	
	while(1) {
		float snelheidKmh = (float)12.22;
		verstuurCan(snelheidKmh);
 426:	6f e1       	ldi	r22, 0x1F	; 31
 428:	75 e8       	ldi	r23, 0x85	; 133
 42a:	83 e4       	ldi	r24, 0x43	; 67
 42c:	91 e4       	ldi	r25, 0x41	; 65
 42e:	0e 94 af 01 	call	0x35e	; 0x35e <verstuurCan>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 432:	2f ef       	ldi	r18, 0xFF	; 255
 434:	8b e7       	ldi	r24, 0x7B	; 123
 436:	92 e9       	ldi	r25, 0x92	; 146
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	80 40       	sbci	r24, 0x00	; 0
 43c:	90 40       	sbci	r25, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <main+0x16>
 440:	00 c0       	rjmp	.+0      	; 0x442 <main+0x20>
 442:	00 00       	nop
 444:	f0 cf       	rjmp	.-32     	; 0x426 <main+0x4>

00000446 <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
  timer1_millis++;
 458:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <timer1_millis>
 45c:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <timer1_millis+0x1>
 460:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <timer1_millis+0x2>
 464:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <timer1_millis+0x3>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	a1 1d       	adc	r26, r1
 46c:	b1 1d       	adc	r27, r1
 46e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <timer1_millis>
 472:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <timer1_millis+0x1>
 476:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <timer1_millis+0x2>
 47a:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <timer1_millis+0x3>
}
 47e:	bf 91       	pop	r27
 480:	af 91       	pop	r26
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 490:	20 e4       	ldi	r18, 0x40	; 64
 492:	3f e1       	ldi	r19, 0x1F	; 31
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	0e 94 13 04 	call	0x826	; 0x826 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 49c:	e1 e8       	ldi	r30, 0x81	; 129
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	8a 60       	ori	r24, 0x0A	; 10
 4a4:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 4a6:	bb 27       	eor	r27, r27
 4a8:	a5 2f       	mov	r26, r21
 4aa:	94 2f       	mov	r25, r20
 4ac:	83 2f       	mov	r24, r19
 4ae:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  OCR1AL = ctc_match_overflow;
 4b2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 4b6:	ef e6       	ldi	r30, 0x6F	; 111
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	82 60       	ori	r24, 0x02	; 2
 4be:	80 83       	st	Z, r24
 4c0:	08 95       	ret

000004c2 <__subsf3>:
 4c2:	50 58       	subi	r21, 0x80	; 128

000004c4 <__addsf3>:
 4c4:	bb 27       	eor	r27, r27
 4c6:	aa 27       	eor	r26, r26
 4c8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__addsf3x>
 4cc:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_round>
 4d0:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscA>
 4d4:	38 f0       	brcs	.+14     	; 0x4e4 <__addsf3+0x20>
 4d6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscB>
 4da:	20 f0       	brcs	.+8      	; 0x4e4 <__addsf3+0x20>
 4dc:	39 f4       	brne	.+14     	; 0x4ec <__addsf3+0x28>
 4de:	9f 3f       	cpi	r25, 0xFF	; 255
 4e0:	19 f4       	brne	.+6      	; 0x4e8 <__addsf3+0x24>
 4e2:	26 f4       	brtc	.+8      	; 0x4ec <__addsf3+0x28>
 4e4:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_nan>
 4e8:	0e f4       	brtc	.+2      	; 0x4ec <__addsf3+0x28>
 4ea:	e0 95       	com	r30
 4ec:	e7 fb       	bst	r30, 7
 4ee:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_inf>

000004f2 <__addsf3x>:
 4f2:	e9 2f       	mov	r30, r25
 4f4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_split3>
 4f8:	58 f3       	brcs	.-42     	; 0x4d0 <__addsf3+0xc>
 4fa:	ba 17       	cp	r27, r26
 4fc:	62 07       	cpc	r22, r18
 4fe:	73 07       	cpc	r23, r19
 500:	84 07       	cpc	r24, r20
 502:	95 07       	cpc	r25, r21
 504:	20 f0       	brcs	.+8      	; 0x50e <__addsf3x+0x1c>
 506:	79 f4       	brne	.+30     	; 0x526 <__addsf3x+0x34>
 508:	a6 f5       	brtc	.+104    	; 0x572 <__addsf3x+0x80>
 50a:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_zero>
 50e:	0e f4       	brtc	.+2      	; 0x512 <__addsf3x+0x20>
 510:	e0 95       	com	r30
 512:	0b 2e       	mov	r0, r27
 514:	ba 2f       	mov	r27, r26
 516:	a0 2d       	mov	r26, r0
 518:	0b 01       	movw	r0, r22
 51a:	b9 01       	movw	r22, r18
 51c:	90 01       	movw	r18, r0
 51e:	0c 01       	movw	r0, r24
 520:	ca 01       	movw	r24, r20
 522:	a0 01       	movw	r20, r0
 524:	11 24       	eor	r1, r1
 526:	ff 27       	eor	r31, r31
 528:	59 1b       	sub	r21, r25
 52a:	99 f0       	breq	.+38     	; 0x552 <__addsf3x+0x60>
 52c:	59 3f       	cpi	r21, 0xF9	; 249
 52e:	50 f4       	brcc	.+20     	; 0x544 <__addsf3x+0x52>
 530:	50 3e       	cpi	r21, 0xE0	; 224
 532:	68 f1       	brcs	.+90     	; 0x58e <__addsf3x+0x9c>
 534:	1a 16       	cp	r1, r26
 536:	f0 40       	sbci	r31, 0x00	; 0
 538:	a2 2f       	mov	r26, r18
 53a:	23 2f       	mov	r18, r19
 53c:	34 2f       	mov	r19, r20
 53e:	44 27       	eor	r20, r20
 540:	58 5f       	subi	r21, 0xF8	; 248
 542:	f3 cf       	rjmp	.-26     	; 0x52a <__addsf3x+0x38>
 544:	46 95       	lsr	r20
 546:	37 95       	ror	r19
 548:	27 95       	ror	r18
 54a:	a7 95       	ror	r26
 54c:	f0 40       	sbci	r31, 0x00	; 0
 54e:	53 95       	inc	r21
 550:	c9 f7       	brne	.-14     	; 0x544 <__addsf3x+0x52>
 552:	7e f4       	brtc	.+30     	; 0x572 <__addsf3x+0x80>
 554:	1f 16       	cp	r1, r31
 556:	ba 0b       	sbc	r27, r26
 558:	62 0b       	sbc	r22, r18
 55a:	73 0b       	sbc	r23, r19
 55c:	84 0b       	sbc	r24, r20
 55e:	ba f0       	brmi	.+46     	; 0x58e <__addsf3x+0x9c>
 560:	91 50       	subi	r25, 0x01	; 1
 562:	a1 f0       	breq	.+40     	; 0x58c <__addsf3x+0x9a>
 564:	ff 0f       	add	r31, r31
 566:	bb 1f       	adc	r27, r27
 568:	66 1f       	adc	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	c2 f7       	brpl	.-16     	; 0x560 <__addsf3x+0x6e>
 570:	0e c0       	rjmp	.+28     	; 0x58e <__addsf3x+0x9c>
 572:	ba 0f       	add	r27, r26
 574:	62 1f       	adc	r22, r18
 576:	73 1f       	adc	r23, r19
 578:	84 1f       	adc	r24, r20
 57a:	48 f4       	brcc	.+18     	; 0x58e <__addsf3x+0x9c>
 57c:	87 95       	ror	r24
 57e:	77 95       	ror	r23
 580:	67 95       	ror	r22
 582:	b7 95       	ror	r27
 584:	f7 95       	ror	r31
 586:	9e 3f       	cpi	r25, 0xFE	; 254
 588:	08 f0       	brcs	.+2      	; 0x58c <__addsf3x+0x9a>
 58a:	b0 cf       	rjmp	.-160    	; 0x4ec <__addsf3+0x28>
 58c:	93 95       	inc	r25
 58e:	88 0f       	add	r24, r24
 590:	08 f0       	brcs	.+2      	; 0x594 <__addsf3x+0xa2>
 592:	99 27       	eor	r25, r25
 594:	ee 0f       	add	r30, r30
 596:	97 95       	ror	r25
 598:	87 95       	ror	r24
 59a:	08 95       	ret

0000059c <__fixsfsi>:
 59c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 5a0:	68 94       	set
 5a2:	b1 11       	cpse	r27, r1
 5a4:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>
 5a8:	08 95       	ret

000005aa <__fixunssfsi>:
 5aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fp_splitA>
 5ae:	88 f0       	brcs	.+34     	; 0x5d2 <__fixunssfsi+0x28>
 5b0:	9f 57       	subi	r25, 0x7F	; 127
 5b2:	98 f0       	brcs	.+38     	; 0x5da <__fixunssfsi+0x30>
 5b4:	b9 2f       	mov	r27, r25
 5b6:	99 27       	eor	r25, r25
 5b8:	b7 51       	subi	r27, 0x17	; 23
 5ba:	b0 f0       	brcs	.+44     	; 0x5e8 <__fixunssfsi+0x3e>
 5bc:	e1 f0       	breq	.+56     	; 0x5f6 <__fixunssfsi+0x4c>
 5be:	66 0f       	add	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	1a f0       	brmi	.+6      	; 0x5ce <__fixunssfsi+0x24>
 5c8:	ba 95       	dec	r27
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__fixunssfsi+0x14>
 5cc:	14 c0       	rjmp	.+40     	; 0x5f6 <__fixunssfsi+0x4c>
 5ce:	b1 30       	cpi	r27, 0x01	; 1
 5d0:	91 f0       	breq	.+36     	; 0x5f6 <__fixunssfsi+0x4c>
 5d2:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_zero>
 5d6:	b1 e0       	ldi	r27, 0x01	; 1
 5d8:	08 95       	ret
 5da:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_zero>
 5de:	67 2f       	mov	r22, r23
 5e0:	78 2f       	mov	r23, r24
 5e2:	88 27       	eor	r24, r24
 5e4:	b8 5f       	subi	r27, 0xF8	; 248
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <__fixunssfsi+0x4c>
 5e8:	b9 3f       	cpi	r27, 0xF9	; 249
 5ea:	cc f3       	brlt	.-14     	; 0x5de <__fixunssfsi+0x34>
 5ec:	86 95       	lsr	r24
 5ee:	77 95       	ror	r23
 5f0:	67 95       	ror	r22
 5f2:	b3 95       	inc	r27
 5f4:	d9 f7       	brne	.-10     	; 0x5ec <__fixunssfsi+0x42>
 5f6:	3e f4       	brtc	.+14     	; 0x606 <__fixunssfsi+0x5c>
 5f8:	90 95       	com	r25
 5fa:	80 95       	com	r24
 5fc:	70 95       	com	r23
 5fe:	61 95       	neg	r22
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	08 95       	ret

00000608 <__floatunsisf>:
 608:	e8 94       	clt
 60a:	09 c0       	rjmp	.+18     	; 0x61e <__floatsisf+0x12>

0000060c <__floatsisf>:
 60c:	97 fb       	bst	r25, 7
 60e:	3e f4       	brtc	.+14     	; 0x61e <__floatsisf+0x12>
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	99 23       	and	r25, r25
 620:	a9 f0       	breq	.+42     	; 0x64c <__floatsisf+0x40>
 622:	f9 2f       	mov	r31, r25
 624:	96 e9       	ldi	r25, 0x96	; 150
 626:	bb 27       	eor	r27, r27
 628:	93 95       	inc	r25
 62a:	f6 95       	lsr	r31
 62c:	87 95       	ror	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f1 11       	cpse	r31, r1
 636:	f8 cf       	rjmp	.-16     	; 0x628 <__floatsisf+0x1c>
 638:	fa f4       	brpl	.+62     	; 0x678 <__floatsisf+0x6c>
 63a:	bb 0f       	add	r27, r27
 63c:	11 f4       	brne	.+4      	; 0x642 <__floatsisf+0x36>
 63e:	60 ff       	sbrs	r22, 0
 640:	1b c0       	rjmp	.+54     	; 0x678 <__floatsisf+0x6c>
 642:	6f 5f       	subi	r22, 0xFF	; 255
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	8f 4f       	sbci	r24, 0xFF	; 255
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	16 c0       	rjmp	.+44     	; 0x678 <__floatsisf+0x6c>
 64c:	88 23       	and	r24, r24
 64e:	11 f0       	breq	.+4      	; 0x654 <__floatsisf+0x48>
 650:	96 e9       	ldi	r25, 0x96	; 150
 652:	11 c0       	rjmp	.+34     	; 0x676 <__floatsisf+0x6a>
 654:	77 23       	and	r23, r23
 656:	21 f0       	breq	.+8      	; 0x660 <__floatsisf+0x54>
 658:	9e e8       	ldi	r25, 0x8E	; 142
 65a:	87 2f       	mov	r24, r23
 65c:	76 2f       	mov	r23, r22
 65e:	05 c0       	rjmp	.+10     	; 0x66a <__floatsisf+0x5e>
 660:	66 23       	and	r22, r22
 662:	71 f0       	breq	.+28     	; 0x680 <__floatsisf+0x74>
 664:	96 e8       	ldi	r25, 0x86	; 134
 666:	86 2f       	mov	r24, r22
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	2a f0       	brmi	.+10     	; 0x678 <__floatsisf+0x6c>
 66e:	9a 95       	dec	r25
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	88 1f       	adc	r24, r24
 676:	da f7       	brpl	.-10     	; 0x66e <__floatsisf+0x62>
 678:	88 0f       	add	r24, r24
 67a:	96 95       	lsr	r25
 67c:	87 95       	ror	r24
 67e:	97 f9       	bld	r25, 7
 680:	08 95       	ret

00000682 <__fp_inf>:
 682:	97 f9       	bld	r25, 7
 684:	9f 67       	ori	r25, 0x7F	; 127
 686:	80 e8       	ldi	r24, 0x80	; 128
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	08 95       	ret

0000068e <__fp_nan>:
 68e:	9f ef       	ldi	r25, 0xFF	; 255
 690:	80 ec       	ldi	r24, 0xC0	; 192
 692:	08 95       	ret

00000694 <__fp_pscA>:
 694:	00 24       	eor	r0, r0
 696:	0a 94       	dec	r0
 698:	16 16       	cp	r1, r22
 69a:	17 06       	cpc	r1, r23
 69c:	18 06       	cpc	r1, r24
 69e:	09 06       	cpc	r0, r25
 6a0:	08 95       	ret

000006a2 <__fp_pscB>:
 6a2:	00 24       	eor	r0, r0
 6a4:	0a 94       	dec	r0
 6a6:	12 16       	cp	r1, r18
 6a8:	13 06       	cpc	r1, r19
 6aa:	14 06       	cpc	r1, r20
 6ac:	05 06       	cpc	r0, r21
 6ae:	08 95       	ret

000006b0 <__fp_round>:
 6b0:	09 2e       	mov	r0, r25
 6b2:	03 94       	inc	r0
 6b4:	00 0c       	add	r0, r0
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__fp_round+0xc>
 6b8:	88 23       	and	r24, r24
 6ba:	52 f0       	brmi	.+20     	; 0x6d0 <__fp_round+0x20>
 6bc:	bb 0f       	add	r27, r27
 6be:	40 f4       	brcc	.+16     	; 0x6d0 <__fp_round+0x20>
 6c0:	bf 2b       	or	r27, r31
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <__fp_round+0x18>
 6c4:	60 ff       	sbrs	r22, 0
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <__fp_round+0x20>
 6c8:	6f 5f       	subi	r22, 0xFF	; 255
 6ca:	7f 4f       	sbci	r23, 0xFF	; 255
 6cc:	8f 4f       	sbci	r24, 0xFF	; 255
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	08 95       	ret

000006d2 <__fp_split3>:
 6d2:	57 fd       	sbrc	r21, 7
 6d4:	90 58       	subi	r25, 0x80	; 128
 6d6:	44 0f       	add	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	59 f0       	breq	.+22     	; 0x6f2 <__fp_splitA+0x10>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	71 f0       	breq	.+28     	; 0x6fc <__fp_splitA+0x1a>
 6e0:	47 95       	ror	r20

000006e2 <__fp_splitA>:
 6e2:	88 0f       	add	r24, r24
 6e4:	97 fb       	bst	r25, 7
 6e6:	99 1f       	adc	r25, r25
 6e8:	61 f0       	breq	.+24     	; 0x702 <__fp_splitA+0x20>
 6ea:	9f 3f       	cpi	r25, 0xFF	; 255
 6ec:	79 f0       	breq	.+30     	; 0x70c <__fp_splitA+0x2a>
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	14 06       	cpc	r1, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	f2 cf       	rjmp	.-28     	; 0x6e0 <__fp_split3+0xe>
 6fc:	46 95       	lsr	r20
 6fe:	f1 df       	rcall	.-30     	; 0x6e2 <__fp_splitA>
 700:	08 c0       	rjmp	.+16     	; 0x712 <__fp_splitA+0x30>
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	18 06       	cpc	r1, r24
 708:	99 1f       	adc	r25, r25
 70a:	f1 cf       	rjmp	.-30     	; 0x6ee <__fp_splitA+0xc>
 70c:	86 95       	lsr	r24
 70e:	71 05       	cpc	r23, r1
 710:	61 05       	cpc	r22, r1
 712:	08 94       	sec
 714:	08 95       	ret

00000716 <__fp_zero>:
 716:	e8 94       	clt

00000718 <__fp_szero>:
 718:	bb 27       	eor	r27, r27
 71a:	66 27       	eor	r22, r22
 71c:	77 27       	eor	r23, r23
 71e:	cb 01       	movw	r24, r22
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__mulsf3>:
 724:	0e 94 a5 03 	call	0x74a	; 0x74a <__mulsf3x>
 728:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_round>
 72c:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscA>
 730:	38 f0       	brcs	.+14     	; 0x740 <__mulsf3+0x1c>
 732:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscB>
 736:	20 f0       	brcs	.+8      	; 0x740 <__mulsf3+0x1c>
 738:	95 23       	and	r25, r21
 73a:	11 f0       	breq	.+4      	; 0x740 <__mulsf3+0x1c>
 73c:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_inf>
 740:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_nan>
 744:	11 24       	eor	r1, r1
 746:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>

0000074a <__mulsf3x>:
 74a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_split3>
 74e:	70 f3       	brcs	.-36     	; 0x72c <__mulsf3+0x8>

00000750 <__mulsf3_pse>:
 750:	95 9f       	mul	r25, r21
 752:	c1 f3       	breq	.-16     	; 0x744 <__mulsf3+0x20>
 754:	95 0f       	add	r25, r21
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	55 1f       	adc	r21, r21
 75a:	62 9f       	mul	r22, r18
 75c:	f0 01       	movw	r30, r0
 75e:	72 9f       	mul	r23, r18
 760:	bb 27       	eor	r27, r27
 762:	f0 0d       	add	r31, r0
 764:	b1 1d       	adc	r27, r1
 766:	63 9f       	mul	r22, r19
 768:	aa 27       	eor	r26, r26
 76a:	f0 0d       	add	r31, r0
 76c:	b1 1d       	adc	r27, r1
 76e:	aa 1f       	adc	r26, r26
 770:	64 9f       	mul	r22, r20
 772:	66 27       	eor	r22, r22
 774:	b0 0d       	add	r27, r0
 776:	a1 1d       	adc	r26, r1
 778:	66 1f       	adc	r22, r22
 77a:	82 9f       	mul	r24, r18
 77c:	22 27       	eor	r18, r18
 77e:	b0 0d       	add	r27, r0
 780:	a1 1d       	adc	r26, r1
 782:	62 1f       	adc	r22, r18
 784:	73 9f       	mul	r23, r19
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	62 1f       	adc	r22, r18
 78c:	83 9f       	mul	r24, r19
 78e:	a0 0d       	add	r26, r0
 790:	61 1d       	adc	r22, r1
 792:	22 1f       	adc	r18, r18
 794:	74 9f       	mul	r23, r20
 796:	33 27       	eor	r19, r19
 798:	a0 0d       	add	r26, r0
 79a:	61 1d       	adc	r22, r1
 79c:	23 1f       	adc	r18, r19
 79e:	84 9f       	mul	r24, r20
 7a0:	60 0d       	add	r22, r0
 7a2:	21 1d       	adc	r18, r1
 7a4:	82 2f       	mov	r24, r18
 7a6:	76 2f       	mov	r23, r22
 7a8:	6a 2f       	mov	r22, r26
 7aa:	11 24       	eor	r1, r1
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	50 40       	sbci	r21, 0x00	; 0
 7b0:	9a f0       	brmi	.+38     	; 0x7d8 <__mulsf3_pse+0x88>
 7b2:	f1 f0       	breq	.+60     	; 0x7f0 <__mulsf3_pse+0xa0>
 7b4:	88 23       	and	r24, r24
 7b6:	4a f0       	brmi	.+18     	; 0x7ca <__mulsf3_pse+0x7a>
 7b8:	ee 0f       	add	r30, r30
 7ba:	ff 1f       	adc	r31, r31
 7bc:	bb 1f       	adc	r27, r27
 7be:	66 1f       	adc	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	91 50       	subi	r25, 0x01	; 1
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	a9 f7       	brne	.-22     	; 0x7b4 <__mulsf3_pse+0x64>
 7ca:	9e 3f       	cpi	r25, 0xFE	; 254
 7cc:	51 05       	cpc	r21, r1
 7ce:	80 f0       	brcs	.+32     	; 0x7f0 <__mulsf3_pse+0xa0>
 7d0:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_inf>
 7d4:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	e4 f3       	brlt	.-8      	; 0x7d4 <__mulsf3_pse+0x84>
 7dc:	98 3e       	cpi	r25, 0xE8	; 232
 7de:	d4 f3       	brlt	.-12     	; 0x7d4 <__mulsf3_pse+0x84>
 7e0:	86 95       	lsr	r24
 7e2:	77 95       	ror	r23
 7e4:	67 95       	ror	r22
 7e6:	b7 95       	ror	r27
 7e8:	f7 95       	ror	r31
 7ea:	e7 95       	ror	r30
 7ec:	9f 5f       	subi	r25, 0xFF	; 255
 7ee:	c1 f7       	brne	.-16     	; 0x7e0 <__mulsf3_pse+0x90>
 7f0:	fe 2b       	or	r31, r30
 7f2:	88 0f       	add	r24, r24
 7f4:	91 1d       	adc	r25, r1
 7f6:	96 95       	lsr	r25
 7f8:	87 95       	ror	r24
 7fa:	97 f9       	bld	r25, 7
 7fc:	08 95       	ret

000007fe <__divmodhi4>:
 7fe:	97 fb       	bst	r25, 7
 800:	07 2e       	mov	r0, r23
 802:	16 f4       	brtc	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	00 94       	com	r0
 806:	07 d0       	rcall	.+14     	; 0x816 <__divmodhi4_neg1>
 808:	77 fd       	sbrc	r23, 7
 80a:	09 d0       	rcall	.+18     	; 0x81e <__divmodhi4_neg2>
 80c:	0e 94 35 04 	call	0x86a	; 0x86a <__udivmodhi4>
 810:	07 fc       	sbrc	r0, 7
 812:	05 d0       	rcall	.+10     	; 0x81e <__divmodhi4_neg2>
 814:	3e f4       	brtc	.+14     	; 0x824 <__divmodhi4_exit>

00000816 <__divmodhi4_neg1>:
 816:	90 95       	com	r25
 818:	81 95       	neg	r24
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	08 95       	ret

0000081e <__divmodhi4_neg2>:
 81e:	70 95       	com	r23
 820:	61 95       	neg	r22
 822:	7f 4f       	sbci	r23, 0xFF	; 255

00000824 <__divmodhi4_exit>:
 824:	08 95       	ret

00000826 <__udivmodsi4>:
 826:	a1 e2       	ldi	r26, 0x21	; 33
 828:	1a 2e       	mov	r1, r26
 82a:	aa 1b       	sub	r26, r26
 82c:	bb 1b       	sub	r27, r27
 82e:	fd 01       	movw	r30, r26
 830:	0d c0       	rjmp	.+26     	; 0x84c <__udivmodsi4_ep>

00000832 <__udivmodsi4_loop>:
 832:	aa 1f       	adc	r26, r26
 834:	bb 1f       	adc	r27, r27
 836:	ee 1f       	adc	r30, r30
 838:	ff 1f       	adc	r31, r31
 83a:	a2 17       	cp	r26, r18
 83c:	b3 07       	cpc	r27, r19
 83e:	e4 07       	cpc	r30, r20
 840:	f5 07       	cpc	r31, r21
 842:	20 f0       	brcs	.+8      	; 0x84c <__udivmodsi4_ep>
 844:	a2 1b       	sub	r26, r18
 846:	b3 0b       	sbc	r27, r19
 848:	e4 0b       	sbc	r30, r20
 84a:	f5 0b       	sbc	r31, r21

0000084c <__udivmodsi4_ep>:
 84c:	66 1f       	adc	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	1a 94       	dec	r1
 856:	69 f7       	brne	.-38     	; 0x832 <__udivmodsi4_loop>
 858:	60 95       	com	r22
 85a:	70 95       	com	r23
 85c:	80 95       	com	r24
 85e:	90 95       	com	r25
 860:	9b 01       	movw	r18, r22
 862:	ac 01       	movw	r20, r24
 864:	bd 01       	movw	r22, r26
 866:	cf 01       	movw	r24, r30
 868:	08 95       	ret

0000086a <__udivmodhi4>:
 86a:	aa 1b       	sub	r26, r26
 86c:	bb 1b       	sub	r27, r27
 86e:	51 e1       	ldi	r21, 0x11	; 17
 870:	07 c0       	rjmp	.+14     	; 0x880 <__udivmodhi4_ep>

00000872 <__udivmodhi4_loop>:
 872:	aa 1f       	adc	r26, r26
 874:	bb 1f       	adc	r27, r27
 876:	a6 17       	cp	r26, r22
 878:	b7 07       	cpc	r27, r23
 87a:	10 f0       	brcs	.+4      	; 0x880 <__udivmodhi4_ep>
 87c:	a6 1b       	sub	r26, r22
 87e:	b7 0b       	sbc	r27, r23

00000880 <__udivmodhi4_ep>:
 880:	88 1f       	adc	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	5a 95       	dec	r21
 886:	a9 f7       	brne	.-22     	; 0x872 <__udivmodhi4_loop>
 888:	80 95       	com	r24
 88a:	90 95       	com	r25
 88c:	bc 01       	movw	r22, r24
 88e:	cd 01       	movw	r24, r26
 890:	08 95       	ret

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
