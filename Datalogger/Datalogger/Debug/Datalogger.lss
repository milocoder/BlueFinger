
Datalogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000de  00800100  00800100  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e97  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9b  00000000  00000000  0000126f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005db  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061a  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e3  00000000  00000000  00002b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002ef5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ae 3d       	cpi	r26, 0xDE	; 222
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  b4:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <__vector_18>:
 * Note that the NO_BLOCK attribute is not applied here, so while this is running,
 * all interrupts are blocked.
 *
 */
ISR( CANIT_vect )
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	cf 93       	push	r28
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	// **Save off CANPAGE to prevent application code bugs**
	uint8_t canPage = CANPAGE;
  e0:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
  e4:	87 c0       	rjmp	.+270    	; 0x1f4 <__vector_18+0x138>
	{
		// Point to the Message Object that needs to be serviced
		CANPAGE = CANHPMOB & 0xF0;
  e6:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

		// Service the correct kind of interrupt
		// Transmit Interrupts
		if( CANSTMOB & (1 << TXOK) )
  f0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
  f4:	86 ff       	sbrs	r24, 6
  f6:	0c c0       	rjmp	.+24     	; 0x110 <__vector_18+0x54>
		{
			// Acknowledge the interrupt
			CANSTMOB = 0;
  f8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			// Free up the MOb
			CANCDMOB = 0;
  fc:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

			// Determine the MOb index
			uint8_t mob = (CANPAGE & 0xF0) >> 8;
 100:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

			// Disable interrupts for this MOb
			if( mob < 8 )
			{
				CANIE2 &= ~(1 << mob);
 104:	ee ed       	ldi	r30, 0xDE	; 222
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	80 83       	st	Z, r24
 10e:	72 c0       	rjmp	.+228    	; 0x1f4 <__vector_18+0x138>
			{
				CANIE1 &= ~(1 << (mob-8));
			}
		}
		// Receive Interrupts
		else if ( CANSTMOB & (1 << RXOK) )
 110:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
 114:	85 ff       	sbrs	r24, 5
 116:	62 c0       	rjmp	.+196    	; 0x1dc <__vector_18+0x120>
		{
			// Default to impossible ID
			uint16_t id = 0xFFFF;

			// Load the message data into a free message buffer object
			if( CANCDMOB & (1 << IDE) )
 118:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 11c:	84 ff       	sbrs	r24, 4
 11e:	0e c0       	rjmp	.+28     	; 0x13c <__vector_18+0x80>
			{
				// Message type is CAN 2.0B
				id = (CANIDT4 >> 3) | ((CANIDT3 & 0x7F) << 5); 
 120:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
 124:	86 95       	lsr	r24
 126:	86 95       	lsr	r24
 128:	86 95       	lsr	r24
 12a:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
 12e:	4f 77       	andi	r20, 0x7F	; 127
 130:	90 e2       	ldi	r25, 0x20	; 32
 132:	49 9f       	mul	r20, r25
 134:	a0 01       	movw	r20, r0
 136:	11 24       	eor	r1, r1
 138:	48 2b       	or	r20, r24
 13a:	0f c0       	rjmp	.+30     	; 0x15a <__vector_18+0x9e>
			}
			else
			{
				// Message type is CAN 2.0A
				id = (CANIDT2 >> 5) | (((uint16_t)CANIDT1 << 3));
 13c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
 140:	82 95       	swap	r24
 142:	86 95       	lsr	r24
 144:	87 70       	andi	r24, 0x07	; 7
 146:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	48 2b       	or	r20, r24
			}

			messageBuffer[bufIndex].id = id;
 15a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bufIndex>
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	8b e0       	ldi	r24, 0x0B	; 11
 162:	82 9f       	mul	r24, r18
 164:	f0 01       	movw	r30, r0
 166:	83 9f       	mul	r24, r19
 168:	f0 0d       	add	r31, r0
 16a:	11 24       	eor	r1, r1
 16c:	ee 5f       	subi	r30, 0xFE	; 254
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	40 83       	st	Z, r20
 172:	95 2f       	mov	r25, r21
 174:	97 70       	andi	r25, 0x07	; 7
 176:	81 81       	ldd	r24, Z+1	; 0x01
 178:	88 7f       	andi	r24, 0xF8	; 248
 17a:	89 2b       	or	r24, r25
 17c:	81 83       	std	Z+1, r24	; 0x01

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;
 17e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	82 87       	std	Z+10, r24	; 0x0a

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e c0       	rjmp	.+28     	; 0x1a6 <__vector_18+0xea>
			{
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
 18a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
 18e:	4b e0       	ldi	r20, 0x0B	; 11
 190:	42 9f       	mul	r20, r18
 192:	f0 01       	movw	r30, r0
 194:	43 9f       	mul	r20, r19
 196:	f0 0d       	add	r31, r0
 198:	11 24       	eor	r1, r1
 19a:	ee 5f       	subi	r30, 0xFE	; 254
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	e9 0f       	add	r30, r25
 1a0:	f1 1d       	adc	r31, r1
 1a2:	82 83       	std	Z+2, r24	; 0x02
			messageBuffer[bufIndex].id = id;

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 1a4:	9f 5f       	subi	r25, 0xFF	; 255
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	82 9f       	mul	r24, r18
 1aa:	f0 01       	movw	r30, r0
 1ac:	83 9f       	mul	r24, r19
 1ae:	f0 0d       	add	r31, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	ee 5f       	subi	r30, 0xFE	; 254
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	82 85       	ldd	r24, Z+10	; 0x0a
 1b8:	98 17       	cp	r25, r24
 1ba:	38 f3       	brcs	.-50     	; 0x18a <__vector_18+0xce>
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
			}

			bufIndex = (bufIndex + 1) % MESSAGE_BUFFER_LENGTH;
 1bc:	c9 01       	movw	r24, r18
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	64 e1       	ldi	r22, 0x14	; 20
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 1a 01 	call	0x234	; 0x234 <__divmodhi4>
 1c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufIndex>

			// Acknowledge the interrupt
			CANSTMOB = 0;
 1cc:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			CANCDMOB |= (2 << CONMOB0);
 1d0:	ef ee       	ldi	r30, 0xEF	; 239
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	80 83       	st	Z, r24
 1da:	0c c0       	rjmp	.+24     	; 0x1f4 <__vector_18+0x138>
			
		}
		else if ( CANGIT & ~(1 << CANIT) )
 1dc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	8f 77       	andi	r24, 0x7F	; 127
 1e4:	89 2b       	or	r24, r25
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <__vector_18+0x138>
		{
			// Preserve the last error received
			lastError = CANGIT;
 1e8:	ea ed       	ldi	r30, 0xDA	; 218
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			// Clear the error
			CANGIT = 0;
 1f2:	10 82       	st	Z, r1
	uint8_t canPage = CANPAGE;

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 1f4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
 1f8:	82 95       	swap	r24
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	8f 30       	cpi	r24, 0x0F	; 15
 1fe:	09 f0       	breq	.+2      	; 0x202 <__vector_18+0x146>
 200:	72 cf       	rjmp	.-284    	; 0xe6 <__vector_18+0x2a>
			CANGIT = 0;
		}
	}

	// Restore CANPAGE register to where application code had it before interrupt
	CANPAGE = canPage;
 202:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	cf 91       	pop	r28
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:
		PORTC = 0;
		_delay_ms(25);	
	}
	
	*/
	DDRC = 1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	87 b9       	out	0x07, r24	; 7
	
	
	
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	08 95       	ret

00000234 <__divmodhi4>:
 234:	97 fb       	bst	r25, 7
 236:	07 2e       	mov	r0, r23
 238:	16 f4       	brtc	.+4      	; 0x23e <__divmodhi4+0xa>
 23a:	00 94       	com	r0
 23c:	07 d0       	rcall	.+14     	; 0x24c <__divmodhi4_neg1>
 23e:	77 fd       	sbrc	r23, 7
 240:	09 d0       	rcall	.+18     	; 0x254 <__divmodhi4_neg2>
 242:	0e 94 2e 01 	call	0x25c	; 0x25c <__udivmodhi4>
 246:	07 fc       	sbrc	r0, 7
 248:	05 d0       	rcall	.+10     	; 0x254 <__divmodhi4_neg2>
 24a:	3e f4       	brtc	.+14     	; 0x25a <__divmodhi4_exit>

0000024c <__divmodhi4_neg1>:
 24c:	90 95       	com	r25
 24e:	81 95       	neg	r24
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	08 95       	ret

00000254 <__divmodhi4_neg2>:
 254:	70 95       	com	r23
 256:	61 95       	neg	r22
 258:	7f 4f       	sbci	r23, 0xFF	; 255

0000025a <__divmodhi4_exit>:
 25a:	08 95       	ret

0000025c <__udivmodhi4>:
 25c:	aa 1b       	sub	r26, r26
 25e:	bb 1b       	sub	r27, r27
 260:	51 e1       	ldi	r21, 0x11	; 17
 262:	07 c0       	rjmp	.+14     	; 0x272 <__udivmodhi4_ep>

00000264 <__udivmodhi4_loop>:
 264:	aa 1f       	adc	r26, r26
 266:	bb 1f       	adc	r27, r27
 268:	a6 17       	cp	r26, r22
 26a:	b7 07       	cpc	r27, r23
 26c:	10 f0       	brcs	.+4      	; 0x272 <__udivmodhi4_ep>
 26e:	a6 1b       	sub	r26, r22
 270:	b7 0b       	sbc	r27, r23

00000272 <__udivmodhi4_ep>:
 272:	88 1f       	adc	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	5a 95       	dec	r21
 278:	a9 f7       	brne	.-22     	; 0x264 <__udivmodhi4_loop>
 27a:	80 95       	com	r24
 27c:	90 95       	com	r25
 27e:	bc 01       	movw	r22, r24
 280:	cd 01       	movw	r24, r26
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
