
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000007c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e95  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bff  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000562  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000637  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038e  00000000  00000000  00002f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000032c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  b4:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
    }
}


void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	4b 01       	movw	r8, r22
  d6:	5c 01       	movw	r10, r24
  d8:	8a 01       	movw	r16, r20
	int val1 = (int)value; // pak getal voor de komma
  da:	0e 94 0e 02 	call	0x41c	; 0x41c <__fixsfsi>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
  e2:	07 2e       	mov	r0, r23
  e4:	00 0c       	add	r0, r0
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	0e 94 46 02 	call	0x48c	; 0x48c <__floatsisf>
  ee:	9b 01       	movw	r18, r22
  f0:	ac 01       	movw	r20, r24
  f2:	c5 01       	movw	r24, r10
  f4:	b4 01       	movw	r22, r8
  f6:	0e 94 2f 01 	call	0x25e	; 0x25e <__subsf3>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	48 ec       	ldi	r20, 0xC8	; 200
 100:	52 e4       	ldi	r21, 0x42	; 66
 102:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__mulsf3>
 106:	0e 94 0e 02 	call	0x41c	; 0x41c <__fixsfsi>
 10a:	eb 01       	movw	r28, r22
 10c:	21 96       	adiw	r28, 0x01	; 1
	eeprom_write_byte((uint8_t*)address, val1);
 10e:	6c 2d       	mov	r22, r12
 110:	c8 01       	movw	r24, r16
 112:	0e 94 61 03 	call	0x6c2	; 0x6c2 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 116:	6c 2f       	mov	r22, r28
 118:	c8 01       	movw	r24, r16
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <eeprom_write_byte>
	
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	bf 90       	pop	r11
 132:	af 90       	pop	r10
 134:	9f 90       	pop	r9
 136:	8f 90       	pop	r8
 138:	08 95       	ret

0000013a <main>:

void writeFloatToEEPROM(float value, int address);

int main(void)
{	
	init_millis(16000000UL);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	74 e2       	ldi	r23, 0x24	; 36
 13e:	84 ef       	ldi	r24, 0xF4	; 244
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 06 01 	call	0x20c	; 0x20c <init_millis>
	sei();  // Enable interrupts
 146:	78 94       	sei
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
	
	DDRF = 1;		//output ledje
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		//input hall sensor
 14c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 14e:	18 b8       	out	0x08, r1	; 8
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
 150:	01 e0       	ldi	r16, 0x01	; 1
 152:	10 e0       	ldi	r17, 0x00	; 0
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
 154:	81 2c       	mov	r8, r1
 156:	91 2c       	mov	r9, r1
 158:	54 01       	movw	r10, r8
{	
	init_millis(16000000UL);
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
			
			writeFloatToEEPROM(snelheidKmH, addressHall);
			addressHall += 3;		
			
			
			vorige_status_hall = huidige_status_hall;
 15e:	75 01       	movw	r14, r10
 160:	64 01       	movw	r12, r8
		
	
	/* Replace with your application code */
    while (1) 
    {	
		huidige_status_hall = PINC & (1 << PC0); 
 162:	86 b1       	in	r24, 0x06	; 6
 164:	81 70       	andi	r24, 0x01	; 1
 166:	c8 2f       	mov	r28, r24
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	d8 2f       	mov	r29, r24
		
		if (vorige_status_hall != huidige_status_hall && huidige_status_hall == 1) {
 16c:	2c 17       	cp	r18, r28
 16e:	3d 07       	cpc	r19, r29
 170:	c1 f3       	breq	.-16     	; 0x162 <main+0x28>
 172:	c1 30       	cpi	r28, 0x01	; 1
 174:	d1 05       	cpc	r29, r1
 176:	a9 f7       	brne	.-22     	; 0x162 <main+0x28>
			huidige_tijd_ms = millis(); 
 178:	0e 94 1f 01 	call	0x23e	; 0x23e <millis>
 17c:	4b 01       	movw	r8, r22
 17e:	5c 01       	movw	r10, r24
			unsigned long verschil_tijd_ms = huidige_tijd_ms - vorige_tijd_ms; 
 180:	6c 19       	sub	r22, r12
 182:	7d 09       	sbc	r23, r13
 184:	8e 09       	sbc	r24, r14
 186:	9f 09       	sbc	r25, r15
			
			float afstand_cm = OMTREK_WIEL; 
			float tijd_uren = (float)verschil_tijd_ms / 1000.0 / 3600.0; 
 188:	0e 94 44 02 	call	0x488	; 0x488 <__floatunsisf>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	4a e7       	ldi	r20, 0x7A	; 122
 192:	54 e4       	ldi	r21, 0x44	; 68
 194:	0e 94 9c 01 	call	0x338	; 0x338 <__divsf3>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	41 e6       	ldi	r20, 0x61	; 97
 19e:	55 e4       	ldi	r21, 0x45	; 69
 1a0:	0e 94 9c 01 	call	0x338	; 0x338 <__divsf3>
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
			float snelheidKmH = afstand_cm / 100000.0 / tijd_uren; 
 1a8:	6c e7       	ldi	r22, 0x7C	; 124
 1aa:	72 ef       	ldi	r23, 0xF2	; 242
 1ac:	80 eb       	ldi	r24, 0xB0	; 176
 1ae:	9a e3       	ldi	r25, 0x3A	; 58
 1b0:	0e 94 9c 01 	call	0x338	; 0x338 <__divsf3>
			
			writeFloatToEEPROM(snelheidKmH, addressHall);
 1b4:	a8 01       	movw	r20, r16
 1b6:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			addressHall += 3;		
 1ba:	0d 5f       	subi	r16, 0xFD	; 253
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
			
			
			vorige_status_hall = huidige_status_hall;
 1be:	9e 01       	movw	r18, r28
 1c0:	ce cf       	rjmp	.-100    	; 0x15e <main+0x24>

000001c2 <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
  timer1_millis++;
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1e0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	a1 1d       	adc	r26, r1
 1e8:	b1 1d       	adc	r27, r1
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 20c:	20 e4       	ldi	r18, 0x40	; 64
 20e:	3f e1       	ldi	r19, 0x1F	; 31
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	0e 94 3f 03 	call	0x67e	; 0x67e <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 218:	e1 e8       	ldi	r30, 0x81	; 129
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8a 60       	ori	r24, 0x0A	; 10
 220:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 222:	bb 27       	eor	r27, r27
 224:	a5 2f       	mov	r26, r21
 226:	94 2f       	mov	r25, r20
 228:	83 2f       	mov	r24, r19
 22a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 22e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 232:	ef e6       	ldi	r30, 0x6F	; 111
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	80 83       	st	Z, r24
 23c:	08 95       	ret

0000023e <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 23e:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	09 c0       	rjmp	.+18     	; 0x256 <millis+0x18>
    millis_return = timer1_millis;
 244:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 248:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 250:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	21 11       	cpse	r18, r1
 258:	f5 cf       	rjmp	.-22     	; 0x244 <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 25a:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 25c:	08 95       	ret

0000025e <__subsf3>:
 25e:	50 58       	subi	r21, 0x80	; 128

00000260 <__addsf3>:
 260:	bb 27       	eor	r27, r27
 262:	aa 27       	eor	r26, r26
 264:	0e 94 47 01 	call	0x28e	; 0x28e <__addsf3x>
 268:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_round>
 26c:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_pscA>
 270:	38 f0       	brcs	.+14     	; 0x280 <__addsf3+0x20>
 272:	0e 94 91 02 	call	0x522	; 0x522 <__fp_pscB>
 276:	20 f0       	brcs	.+8      	; 0x280 <__addsf3+0x20>
 278:	39 f4       	brne	.+14     	; 0x288 <__addsf3+0x28>
 27a:	9f 3f       	cpi	r25, 0xFF	; 255
 27c:	19 f4       	brne	.+6      	; 0x284 <__addsf3+0x24>
 27e:	26 f4       	brtc	.+8      	; 0x288 <__addsf3+0x28>
 280:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_nan>
 284:	0e f4       	brtc	.+2      	; 0x288 <__addsf3+0x28>
 286:	e0 95       	com	r30
 288:	e7 fb       	bst	r30, 7
 28a:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_inf>

0000028e <__addsf3x>:
 28e:	e9 2f       	mov	r30, r25
 290:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_split3>
 294:	58 f3       	brcs	.-42     	; 0x26c <__addsf3+0xc>
 296:	ba 17       	cp	r27, r26
 298:	62 07       	cpc	r22, r18
 29a:	73 07       	cpc	r23, r19
 29c:	84 07       	cpc	r24, r20
 29e:	95 07       	cpc	r25, r21
 2a0:	20 f0       	brcs	.+8      	; 0x2aa <__addsf3x+0x1c>
 2a2:	79 f4       	brne	.+30     	; 0x2c2 <__addsf3x+0x34>
 2a4:	a6 f5       	brtc	.+104    	; 0x30e <__addsf3x+0x80>
 2a6:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_zero>
 2aa:	0e f4       	brtc	.+2      	; 0x2ae <__addsf3x+0x20>
 2ac:	e0 95       	com	r30
 2ae:	0b 2e       	mov	r0, r27
 2b0:	ba 2f       	mov	r27, r26
 2b2:	a0 2d       	mov	r26, r0
 2b4:	0b 01       	movw	r0, r22
 2b6:	b9 01       	movw	r22, r18
 2b8:	90 01       	movw	r18, r0
 2ba:	0c 01       	movw	r0, r24
 2bc:	ca 01       	movw	r24, r20
 2be:	a0 01       	movw	r20, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	ff 27       	eor	r31, r31
 2c4:	59 1b       	sub	r21, r25
 2c6:	99 f0       	breq	.+38     	; 0x2ee <__addsf3x+0x60>
 2c8:	59 3f       	cpi	r21, 0xF9	; 249
 2ca:	50 f4       	brcc	.+20     	; 0x2e0 <__addsf3x+0x52>
 2cc:	50 3e       	cpi	r21, 0xE0	; 224
 2ce:	68 f1       	brcs	.+90     	; 0x32a <__addsf3x+0x9c>
 2d0:	1a 16       	cp	r1, r26
 2d2:	f0 40       	sbci	r31, 0x00	; 0
 2d4:	a2 2f       	mov	r26, r18
 2d6:	23 2f       	mov	r18, r19
 2d8:	34 2f       	mov	r19, r20
 2da:	44 27       	eor	r20, r20
 2dc:	58 5f       	subi	r21, 0xF8	; 248
 2de:	f3 cf       	rjmp	.-26     	; 0x2c6 <__addsf3x+0x38>
 2e0:	46 95       	lsr	r20
 2e2:	37 95       	ror	r19
 2e4:	27 95       	ror	r18
 2e6:	a7 95       	ror	r26
 2e8:	f0 40       	sbci	r31, 0x00	; 0
 2ea:	53 95       	inc	r21
 2ec:	c9 f7       	brne	.-14     	; 0x2e0 <__addsf3x+0x52>
 2ee:	7e f4       	brtc	.+30     	; 0x30e <__addsf3x+0x80>
 2f0:	1f 16       	cp	r1, r31
 2f2:	ba 0b       	sbc	r27, r26
 2f4:	62 0b       	sbc	r22, r18
 2f6:	73 0b       	sbc	r23, r19
 2f8:	84 0b       	sbc	r24, r20
 2fa:	ba f0       	brmi	.+46     	; 0x32a <__addsf3x+0x9c>
 2fc:	91 50       	subi	r25, 0x01	; 1
 2fe:	a1 f0       	breq	.+40     	; 0x328 <__addsf3x+0x9a>
 300:	ff 0f       	add	r31, r31
 302:	bb 1f       	adc	r27, r27
 304:	66 1f       	adc	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	88 1f       	adc	r24, r24
 30a:	c2 f7       	brpl	.-16     	; 0x2fc <__addsf3x+0x6e>
 30c:	0e c0       	rjmp	.+28     	; 0x32a <__addsf3x+0x9c>
 30e:	ba 0f       	add	r27, r26
 310:	62 1f       	adc	r22, r18
 312:	73 1f       	adc	r23, r19
 314:	84 1f       	adc	r24, r20
 316:	48 f4       	brcc	.+18     	; 0x32a <__addsf3x+0x9c>
 318:	87 95       	ror	r24
 31a:	77 95       	ror	r23
 31c:	67 95       	ror	r22
 31e:	b7 95       	ror	r27
 320:	f7 95       	ror	r31
 322:	9e 3f       	cpi	r25, 0xFE	; 254
 324:	08 f0       	brcs	.+2      	; 0x328 <__addsf3x+0x9a>
 326:	b0 cf       	rjmp	.-160    	; 0x288 <__addsf3+0x28>
 328:	93 95       	inc	r25
 32a:	88 0f       	add	r24, r24
 32c:	08 f0       	brcs	.+2      	; 0x330 <__addsf3x+0xa2>
 32e:	99 27       	eor	r25, r25
 330:	ee 0f       	add	r30, r30
 332:	97 95       	ror	r25
 334:	87 95       	ror	r24
 336:	08 95       	ret

00000338 <__divsf3>:
 338:	0e 94 b0 01 	call	0x360	; 0x360 <__divsf3x>
 33c:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_round>
 340:	0e 94 91 02 	call	0x522	; 0x522 <__fp_pscB>
 344:	58 f0       	brcs	.+22     	; 0x35c <__divsf3+0x24>
 346:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_pscA>
 34a:	40 f0       	brcs	.+16     	; 0x35c <__divsf3+0x24>
 34c:	29 f4       	brne	.+10     	; 0x358 <__divsf3+0x20>
 34e:	5f 3f       	cpi	r21, 0xFF	; 255
 350:	29 f0       	breq	.+10     	; 0x35c <__divsf3+0x24>
 352:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_inf>
 356:	51 11       	cpse	r21, r1
 358:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
 35c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_nan>

00000360 <__divsf3x>:
 360:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_split3>
 364:	68 f3       	brcs	.-38     	; 0x340 <__divsf3+0x8>

00000366 <__divsf3_pse>:
 366:	99 23       	and	r25, r25
 368:	b1 f3       	breq	.-20     	; 0x356 <__divsf3+0x1e>
 36a:	55 23       	and	r21, r21
 36c:	91 f3       	breq	.-28     	; 0x352 <__divsf3+0x1a>
 36e:	95 1b       	sub	r25, r21
 370:	55 0b       	sbc	r21, r21
 372:	bb 27       	eor	r27, r27
 374:	aa 27       	eor	r26, r26
 376:	62 17       	cp	r22, r18
 378:	73 07       	cpc	r23, r19
 37a:	84 07       	cpc	r24, r20
 37c:	38 f0       	brcs	.+14     	; 0x38c <__divsf3_pse+0x26>
 37e:	9f 5f       	subi	r25, 0xFF	; 255
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	44 1f       	adc	r20, r20
 388:	aa 1f       	adc	r26, r26
 38a:	a9 f3       	breq	.-22     	; 0x376 <__divsf3_pse+0x10>
 38c:	35 d0       	rcall	.+106    	; 0x3f8 <__divsf3_pse+0x92>
 38e:	0e 2e       	mov	r0, r30
 390:	3a f0       	brmi	.+14     	; 0x3a0 <__divsf3_pse+0x3a>
 392:	e0 e8       	ldi	r30, 0x80	; 128
 394:	32 d0       	rcall	.+100    	; 0x3fa <__divsf3_pse+0x94>
 396:	91 50       	subi	r25, 0x01	; 1
 398:	50 40       	sbci	r21, 0x00	; 0
 39a:	e6 95       	lsr	r30
 39c:	00 1c       	adc	r0, r0
 39e:	ca f7       	brpl	.-14     	; 0x392 <__divsf3_pse+0x2c>
 3a0:	2b d0       	rcall	.+86     	; 0x3f8 <__divsf3_pse+0x92>
 3a2:	fe 2f       	mov	r31, r30
 3a4:	29 d0       	rcall	.+82     	; 0x3f8 <__divsf3_pse+0x92>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	bb 1f       	adc	r27, r27
 3ae:	26 17       	cp	r18, r22
 3b0:	37 07       	cpc	r19, r23
 3b2:	48 07       	cpc	r20, r24
 3b4:	ab 07       	cpc	r26, r27
 3b6:	b0 e8       	ldi	r27, 0x80	; 128
 3b8:	09 f0       	breq	.+2      	; 0x3bc <__divsf3_pse+0x56>
 3ba:	bb 0b       	sbc	r27, r27
 3bc:	80 2d       	mov	r24, r0
 3be:	bf 01       	movw	r22, r30
 3c0:	ff 27       	eor	r31, r31
 3c2:	93 58       	subi	r25, 0x83	; 131
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	3a f0       	brmi	.+14     	; 0x3d6 <__divsf3_pse+0x70>
 3c8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ca:	51 05       	cpc	r21, r1
 3cc:	78 f0       	brcs	.+30     	; 0x3ec <__divsf3_pse+0x86>
 3ce:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_inf>
 3d2:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
 3d6:	5f 3f       	cpi	r21, 0xFF	; 255
 3d8:	e4 f3       	brlt	.-8      	; 0x3d2 <__divsf3_pse+0x6c>
 3da:	98 3e       	cpi	r25, 0xE8	; 232
 3dc:	d4 f3       	brlt	.-12     	; 0x3d2 <__divsf3_pse+0x6c>
 3de:	86 95       	lsr	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b7 95       	ror	r27
 3e6:	f7 95       	ror	r31
 3e8:	9f 5f       	subi	r25, 0xFF	; 255
 3ea:	c9 f7       	brne	.-14     	; 0x3de <__divsf3_pse+0x78>
 3ec:	88 0f       	add	r24, r24
 3ee:	91 1d       	adc	r25, r1
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	97 f9       	bld	r25, 7
 3f6:	08 95       	ret
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	88 1f       	adc	r24, r24
 400:	bb 1f       	adc	r27, r27
 402:	62 17       	cp	r22, r18
 404:	73 07       	cpc	r23, r19
 406:	84 07       	cpc	r24, r20
 408:	ba 07       	cpc	r27, r26
 40a:	20 f0       	brcs	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	62 1b       	sub	r22, r18
 40e:	73 0b       	sbc	r23, r19
 410:	84 0b       	sbc	r24, r20
 412:	ba 0b       	sbc	r27, r26
 414:	ee 1f       	adc	r30, r30
 416:	88 f7       	brcc	.-30     	; 0x3fa <__divsf3_pse+0x94>
 418:	e0 95       	com	r30
 41a:	08 95       	ret

0000041c <__fixsfsi>:
 41c:	0e 94 15 02 	call	0x42a	; 0x42a <__fixunssfsi>
 420:	68 94       	set
 422:	b1 11       	cpse	r27, r1
 424:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
 428:	08 95       	ret

0000042a <__fixunssfsi>:
 42a:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_splitA>
 42e:	88 f0       	brcs	.+34     	; 0x452 <__fixunssfsi+0x28>
 430:	9f 57       	subi	r25, 0x7F	; 127
 432:	98 f0       	brcs	.+38     	; 0x45a <__fixunssfsi+0x30>
 434:	b9 2f       	mov	r27, r25
 436:	99 27       	eor	r25, r25
 438:	b7 51       	subi	r27, 0x17	; 23
 43a:	b0 f0       	brcs	.+44     	; 0x468 <__fixunssfsi+0x3e>
 43c:	e1 f0       	breq	.+56     	; 0x476 <__fixunssfsi+0x4c>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	1a f0       	brmi	.+6      	; 0x44e <__fixunssfsi+0x24>
 448:	ba 95       	dec	r27
 44a:	c9 f7       	brne	.-14     	; 0x43e <__fixunssfsi+0x14>
 44c:	14 c0       	rjmp	.+40     	; 0x476 <__fixunssfsi+0x4c>
 44e:	b1 30       	cpi	r27, 0x01	; 1
 450:	91 f0       	breq	.+36     	; 0x476 <__fixunssfsi+0x4c>
 452:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_zero>
 456:	b1 e0       	ldi	r27, 0x01	; 1
 458:	08 95       	ret
 45a:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_zero>
 45e:	67 2f       	mov	r22, r23
 460:	78 2f       	mov	r23, r24
 462:	88 27       	eor	r24, r24
 464:	b8 5f       	subi	r27, 0xF8	; 248
 466:	39 f0       	breq	.+14     	; 0x476 <__fixunssfsi+0x4c>
 468:	b9 3f       	cpi	r27, 0xF9	; 249
 46a:	cc f3       	brlt	.-14     	; 0x45e <__fixunssfsi+0x34>
 46c:	86 95       	lsr	r24
 46e:	77 95       	ror	r23
 470:	67 95       	ror	r22
 472:	b3 95       	inc	r27
 474:	d9 f7       	brne	.-10     	; 0x46c <__fixunssfsi+0x42>
 476:	3e f4       	brtc	.+14     	; 0x486 <__fixunssfsi+0x5c>
 478:	90 95       	com	r25
 47a:	80 95       	com	r24
 47c:	70 95       	com	r23
 47e:	61 95       	neg	r22
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	08 95       	ret

00000488 <__floatunsisf>:
 488:	e8 94       	clt
 48a:	09 c0       	rjmp	.+18     	; 0x49e <__floatsisf+0x12>

0000048c <__floatsisf>:
 48c:	97 fb       	bst	r25, 7
 48e:	3e f4       	brtc	.+14     	; 0x49e <__floatsisf+0x12>
 490:	90 95       	com	r25
 492:	80 95       	com	r24
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	99 23       	and	r25, r25
 4a0:	a9 f0       	breq	.+42     	; 0x4cc <__floatsisf+0x40>
 4a2:	f9 2f       	mov	r31, r25
 4a4:	96 e9       	ldi	r25, 0x96	; 150
 4a6:	bb 27       	eor	r27, r27
 4a8:	93 95       	inc	r25
 4aa:	f6 95       	lsr	r31
 4ac:	87 95       	ror	r24
 4ae:	77 95       	ror	r23
 4b0:	67 95       	ror	r22
 4b2:	b7 95       	ror	r27
 4b4:	f1 11       	cpse	r31, r1
 4b6:	f8 cf       	rjmp	.-16     	; 0x4a8 <__floatsisf+0x1c>
 4b8:	fa f4       	brpl	.+62     	; 0x4f8 <__floatsisf+0x6c>
 4ba:	bb 0f       	add	r27, r27
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__floatsisf+0x36>
 4be:	60 ff       	sbrs	r22, 0
 4c0:	1b c0       	rjmp	.+54     	; 0x4f8 <__floatsisf+0x6c>
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	16 c0       	rjmp	.+44     	; 0x4f8 <__floatsisf+0x6c>
 4cc:	88 23       	and	r24, r24
 4ce:	11 f0       	breq	.+4      	; 0x4d4 <__floatsisf+0x48>
 4d0:	96 e9       	ldi	r25, 0x96	; 150
 4d2:	11 c0       	rjmp	.+34     	; 0x4f6 <__floatsisf+0x6a>
 4d4:	77 23       	and	r23, r23
 4d6:	21 f0       	breq	.+8      	; 0x4e0 <__floatsisf+0x54>
 4d8:	9e e8       	ldi	r25, 0x8E	; 142
 4da:	87 2f       	mov	r24, r23
 4dc:	76 2f       	mov	r23, r22
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <__floatsisf+0x5e>
 4e0:	66 23       	and	r22, r22
 4e2:	71 f0       	breq	.+28     	; 0x500 <__floatsisf+0x74>
 4e4:	96 e8       	ldi	r25, 0x86	; 134
 4e6:	86 2f       	mov	r24, r22
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	2a f0       	brmi	.+10     	; 0x4f8 <__floatsisf+0x6c>
 4ee:	9a 95       	dec	r25
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	da f7       	brpl	.-10     	; 0x4ee <__floatsisf+0x62>
 4f8:	88 0f       	add	r24, r24
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	97 f9       	bld	r25, 7
 500:	08 95       	ret

00000502 <__fp_inf>:
 502:	97 f9       	bld	r25, 7
 504:	9f 67       	ori	r25, 0x7F	; 127
 506:	80 e8       	ldi	r24, 0x80	; 128
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	08 95       	ret

0000050e <__fp_nan>:
 50e:	9f ef       	ldi	r25, 0xFF	; 255
 510:	80 ec       	ldi	r24, 0xC0	; 192
 512:	08 95       	ret

00000514 <__fp_pscA>:
 514:	00 24       	eor	r0, r0
 516:	0a 94       	dec	r0
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	18 06       	cpc	r1, r24
 51e:	09 06       	cpc	r0, r25
 520:	08 95       	ret

00000522 <__fp_pscB>:
 522:	00 24       	eor	r0, r0
 524:	0a 94       	dec	r0
 526:	12 16       	cp	r1, r18
 528:	13 06       	cpc	r1, r19
 52a:	14 06       	cpc	r1, r20
 52c:	05 06       	cpc	r0, r21
 52e:	08 95       	ret

00000530 <__fp_round>:
 530:	09 2e       	mov	r0, r25
 532:	03 94       	inc	r0
 534:	00 0c       	add	r0, r0
 536:	11 f4       	brne	.+4      	; 0x53c <__fp_round+0xc>
 538:	88 23       	and	r24, r24
 53a:	52 f0       	brmi	.+20     	; 0x550 <__fp_round+0x20>
 53c:	bb 0f       	add	r27, r27
 53e:	40 f4       	brcc	.+16     	; 0x550 <__fp_round+0x20>
 540:	bf 2b       	or	r27, r31
 542:	11 f4       	brne	.+4      	; 0x548 <__fp_round+0x18>
 544:	60 ff       	sbrs	r22, 0
 546:	04 c0       	rjmp	.+8      	; 0x550 <__fp_round+0x20>
 548:	6f 5f       	subi	r22, 0xFF	; 255
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__fp_split3>:
 552:	57 fd       	sbrc	r21, 7
 554:	90 58       	subi	r25, 0x80	; 128
 556:	44 0f       	add	r20, r20
 558:	55 1f       	adc	r21, r21
 55a:	59 f0       	breq	.+22     	; 0x572 <__fp_splitA+0x10>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	71 f0       	breq	.+28     	; 0x57c <__fp_splitA+0x1a>
 560:	47 95       	ror	r20

00000562 <__fp_splitA>:
 562:	88 0f       	add	r24, r24
 564:	97 fb       	bst	r25, 7
 566:	99 1f       	adc	r25, r25
 568:	61 f0       	breq	.+24     	; 0x582 <__fp_splitA+0x20>
 56a:	9f 3f       	cpi	r25, 0xFF	; 255
 56c:	79 f0       	breq	.+30     	; 0x58c <__fp_splitA+0x2a>
 56e:	87 95       	ror	r24
 570:	08 95       	ret
 572:	12 16       	cp	r1, r18
 574:	13 06       	cpc	r1, r19
 576:	14 06       	cpc	r1, r20
 578:	55 1f       	adc	r21, r21
 57a:	f2 cf       	rjmp	.-28     	; 0x560 <__fp_split3+0xe>
 57c:	46 95       	lsr	r20
 57e:	f1 df       	rcall	.-30     	; 0x562 <__fp_splitA>
 580:	08 c0       	rjmp	.+16     	; 0x592 <__fp_splitA+0x30>
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	18 06       	cpc	r1, r24
 588:	99 1f       	adc	r25, r25
 58a:	f1 cf       	rjmp	.-30     	; 0x56e <__fp_splitA+0xc>
 58c:	86 95       	lsr	r24
 58e:	71 05       	cpc	r23, r1
 590:	61 05       	cpc	r22, r1
 592:	08 94       	sec
 594:	08 95       	ret

00000596 <__fp_zero>:
 596:	e8 94       	clt

00000598 <__fp_szero>:
 598:	bb 27       	eor	r27, r27
 59a:	66 27       	eor	r22, r22
 59c:	77 27       	eor	r23, r23
 59e:	cb 01       	movw	r24, r22
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret

000005a4 <__mulsf3>:
 5a4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__mulsf3x>
 5a8:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_round>
 5ac:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_pscA>
 5b0:	38 f0       	brcs	.+14     	; 0x5c0 <__mulsf3+0x1c>
 5b2:	0e 94 91 02 	call	0x522	; 0x522 <__fp_pscB>
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__mulsf3+0x1c>
 5b8:	95 23       	and	r25, r21
 5ba:	11 f0       	breq	.+4      	; 0x5c0 <__mulsf3+0x1c>
 5bc:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_inf>
 5c0:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_nan>
 5c4:	11 24       	eor	r1, r1
 5c6:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>

000005ca <__mulsf3x>:
 5ca:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_split3>
 5ce:	70 f3       	brcs	.-36     	; 0x5ac <__mulsf3+0x8>

000005d0 <__mulsf3_pse>:
 5d0:	95 9f       	mul	r25, r21
 5d2:	c1 f3       	breq	.-16     	; 0x5c4 <__mulsf3+0x20>
 5d4:	95 0f       	add	r25, r21
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	55 1f       	adc	r21, r21
 5da:	62 9f       	mul	r22, r18
 5dc:	f0 01       	movw	r30, r0
 5de:	72 9f       	mul	r23, r18
 5e0:	bb 27       	eor	r27, r27
 5e2:	f0 0d       	add	r31, r0
 5e4:	b1 1d       	adc	r27, r1
 5e6:	63 9f       	mul	r22, r19
 5e8:	aa 27       	eor	r26, r26
 5ea:	f0 0d       	add	r31, r0
 5ec:	b1 1d       	adc	r27, r1
 5ee:	aa 1f       	adc	r26, r26
 5f0:	64 9f       	mul	r22, r20
 5f2:	66 27       	eor	r22, r22
 5f4:	b0 0d       	add	r27, r0
 5f6:	a1 1d       	adc	r26, r1
 5f8:	66 1f       	adc	r22, r22
 5fa:	82 9f       	mul	r24, r18
 5fc:	22 27       	eor	r18, r18
 5fe:	b0 0d       	add	r27, r0
 600:	a1 1d       	adc	r26, r1
 602:	62 1f       	adc	r22, r18
 604:	73 9f       	mul	r23, r19
 606:	b0 0d       	add	r27, r0
 608:	a1 1d       	adc	r26, r1
 60a:	62 1f       	adc	r22, r18
 60c:	83 9f       	mul	r24, r19
 60e:	a0 0d       	add	r26, r0
 610:	61 1d       	adc	r22, r1
 612:	22 1f       	adc	r18, r18
 614:	74 9f       	mul	r23, r20
 616:	33 27       	eor	r19, r19
 618:	a0 0d       	add	r26, r0
 61a:	61 1d       	adc	r22, r1
 61c:	23 1f       	adc	r18, r19
 61e:	84 9f       	mul	r24, r20
 620:	60 0d       	add	r22, r0
 622:	21 1d       	adc	r18, r1
 624:	82 2f       	mov	r24, r18
 626:	76 2f       	mov	r23, r22
 628:	6a 2f       	mov	r22, r26
 62a:	11 24       	eor	r1, r1
 62c:	9f 57       	subi	r25, 0x7F	; 127
 62e:	50 40       	sbci	r21, 0x00	; 0
 630:	9a f0       	brmi	.+38     	; 0x658 <__mulsf3_pse+0x88>
 632:	f1 f0       	breq	.+60     	; 0x670 <__mulsf3_pse+0xa0>
 634:	88 23       	and	r24, r24
 636:	4a f0       	brmi	.+18     	; 0x64a <__mulsf3_pse+0x7a>
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	bb 1f       	adc	r27, r27
 63e:	66 1f       	adc	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	91 50       	subi	r25, 0x01	; 1
 646:	50 40       	sbci	r21, 0x00	; 0
 648:	a9 f7       	brne	.-22     	; 0x634 <__mulsf3_pse+0x64>
 64a:	9e 3f       	cpi	r25, 0xFE	; 254
 64c:	51 05       	cpc	r21, r1
 64e:	80 f0       	brcs	.+32     	; 0x670 <__mulsf3_pse+0xa0>
 650:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_inf>
 654:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
 658:	5f 3f       	cpi	r21, 0xFF	; 255
 65a:	e4 f3       	brlt	.-8      	; 0x654 <__mulsf3_pse+0x84>
 65c:	98 3e       	cpi	r25, 0xE8	; 232
 65e:	d4 f3       	brlt	.-12     	; 0x654 <__mulsf3_pse+0x84>
 660:	86 95       	lsr	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b7 95       	ror	r27
 668:	f7 95       	ror	r31
 66a:	e7 95       	ror	r30
 66c:	9f 5f       	subi	r25, 0xFF	; 255
 66e:	c1 f7       	brne	.-16     	; 0x660 <__mulsf3_pse+0x90>
 670:	fe 2b       	or	r31, r30
 672:	88 0f       	add	r24, r24
 674:	91 1d       	adc	r25, r1
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret

0000067e <__udivmodsi4>:
 67e:	a1 e2       	ldi	r26, 0x21	; 33
 680:	1a 2e       	mov	r1, r26
 682:	aa 1b       	sub	r26, r26
 684:	bb 1b       	sub	r27, r27
 686:	fd 01       	movw	r30, r26
 688:	0d c0       	rjmp	.+26     	; 0x6a4 <__udivmodsi4_ep>

0000068a <__udivmodsi4_loop>:
 68a:	aa 1f       	adc	r26, r26
 68c:	bb 1f       	adc	r27, r27
 68e:	ee 1f       	adc	r30, r30
 690:	ff 1f       	adc	r31, r31
 692:	a2 17       	cp	r26, r18
 694:	b3 07       	cpc	r27, r19
 696:	e4 07       	cpc	r30, r20
 698:	f5 07       	cpc	r31, r21
 69a:	20 f0       	brcs	.+8      	; 0x6a4 <__udivmodsi4_ep>
 69c:	a2 1b       	sub	r26, r18
 69e:	b3 0b       	sbc	r27, r19
 6a0:	e4 0b       	sbc	r30, r20
 6a2:	f5 0b       	sbc	r31, r21

000006a4 <__udivmodsi4_ep>:
 6a4:	66 1f       	adc	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	1a 94       	dec	r1
 6ae:	69 f7       	brne	.-38     	; 0x68a <__udivmodsi4_loop>
 6b0:	60 95       	com	r22
 6b2:	70 95       	com	r23
 6b4:	80 95       	com	r24
 6b6:	90 95       	com	r25
 6b8:	9b 01       	movw	r18, r22
 6ba:	ac 01       	movw	r20, r24
 6bc:	bd 01       	movw	r22, r26
 6be:	cf 01       	movw	r24, r30
 6c0:	08 95       	ret

000006c2 <eeprom_write_byte>:
 6c2:	26 2f       	mov	r18, r22

000006c4 <eeprom_write_r18>:
 6c4:	f9 99       	sbic	0x1f, 1	; 31
 6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <eeprom_write_r18>
 6c8:	92 bd       	out	0x22, r25	; 34
 6ca:	81 bd       	out	0x21, r24	; 33
 6cc:	20 bd       	out	0x20, r18	; 32
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	fa 9a       	sbi	0x1f, 2	; 31
 6d4:	f9 9a       	sbi	0x1f, 1	; 31
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
