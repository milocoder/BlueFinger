
Datalogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800100  00800100  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f06  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bee  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fc  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  0000261c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040f  00000000  00000000  00002d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000316a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a6 30       	cpi	r26, 0x06	; 6
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  b4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <initCAN>:

		messageAvailable = 1;
	}

	return messageAvailable;
}
  bc:	e8 ed       	ldi	r30, 0xD8	; 216
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
  d2:	83 e1       	ldi	r24, 0x13	; 19
  d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <initCAN+0x30>
  dc:	98 2f       	mov	r25, r24
  de:	92 95       	swap	r25
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
  e6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	b0 f3       	brcs	.-20     	; 0xdc <initCAN+0x20>
  f0:	78 94       	sei
  f2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
  f6:	80 eb       	ldi	r24, 0xB0	; 176
  f8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
  fc:	e8 ed       	ldi	r30, 0xD8	; 216
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <getFreeMob>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0a c0       	rjmp	.+20     	; 0x120 <getFreeMob+0x18>
 10c:	98 2f       	mov	r25, r24
 10e:	92 95       	swap	r25
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
 116:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 11a:	90 7c       	andi	r25, 0xC0	; 192
 11c:	21 f0       	breq	.+8      	; 0x126 <getFreeMob+0x1e>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	8f 30       	cpi	r24, 0x0F	; 15
 122:	a0 f3       	brcs	.-24     	; 0x10c <getFreeMob+0x4>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	08 95       	ret

00000128 <listenForMessage>:
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	cf 93       	push	r28
 132:	6b 01       	movw	r12, r22
 134:	7c 01       	movw	r14, r24
 136:	c4 2f       	mov	r28, r20
 138:	0e 94 84 00 	call	0x108	; 0x108 <getFreeMob>
 13c:	8f 3f       	cpi	r24, 0xFF	; 255
 13e:	09 f4       	brne	.+2      	; 0x142 <listenForMessage+0x1a>
 140:	50 c0       	rjmp	.+160    	; 0x1e2 <listenForMessage+0xba>
 142:	ed ee       	ldi	r30, 0xED	; 237
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	90 81       	ld	r25, Z
 148:	68 2f       	mov	r22, r24
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	9b 01       	movw	r18, r22
 14e:	22 95       	swap	r18
 150:	32 95       	swap	r19
 152:	30 7f       	andi	r19, 0xF0	; 240
 154:	32 27       	eor	r19, r18
 156:	20 7f       	andi	r18, 0xF0	; 240
 158:	32 27       	eor	r19, r18
 15a:	29 2b       	or	r18, r25
 15c:	20 83       	st	Z, r18
 15e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
 162:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
 166:	9c 2d       	mov	r25, r12
 168:	92 95       	swap	r25
 16a:	99 0f       	add	r25, r25
 16c:	90 7e       	andi	r25, 0xE0	; 224
 16e:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
 172:	68 94       	set
 174:	12 f8       	bld	r1, 2
 176:	f6 94       	lsr	r15
 178:	e7 94       	ror	r14
 17a:	d7 94       	ror	r13
 17c:	c7 94       	ror	r12
 17e:	16 94       	lsr	r1
 180:	d1 f7       	brne	.-12     	; 0x176 <listenForMessage+0x4e>
 182:	c0 92 f3 00 	sts	0x00F3, r12	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
 186:	c9 30       	cpi	r28, 0x09	; 9
 188:	08 f0       	brcs	.+2      	; 0x18c <listenForMessage+0x64>
 18a:	c8 e0       	ldi	r28, 0x08	; 8
 18c:	ef ee       	ldi	r30, 0xEF	; 239
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	40 81       	ld	r20, Z
 192:	4c 2b       	or	r20, r28
 194:	40 83       	st	Z, r20
 196:	88 30       	cpi	r24, 0x08	; 8
 198:	78 f4       	brcc	.+30     	; 0x1b8 <listenForMessage+0x90>
 19a:	ee ed       	ldi	r30, 0xDE	; 222
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	40 81       	ld	r20, Z
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	b9 01       	movw	r22, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <listenForMessage+0x84>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <listenForMessage+0x80>
 1b0:	cb 01       	movw	r24, r22
 1b2:	84 2b       	or	r24, r20
 1b4:	80 83       	st	Z, r24
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <listenForMessage+0xac>
 1b8:	ef ed       	ldi	r30, 0xDF	; 223
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	20 81       	ld	r18, Z
 1be:	68 50       	subi	r22, 0x08	; 8
 1c0:	71 09       	sbc	r23, r1
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <listenForMessage+0xa4>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <listenForMessage+0xa0>
 1d0:	82 2b       	or	r24, r18
 1d2:	80 83       	st	Z, r24
 1d4:	ef ee       	ldi	r30, 0xEF	; 239
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	80 83       	st	Z, r24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <listenForMessage+0xbc>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	cf 91       	pop	r28
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <__vector_18>:
 * Note that the NO_BLOCK attribute is not applied here, so while this is running,
 * all interrupts are blocked.
 *
 */
ISR( CANIT_vect )
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	cf 93       	push	r28
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	// **Save off CANPAGE to prevent application code bugs**
	uint8_t canPage = CANPAGE;
 214:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 218:	8b c0       	rjmp	.+278    	; 0x330 <__vector_18+0x140>
	{
		// Point to the Message Object that needs to be serviced
		CANPAGE = CANHPMOB & 0xF0;
 21a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
 21e:	80 7f       	andi	r24, 0xF0	; 240
 220:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

		// Service the correct kind of interrupt
		// Transmit Interrupts
		if( CANSTMOB & (1 << TXOK) )
 224:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
 228:	86 ff       	sbrs	r24, 6
 22a:	0c c0       	rjmp	.+24     	; 0x244 <__vector_18+0x54>
		{
			// Acknowledge the interrupt
			CANSTMOB = 0;
 22c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			// Free up the MOb
			CANCDMOB = 0;
 230:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

			// Determine the MOb index
			uint8_t mob = (CANPAGE & 0xF0) >> 8;
 234:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

			// Disable interrupts for this MOb
			if( mob < 8 )
			{
				CANIE2 &= ~(1 << mob);
 238:	ee ed       	ldi	r30, 0xDE	; 222
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	80 83       	st	Z, r24
 242:	76 c0       	rjmp	.+236    	; 0x330 <__vector_18+0x140>
			{
				CANIE1 &= ~(1 << (mob-8));
			}
		}
		// Receive Interrupts
		else if ( CANSTMOB & (1 << RXOK) )
 244:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
 248:	85 ff       	sbrs	r24, 5
 24a:	66 c0       	rjmp	.+204    	; 0x318 <__vector_18+0x128>
		{
			// Default to impossible ID
			uint16_t id = 0xFFFF;

			// Load the message data into a free message buffer object
			if( CANCDMOB & (1 << IDE) )
 24c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 250:	84 ff       	sbrs	r24, 4
 252:	0e c0       	rjmp	.+28     	; 0x270 <__vector_18+0x80>
			{
				// Message type is CAN 2.0B
				id = (CANIDT4 >> 3) | ((CANIDT3 & 0x7F) << 5); 
 254:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
 258:	26 95       	lsr	r18
 25a:	26 95       	lsr	r18
 25c:	26 95       	lsr	r18
 25e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
 262:	8f 77       	andi	r24, 0x7F	; 127
 264:	30 e2       	ldi	r19, 0x20	; 32
 266:	83 9f       	mul	r24, r19
 268:	c0 01       	movw	r24, r0
 26a:	11 24       	eor	r1, r1
 26c:	82 2b       	or	r24, r18
 26e:	0f c0       	rjmp	.+30     	; 0x28e <__vector_18+0x9e>
			}
			else
			{
				// Message type is CAN 2.0A
				id = (CANIDT2 >> 5) | (((uint16_t)CANIDT1 << 3));
 270:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
 274:	22 95       	swap	r18
 276:	26 95       	lsr	r18
 278:	27 70       	andi	r18, 0x07	; 7
 27a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	82 2b       	or	r24, r18
			}

			messageBuffer[bufIndex].id = id;
 28e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bufIndex>
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	4d e0       	ldi	r20, 0x0D	; 13
 296:	42 9f       	mul	r20, r18
 298:	f0 01       	movw	r30, r0
 29a:	43 9f       	mul	r20, r19
 29c:	f0 0d       	add	r31, r0
 29e:	11 24       	eor	r1, r1
 2a0:	ee 5f       	subi	r30, 0xFE	; 254
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	a0 e0       	ldi	r26, 0x00	; 0
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	80 83       	st	Z, r24
 2aa:	91 83       	std	Z+1, r25	; 0x01
 2ac:	a2 83       	std	Z+2, r26	; 0x02
 2ae:	9b 2f       	mov	r25, r27
 2b0:	9f 71       	andi	r25, 0x1F	; 31
 2b2:	83 81       	ldd	r24, Z+3	; 0x03
 2b4:	80 7e       	andi	r24, 0xE0	; 224
 2b6:	89 2b       	or	r24, r25
 2b8:	83 83       	std	Z+3, r24	; 0x03

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;
 2ba:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	84 87       	std	Z+12, r24	; 0x0c

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e c0       	rjmp	.+28     	; 0x2e2 <__vector_18+0xf2>
			{
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
 2c6:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
 2ca:	4d e0       	ldi	r20, 0x0D	; 13
 2cc:	42 9f       	mul	r20, r18
 2ce:	f0 01       	movw	r30, r0
 2d0:	43 9f       	mul	r20, r19
 2d2:	f0 0d       	add	r31, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	ee 5f       	subi	r30, 0xFE	; 254
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	e9 0f       	add	r30, r25
 2dc:	f1 1d       	adc	r31, r1
 2de:	84 83       	std	Z+4, r24	; 0x04
			messageBuffer[bufIndex].id = id;

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 2e0:	9f 5f       	subi	r25, 0xFF	; 255
 2e2:	8d e0       	ldi	r24, 0x0D	; 13
 2e4:	82 9f       	mul	r24, r18
 2e6:	f0 01       	movw	r30, r0
 2e8:	83 9f       	mul	r24, r19
 2ea:	f0 0d       	add	r31, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	ee 5f       	subi	r30, 0xFE	; 254
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	84 85       	ldd	r24, Z+12	; 0x0c
 2f4:	98 17       	cp	r25, r24
 2f6:	38 f3       	brcs	.-50     	; 0x2c6 <__vector_18+0xd6>
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
			}

			bufIndex = (bufIndex + 1) % MESSAGE_BUFFER_LENGTH;
 2f8:	c9 01       	movw	r24, r18
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	64 e1       	ldi	r22, 0x14	; 20
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodhi4>
 304:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufIndex>

			// Acknowledge the interrupt
			CANSTMOB = 0;
 308:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			CANCDMOB |= (2 << CONMOB0);
 30c:	ef ee       	ldi	r30, 0xEF	; 239
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	80 68       	ori	r24, 0x80	; 128
 314:	80 83       	st	Z, r24
 316:	0c c0       	rjmp	.+24     	; 0x330 <__vector_18+0x140>
			
		}
		else if ( CANGIT & ~(1 << CANIT) )
 318:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	8f 77       	andi	r24, 0x7F	; 127
 320:	89 2b       	or	r24, r25
 322:	31 f0       	breq	.+12     	; 0x330 <__vector_18+0x140>
		{
			// Preserve the last error received
			lastError = CANGIT;
 324:	ea ed       	ldi	r30, 0xDA	; 218
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			// Clear the error
			CANGIT = 0;
 32e:	10 82       	st	Z, r1
	uint8_t canPage = CANPAGE;

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 330:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
 334:	82 95       	swap	r24
 336:	8f 70       	andi	r24, 0x0F	; 15
 338:	8f 30       	cpi	r24, 0x0F	; 15
 33a:	09 f0       	breq	.+2      	; 0x33e <__vector_18+0x14e>
 33c:	6e cf       	rjmp	.-292    	; 0x21a <__vector_18+0x2a>
			CANGIT = 0;
		}
	}

	// Restore CANPAGE register to where application code had it before interrupt
	CANPAGE = canPage;
 33e:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	cf 91       	pop	r28
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <main>:
	} else 
	{
		PORTC = 0;
	}
	*/
	DDRC = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	87 b9       	out	0x07, r24	; 7
	initCAN();
 36a:	0e 94 5e 00 	call	0xbc	; 0xbc <initCAN>
	while(1)
	{	
		uint8_t hoi = listenForMessage(0x026, 8);
 36e:	48 e0       	ldi	r20, 0x08	; 8
 370:	66 e2       	ldi	r22, 0x26	; 38
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 94 00 	call	0x128	; 0x128 <listenForMessage>
		if(hoi == 1)
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	11 f4       	brne	.+4      	; 0x384 <main+0x1e>
		{
			PORTC = 1;
 380:	88 b9       	out	0x08, r24	; 8
 382:	f5 cf       	rjmp	.-22     	; 0x36e <main+0x8>
		} else
		{
			PORTC = 0;
 384:	18 b8       	out	0x08, r1	; 8
 386:	f3 cf       	rjmp	.-26     	; 0x36e <main+0x8>

00000388 <__divmodhi4>:
 388:	97 fb       	bst	r25, 7
 38a:	07 2e       	mov	r0, r23
 38c:	16 f4       	brtc	.+4      	; 0x392 <__divmodhi4+0xa>
 38e:	00 94       	com	r0
 390:	07 d0       	rcall	.+14     	; 0x3a0 <__divmodhi4_neg1>
 392:	77 fd       	sbrc	r23, 7
 394:	09 d0       	rcall	.+18     	; 0x3a8 <__divmodhi4_neg2>
 396:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__udivmodhi4>
 39a:	07 fc       	sbrc	r0, 7
 39c:	05 d0       	rcall	.+10     	; 0x3a8 <__divmodhi4_neg2>
 39e:	3e f4       	brtc	.+14     	; 0x3ae <__divmodhi4_exit>

000003a0 <__divmodhi4_neg1>:
 3a0:	90 95       	com	r25
 3a2:	81 95       	neg	r24
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	08 95       	ret

000003a8 <__divmodhi4_neg2>:
 3a8:	70 95       	com	r23
 3aa:	61 95       	neg	r22
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255

000003ae <__divmodhi4_exit>:
 3ae:	08 95       	ret

000003b0 <__udivmodhi4>:
 3b0:	aa 1b       	sub	r26, r26
 3b2:	bb 1b       	sub	r27, r27
 3b4:	51 e1       	ldi	r21, 0x11	; 17
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <__udivmodhi4_ep>

000003b8 <__udivmodhi4_loop>:
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	a6 17       	cp	r26, r22
 3be:	b7 07       	cpc	r27, r23
 3c0:	10 f0       	brcs	.+4      	; 0x3c6 <__udivmodhi4_ep>
 3c2:	a6 1b       	sub	r26, r22
 3c4:	b7 0b       	sbc	r27, r23

000003c6 <__udivmodhi4_ep>:
 3c6:	88 1f       	adc	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	5a 95       	dec	r21
 3cc:	a9 f7       	brne	.-22     	; 0x3b8 <__udivmodhi4_loop>
 3ce:	80 95       	com	r24
 3d0:	90 95       	com	r25
 3d2:	bc 01       	movw	r22, r24
 3d4:	cd 01       	movw	r24, r26
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
