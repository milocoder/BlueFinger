
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000710  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000007f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e98  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0e  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000605  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000348  00000000  00000000  00002f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000032ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 98 00 	call	0x130	; 0x130 <main>
  b4:	0c 94 86 03 	jmp	0x70c	; 0x70c <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
		
	}
}

void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	4b 01       	movw	r8, r22
  d2:	5c 01       	movw	r10, r24
  d4:	ea 01       	movw	r28, r20
	int val1 = (int)value; // pak getal voor de komma
  d6:	0e 94 26 02 	call	0x44c	; 0x44c <__fixsfsi>
  da:	6b 01       	movw	r12, r22
  dc:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100); // pak kommagetal en doe keer 100
  de:	07 2e       	mov	r0, r23
  e0:	00 0c       	add	r0, r0
  e2:	88 0b       	sbc	r24, r24
  e4:	99 0b       	sbc	r25, r25
  e6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__floatsisf>
  ea:	9b 01       	movw	r18, r22
  ec:	ac 01       	movw	r20, r24
  ee:	c5 01       	movw	r24, r10
  f0:	b4 01       	movw	r22, r8
  f2:	0e 94 47 01 	call	0x28e	; 0x28e <__subsf3>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	48 ec       	ldi	r20, 0xC8	; 200
  fc:	52 e4       	ldi	r21, 0x42	; 66
  fe:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__mulsf3>
 102:	0e 94 26 02 	call	0x44c	; 0x44c <__fixsfsi>
 106:	b6 2e       	mov	r11, r22
	eeprom_write_byte((uint8_t*)address, val1);
 108:	6c 2d       	mov	r22, r12
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 110:	6b 2d       	mov	r22, r11
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	0e 94 79 03 	call	0x6f2	; 0x6f2 <eeprom_write_byte>
	
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	af 90       	pop	r10
 12a:	9f 90       	pop	r9
 12c:	8f 90       	pop	r8
 12e:	08 95       	ret

00000130 <main>:
// if(!(~PINC & (1 << PC0))) hiermee kijk je of pin hoog is

void writeFloatToEEPROM(float value, int address);

int main(void)
{	
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <main+0x6>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	init_millis(16000000UL);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	74 e2       	ldi	r23, 0x24	; 36
 13e:	84 ef       	ldi	r24, 0xF4	; 244
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 1e 01 	call	0x23c	; 0x23c <init_millis>
	sei();  // Enable interrupts
 146:	78 94       	sei
	
	// initialiseer in- en outputs
	DDRF = 0xFF;	//output led
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		// input hall sensor
 14c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 14e:	18 b8       	out	0x08, r1	; 8
	PORTF = 0;
 150:	11 ba       	out	0x11, r1	; 17
	
	int addressHall = 0;
	float omtrek_wiel = 1.35;
	volatile int rpmaantal = 0;
 152:	1a 82       	std	Y+2, r1	; 0x02
 154:	19 82       	std	Y+1, r1	; 0x01
	int vorigeStatusHall = 0;
	int huidigeStatusHall = 0;
	unsigned long timer = 0; // hierin wordt de huidige tijd gestopt in miliseconden
 156:	c1 2c       	mov	r12, r1
 158:	d1 2c       	mov	r13, r1
 15a:	76 01       	movw	r14, r12
	PORTF = 0;
	
	int addressHall = 0;
	float omtrek_wiel = 1.35;
	volatile int rpmaantal = 0;
	int vorigeStatusHall = 0;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
	DDRF = 0xFF;	//output led
	DDRC = 0;		// input hall sensor
	PORTC = 0;
	PORTF = 0;
	
	int addressHall = 0;
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <main+0x3a>
 166:	8b 2d       	mov	r24, r11
 168:	90 e0       	ldi	r25, 0x00	; 0
	unsigned long timer = 0; // hierin wordt de huidige tijd gestopt in miliseconden
		
	while(1)
	{
		
		huidigeStatusHall = PINC & (1 << PC0); //was eerst: if(!(~PINC & (1 << PC0)))
 16a:	26 b1       	in	r18, 0x06	; 6
		if(huidigeStatusHall) {
 16c:	20 fb       	bst	r18, 0
 16e:	bb 24       	eor	r11, r11
 170:	b0 f8       	bld	r11, 0
 172:	20 ff       	sbrs	r18, 0
 174:	0b c0       	rjmp	.+22     	; 0x18c <main+0x5c>
			if(vorigeStatusHall == 0)
 176:	89 2b       	or	r24, r25
 178:	41 f4       	brne	.+16     	; 0x18a <main+0x5a>
			{
				PORTF = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	81 bb       	out	0x11, r24	; 17
				rpmaantal += 1;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	01 c0       	rjmp	.+2      	; 0x18c <main+0x5c>
				vorigeStatusHall = 1;
			} else {
				PORTF = 0;
 18a:	11 ba       	out	0x11, r1	; 17
			}
		}
		vorigeStatusHall = huidigeStatusHall;
		
		if(millis() - timer >= 300)
 18c:	0e 94 37 01 	call	0x26e	; 0x26e <millis>
 190:	dc 01       	movw	r26, r24
 192:	cb 01       	movw	r24, r22
 194:	8c 19       	sub	r24, r12
 196:	9d 09       	sbc	r25, r13
 198:	ae 09       	sbc	r26, r14
 19a:	bf 09       	sbc	r27, r15
 19c:	8c 32       	cpi	r24, 0x2C	; 44
 19e:	91 40       	sbci	r25, 0x01	; 1
 1a0:	a1 05       	cpc	r26, r1
 1a2:	b1 05       	cpc	r27, r1
 1a4:	00 f3       	brcs	.-64     	; 0x166 <main+0x36>
		{			
			float snelheidms = (float) (omtrek_wiel * rpmaantal) / 3;
 1a6:	69 81       	ldd	r22, Y+1	; 0x01
 1a8:	7a 81       	ldd	r23, Y+2	; 0x02
 1aa:	07 2e       	mov	r0, r23
 1ac:	00 0c       	add	r0, r0
 1ae:	88 0b       	sbc	r24, r24
 1b0:	99 0b       	sbc	r25, r25
 1b2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__floatsisf>
 1b6:	2d ec       	ldi	r18, 0xCD	; 205
 1b8:	3c ec       	ldi	r19, 0xCC	; 204
 1ba:	4c ea       	ldi	r20, 0xAC	; 172
 1bc:	5f e3       	ldi	r21, 0x3F	; 63
 1be:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__mulsf3>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e4       	ldi	r20, 0x40	; 64
 1c8:	50 e4       	ldi	r21, 0x40	; 64
 1ca:	0e 94 b4 01 	call	0x368	; 0x368 <__divsf3>
			float snelheidkmh = snelheidms * 3.6;
 1ce:	26 e6       	ldi	r18, 0x66	; 102
 1d0:	36 e6       	ldi	r19, 0x66	; 102
 1d2:	46 e6       	ldi	r20, 0x66	; 102
 1d4:	50 e4       	ldi	r21, 0x40	; 64
 1d6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__mulsf3>
			writeFloatToEEPROM(snelheidkmh, addressHall);
 1da:	a8 01       	movw	r20, r16
 1dc:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			
			addressHall += 2;
 1e0:	0e 5f       	subi	r16, 0xFE	; 254
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
			rpmaantal = 0; // reset rpm
 1e4:	1a 82       	std	Y+2, r1	; 0x02
 1e6:	19 82       	std	Y+1, r1	; 0x01
			timer = millis(); // reset timer
 1e8:	0e 94 37 01 	call	0x26e	; 0x26e <millis>
 1ec:	6b 01       	movw	r12, r22
 1ee:	7c 01       	movw	r14, r24
 1f0:	ba cf       	rjmp	.-140    	; 0x166 <main+0x36>

000001f2 <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
  timer1_millis++;
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 210:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	a1 1d       	adc	r26, r1
 218:	b1 1d       	adc	r27, r1
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 21e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 222:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 226:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 23c:	20 e4       	ldi	r18, 0x40	; 64
 23e:	3f e1       	ldi	r19, 0x1F	; 31
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	0e 94 57 03 	call	0x6ae	; 0x6ae <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 248:	e1 e8       	ldi	r30, 0x81	; 129
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8a 60       	ori	r24, 0x0A	; 10
 250:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 252:	bb 27       	eor	r27, r27
 254:	a5 2f       	mov	r26, r21
 256:	94 2f       	mov	r25, r20
 258:	83 2f       	mov	r24, r19
 25a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 25e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 262:	ef e6       	ldi	r30, 0x6F	; 111
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 26e:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	09 c0       	rjmp	.+18     	; 0x286 <millis+0x18>
    millis_return = timer1_millis;
 274:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 278:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 27c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 280:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	21 11       	cpse	r18, r1
 288:	f5 cf       	rjmp	.-22     	; 0x274 <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 28a:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 28c:	08 95       	ret

0000028e <__subsf3>:
 28e:	50 58       	subi	r21, 0x80	; 128

00000290 <__addsf3>:
 290:	bb 27       	eor	r27, r27
 292:	aa 27       	eor	r26, r26
 294:	0e 94 5f 01 	call	0x2be	; 0x2be <__addsf3x>
 298:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 29c:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 2a0:	38 f0       	brcs	.+14     	; 0x2b0 <__addsf3+0x20>
 2a2:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <__addsf3+0x20>
 2a8:	39 f4       	brne	.+14     	; 0x2b8 <__addsf3+0x28>
 2aa:	9f 3f       	cpi	r25, 0xFF	; 255
 2ac:	19 f4       	brne	.+6      	; 0x2b4 <__addsf3+0x24>
 2ae:	26 f4       	brtc	.+8      	; 0x2b8 <__addsf3+0x28>
 2b0:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>
 2b4:	0e f4       	brtc	.+2      	; 0x2b8 <__addsf3+0x28>
 2b6:	e0 95       	com	r30
 2b8:	e7 fb       	bst	r30, 7
 2ba:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>

000002be <__addsf3x>:
 2be:	e9 2f       	mov	r30, r25
 2c0:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_split3>
 2c4:	58 f3       	brcs	.-42     	; 0x29c <__addsf3+0xc>
 2c6:	ba 17       	cp	r27, r26
 2c8:	62 07       	cpc	r22, r18
 2ca:	73 07       	cpc	r23, r19
 2cc:	84 07       	cpc	r24, r20
 2ce:	95 07       	cpc	r25, r21
 2d0:	20 f0       	brcs	.+8      	; 0x2da <__addsf3x+0x1c>
 2d2:	79 f4       	brne	.+30     	; 0x2f2 <__addsf3x+0x34>
 2d4:	a6 f5       	brtc	.+104    	; 0x33e <__addsf3x+0x80>
 2d6:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_zero>
 2da:	0e f4       	brtc	.+2      	; 0x2de <__addsf3x+0x20>
 2dc:	e0 95       	com	r30
 2de:	0b 2e       	mov	r0, r27
 2e0:	ba 2f       	mov	r27, r26
 2e2:	a0 2d       	mov	r26, r0
 2e4:	0b 01       	movw	r0, r22
 2e6:	b9 01       	movw	r22, r18
 2e8:	90 01       	movw	r18, r0
 2ea:	0c 01       	movw	r0, r24
 2ec:	ca 01       	movw	r24, r20
 2ee:	a0 01       	movw	r20, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	ff 27       	eor	r31, r31
 2f4:	59 1b       	sub	r21, r25
 2f6:	99 f0       	breq	.+38     	; 0x31e <__addsf3x+0x60>
 2f8:	59 3f       	cpi	r21, 0xF9	; 249
 2fa:	50 f4       	brcc	.+20     	; 0x310 <__addsf3x+0x52>
 2fc:	50 3e       	cpi	r21, 0xE0	; 224
 2fe:	68 f1       	brcs	.+90     	; 0x35a <__addsf3x+0x9c>
 300:	1a 16       	cp	r1, r26
 302:	f0 40       	sbci	r31, 0x00	; 0
 304:	a2 2f       	mov	r26, r18
 306:	23 2f       	mov	r18, r19
 308:	34 2f       	mov	r19, r20
 30a:	44 27       	eor	r20, r20
 30c:	58 5f       	subi	r21, 0xF8	; 248
 30e:	f3 cf       	rjmp	.-26     	; 0x2f6 <__addsf3x+0x38>
 310:	46 95       	lsr	r20
 312:	37 95       	ror	r19
 314:	27 95       	ror	r18
 316:	a7 95       	ror	r26
 318:	f0 40       	sbci	r31, 0x00	; 0
 31a:	53 95       	inc	r21
 31c:	c9 f7       	brne	.-14     	; 0x310 <__addsf3x+0x52>
 31e:	7e f4       	brtc	.+30     	; 0x33e <__addsf3x+0x80>
 320:	1f 16       	cp	r1, r31
 322:	ba 0b       	sbc	r27, r26
 324:	62 0b       	sbc	r22, r18
 326:	73 0b       	sbc	r23, r19
 328:	84 0b       	sbc	r24, r20
 32a:	ba f0       	brmi	.+46     	; 0x35a <__addsf3x+0x9c>
 32c:	91 50       	subi	r25, 0x01	; 1
 32e:	a1 f0       	breq	.+40     	; 0x358 <__addsf3x+0x9a>
 330:	ff 0f       	add	r31, r31
 332:	bb 1f       	adc	r27, r27
 334:	66 1f       	adc	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	c2 f7       	brpl	.-16     	; 0x32c <__addsf3x+0x6e>
 33c:	0e c0       	rjmp	.+28     	; 0x35a <__addsf3x+0x9c>
 33e:	ba 0f       	add	r27, r26
 340:	62 1f       	adc	r22, r18
 342:	73 1f       	adc	r23, r19
 344:	84 1f       	adc	r24, r20
 346:	48 f4       	brcc	.+18     	; 0x35a <__addsf3x+0x9c>
 348:	87 95       	ror	r24
 34a:	77 95       	ror	r23
 34c:	67 95       	ror	r22
 34e:	b7 95       	ror	r27
 350:	f7 95       	ror	r31
 352:	9e 3f       	cpi	r25, 0xFE	; 254
 354:	08 f0       	brcs	.+2      	; 0x358 <__addsf3x+0x9a>
 356:	b0 cf       	rjmp	.-160    	; 0x2b8 <__addsf3+0x28>
 358:	93 95       	inc	r25
 35a:	88 0f       	add	r24, r24
 35c:	08 f0       	brcs	.+2      	; 0x360 <__addsf3x+0xa2>
 35e:	99 27       	eor	r25, r25
 360:	ee 0f       	add	r30, r30
 362:	97 95       	ror	r25
 364:	87 95       	ror	r24
 366:	08 95       	ret

00000368 <__divsf3>:
 368:	0e 94 c8 01 	call	0x390	; 0x390 <__divsf3x>
 36c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 370:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 374:	58 f0       	brcs	.+22     	; 0x38c <__divsf3+0x24>
 376:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 37a:	40 f0       	brcs	.+16     	; 0x38c <__divsf3+0x24>
 37c:	29 f4       	brne	.+10     	; 0x388 <__divsf3+0x20>
 37e:	5f 3f       	cpi	r21, 0xFF	; 255
 380:	29 f0       	breq	.+10     	; 0x38c <__divsf3+0x24>
 382:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 386:	51 11       	cpse	r21, r1
 388:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>
 38c:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>

00000390 <__divsf3x>:
 390:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_split3>
 394:	68 f3       	brcs	.-38     	; 0x370 <__divsf3+0x8>

00000396 <__divsf3_pse>:
 396:	99 23       	and	r25, r25
 398:	b1 f3       	breq	.-20     	; 0x386 <__divsf3+0x1e>
 39a:	55 23       	and	r21, r21
 39c:	91 f3       	breq	.-28     	; 0x382 <__divsf3+0x1a>
 39e:	95 1b       	sub	r25, r21
 3a0:	55 0b       	sbc	r21, r21
 3a2:	bb 27       	eor	r27, r27
 3a4:	aa 27       	eor	r26, r26
 3a6:	62 17       	cp	r22, r18
 3a8:	73 07       	cpc	r23, r19
 3aa:	84 07       	cpc	r24, r20
 3ac:	38 f0       	brcs	.+14     	; 0x3bc <__divsf3_pse+0x26>
 3ae:	9f 5f       	subi	r25, 0xFF	; 255
 3b0:	5f 4f       	sbci	r21, 0xFF	; 255
 3b2:	22 0f       	add	r18, r18
 3b4:	33 1f       	adc	r19, r19
 3b6:	44 1f       	adc	r20, r20
 3b8:	aa 1f       	adc	r26, r26
 3ba:	a9 f3       	breq	.-22     	; 0x3a6 <__divsf3_pse+0x10>
 3bc:	35 d0       	rcall	.+106    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3be:	0e 2e       	mov	r0, r30
 3c0:	3a f0       	brmi	.+14     	; 0x3d0 <__divsf3_pse+0x3a>
 3c2:	e0 e8       	ldi	r30, 0x80	; 128
 3c4:	32 d0       	rcall	.+100    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	50 40       	sbci	r21, 0x00	; 0
 3ca:	e6 95       	lsr	r30
 3cc:	00 1c       	adc	r0, r0
 3ce:	ca f7       	brpl	.-14     	; 0x3c2 <__divsf3_pse+0x2c>
 3d0:	2b d0       	rcall	.+86     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3d2:	fe 2f       	mov	r31, r30
 3d4:	29 d0       	rcall	.+82     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	bb 1f       	adc	r27, r27
 3de:	26 17       	cp	r18, r22
 3e0:	37 07       	cpc	r19, r23
 3e2:	48 07       	cpc	r20, r24
 3e4:	ab 07       	cpc	r26, r27
 3e6:	b0 e8       	ldi	r27, 0x80	; 128
 3e8:	09 f0       	breq	.+2      	; 0x3ec <__divsf3_pse+0x56>
 3ea:	bb 0b       	sbc	r27, r27
 3ec:	80 2d       	mov	r24, r0
 3ee:	bf 01       	movw	r22, r30
 3f0:	ff 27       	eor	r31, r31
 3f2:	93 58       	subi	r25, 0x83	; 131
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	3a f0       	brmi	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f8:	9e 3f       	cpi	r25, 0xFE	; 254
 3fa:	51 05       	cpc	r21, r1
 3fc:	78 f0       	brcs	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fe:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 402:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>
 406:	5f 3f       	cpi	r21, 0xFF	; 255
 408:	e4 f3       	brlt	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	98 3e       	cpi	r25, 0xE8	; 232
 40c:	d4 f3       	brlt	.-12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40e:	86 95       	lsr	r24
 410:	77 95       	ror	r23
 412:	67 95       	ror	r22
 414:	b7 95       	ror	r27
 416:	f7 95       	ror	r31
 418:	9f 5f       	subi	r25, 0xFF	; 255
 41a:	c9 f7       	brne	.-14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 41c:	88 0f       	add	r24, r24
 41e:	91 1d       	adc	r25, r1
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	97 f9       	bld	r25, 7
 426:	08 95       	ret
 428:	e1 e0       	ldi	r30, 0x01	; 1
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	bb 1f       	adc	r27, r27
 432:	62 17       	cp	r22, r18
 434:	73 07       	cpc	r23, r19
 436:	84 07       	cpc	r24, r20
 438:	ba 07       	cpc	r27, r26
 43a:	20 f0       	brcs	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43c:	62 1b       	sub	r22, r18
 43e:	73 0b       	sbc	r23, r19
 440:	84 0b       	sbc	r24, r20
 442:	ba 0b       	sbc	r27, r26
 444:	ee 1f       	adc	r30, r30
 446:	88 f7       	brcc	.-30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 448:	e0 95       	com	r30
 44a:	08 95       	ret

0000044c <__fixsfsi>:
 44c:	0e 94 2d 02 	call	0x45a	; 0x45a <__fixunssfsi>
 450:	68 94       	set
 452:	b1 11       	cpse	r27, r1
 454:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>
 458:	08 95       	ret

0000045a <__fixunssfsi>:
 45a:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_splitA>
 45e:	88 f0       	brcs	.+34     	; 0x482 <__fixunssfsi+0x28>
 460:	9f 57       	subi	r25, 0x7F	; 127
 462:	98 f0       	brcs	.+38     	; 0x48a <__fixunssfsi+0x30>
 464:	b9 2f       	mov	r27, r25
 466:	99 27       	eor	r25, r25
 468:	b7 51       	subi	r27, 0x17	; 23
 46a:	b0 f0       	brcs	.+44     	; 0x498 <__fixunssfsi+0x3e>
 46c:	e1 f0       	breq	.+56     	; 0x4a6 <__fixunssfsi+0x4c>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	1a f0       	brmi	.+6      	; 0x47e <__fixunssfsi+0x24>
 478:	ba 95       	dec	r27
 47a:	c9 f7       	brne	.-14     	; 0x46e <__fixunssfsi+0x14>
 47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__fixunssfsi+0x4c>
 47e:	b1 30       	cpi	r27, 0x01	; 1
 480:	91 f0       	breq	.+36     	; 0x4a6 <__fixunssfsi+0x4c>
 482:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_zero>
 486:	b1 e0       	ldi	r27, 0x01	; 1
 488:	08 95       	ret
 48a:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_zero>
 48e:	67 2f       	mov	r22, r23
 490:	78 2f       	mov	r23, r24
 492:	88 27       	eor	r24, r24
 494:	b8 5f       	subi	r27, 0xF8	; 248
 496:	39 f0       	breq	.+14     	; 0x4a6 <__fixunssfsi+0x4c>
 498:	b9 3f       	cpi	r27, 0xF9	; 249
 49a:	cc f3       	brlt	.-14     	; 0x48e <__fixunssfsi+0x34>
 49c:	86 95       	lsr	r24
 49e:	77 95       	ror	r23
 4a0:	67 95       	ror	r22
 4a2:	b3 95       	inc	r27
 4a4:	d9 f7       	brne	.-10     	; 0x49c <__fixunssfsi+0x42>
 4a6:	3e f4       	brtc	.+14     	; 0x4b6 <__fixunssfsi+0x5c>
 4a8:	90 95       	com	r25
 4aa:	80 95       	com	r24
 4ac:	70 95       	com	r23
 4ae:	61 95       	neg	r22
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <__floatunsisf>:
 4b8:	e8 94       	clt
 4ba:	09 c0       	rjmp	.+18     	; 0x4ce <__floatsisf+0x12>

000004bc <__floatsisf>:
 4bc:	97 fb       	bst	r25, 7
 4be:	3e f4       	brtc	.+14     	; 0x4ce <__floatsisf+0x12>
 4c0:	90 95       	com	r25
 4c2:	80 95       	com	r24
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	99 23       	and	r25, r25
 4d0:	a9 f0       	breq	.+42     	; 0x4fc <__floatsisf+0x40>
 4d2:	f9 2f       	mov	r31, r25
 4d4:	96 e9       	ldi	r25, 0x96	; 150
 4d6:	bb 27       	eor	r27, r27
 4d8:	93 95       	inc	r25
 4da:	f6 95       	lsr	r31
 4dc:	87 95       	ror	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b7 95       	ror	r27
 4e4:	f1 11       	cpse	r31, r1
 4e6:	f8 cf       	rjmp	.-16     	; 0x4d8 <__floatsisf+0x1c>
 4e8:	fa f4       	brpl	.+62     	; 0x528 <__floatsisf+0x6c>
 4ea:	bb 0f       	add	r27, r27
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__floatsisf+0x36>
 4ee:	60 ff       	sbrs	r22, 0
 4f0:	1b c0       	rjmp	.+54     	; 0x528 <__floatsisf+0x6c>
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <__floatsisf+0x6c>
 4fc:	88 23       	and	r24, r24
 4fe:	11 f0       	breq	.+4      	; 0x504 <__floatsisf+0x48>
 500:	96 e9       	ldi	r25, 0x96	; 150
 502:	11 c0       	rjmp	.+34     	; 0x526 <__floatsisf+0x6a>
 504:	77 23       	and	r23, r23
 506:	21 f0       	breq	.+8      	; 0x510 <__floatsisf+0x54>
 508:	9e e8       	ldi	r25, 0x8E	; 142
 50a:	87 2f       	mov	r24, r23
 50c:	76 2f       	mov	r23, r22
 50e:	05 c0       	rjmp	.+10     	; 0x51a <__floatsisf+0x5e>
 510:	66 23       	and	r22, r22
 512:	71 f0       	breq	.+28     	; 0x530 <__floatsisf+0x74>
 514:	96 e8       	ldi	r25, 0x86	; 134
 516:	86 2f       	mov	r24, r22
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	2a f0       	brmi	.+10     	; 0x528 <__floatsisf+0x6c>
 51e:	9a 95       	dec	r25
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	da f7       	brpl	.-10     	; 0x51e <__floatsisf+0x62>
 528:	88 0f       	add	r24, r24
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <__fp_inf>:
 532:	97 f9       	bld	r25, 7
 534:	9f 67       	ori	r25, 0x7F	; 127
 536:	80 e8       	ldi	r24, 0x80	; 128
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	08 95       	ret

0000053e <__fp_nan>:
 53e:	9f ef       	ldi	r25, 0xFF	; 255
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	08 95       	ret

00000544 <__fp_pscA>:
 544:	00 24       	eor	r0, r0
 546:	0a 94       	dec	r0
 548:	16 16       	cp	r1, r22
 54a:	17 06       	cpc	r1, r23
 54c:	18 06       	cpc	r1, r24
 54e:	09 06       	cpc	r0, r25
 550:	08 95       	ret

00000552 <__fp_pscB>:
 552:	00 24       	eor	r0, r0
 554:	0a 94       	dec	r0
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	14 06       	cpc	r1, r20
 55c:	05 06       	cpc	r0, r21
 55e:	08 95       	ret

00000560 <__fp_round>:
 560:	09 2e       	mov	r0, r25
 562:	03 94       	inc	r0
 564:	00 0c       	add	r0, r0
 566:	11 f4       	brne	.+4      	; 0x56c <__fp_round+0xc>
 568:	88 23       	and	r24, r24
 56a:	52 f0       	brmi	.+20     	; 0x580 <__fp_round+0x20>
 56c:	bb 0f       	add	r27, r27
 56e:	40 f4       	brcc	.+16     	; 0x580 <__fp_round+0x20>
 570:	bf 2b       	or	r27, r31
 572:	11 f4       	brne	.+4      	; 0x578 <__fp_round+0x18>
 574:	60 ff       	sbrs	r22, 0
 576:	04 c0       	rjmp	.+8      	; 0x580 <__fp_round+0x20>
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	08 95       	ret

00000582 <__fp_split3>:
 582:	57 fd       	sbrc	r21, 7
 584:	90 58       	subi	r25, 0x80	; 128
 586:	44 0f       	add	r20, r20
 588:	55 1f       	adc	r21, r21
 58a:	59 f0       	breq	.+22     	; 0x5a2 <__fp_splitA+0x10>
 58c:	5f 3f       	cpi	r21, 0xFF	; 255
 58e:	71 f0       	breq	.+28     	; 0x5ac <__fp_splitA+0x1a>
 590:	47 95       	ror	r20

00000592 <__fp_splitA>:
 592:	88 0f       	add	r24, r24
 594:	97 fb       	bst	r25, 7
 596:	99 1f       	adc	r25, r25
 598:	61 f0       	breq	.+24     	; 0x5b2 <__fp_splitA+0x20>
 59a:	9f 3f       	cpi	r25, 0xFF	; 255
 59c:	79 f0       	breq	.+30     	; 0x5bc <__fp_splitA+0x2a>
 59e:	87 95       	ror	r24
 5a0:	08 95       	ret
 5a2:	12 16       	cp	r1, r18
 5a4:	13 06       	cpc	r1, r19
 5a6:	14 06       	cpc	r1, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	f2 cf       	rjmp	.-28     	; 0x590 <__fp_split3+0xe>
 5ac:	46 95       	lsr	r20
 5ae:	f1 df       	rcall	.-30     	; 0x592 <__fp_splitA>
 5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <__fp_splitA+0x30>
 5b2:	16 16       	cp	r1, r22
 5b4:	17 06       	cpc	r1, r23
 5b6:	18 06       	cpc	r1, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	f1 cf       	rjmp	.-30     	; 0x59e <__fp_splitA+0xc>
 5bc:	86 95       	lsr	r24
 5be:	71 05       	cpc	r23, r1
 5c0:	61 05       	cpc	r22, r1
 5c2:	08 94       	sec
 5c4:	08 95       	ret

000005c6 <__fp_zero>:
 5c6:	e8 94       	clt

000005c8 <__fp_szero>:
 5c8:	bb 27       	eor	r27, r27
 5ca:	66 27       	eor	r22, r22
 5cc:	77 27       	eor	r23, r23
 5ce:	cb 01       	movw	r24, r22
 5d0:	97 f9       	bld	r25, 7
 5d2:	08 95       	ret

000005d4 <__mulsf3>:
 5d4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__mulsf3x>
 5d8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 5dc:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 5e0:	38 f0       	brcs	.+14     	; 0x5f0 <__mulsf3+0x1c>
 5e2:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 5e6:	20 f0       	brcs	.+8      	; 0x5f0 <__mulsf3+0x1c>
 5e8:	95 23       	and	r25, r21
 5ea:	11 f0       	breq	.+4      	; 0x5f0 <__mulsf3+0x1c>
 5ec:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 5f0:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>
 5f4:	11 24       	eor	r1, r1
 5f6:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>

000005fa <__mulsf3x>:
 5fa:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_split3>
 5fe:	70 f3       	brcs	.-36     	; 0x5dc <__mulsf3+0x8>

00000600 <__mulsf3_pse>:
 600:	95 9f       	mul	r25, r21
 602:	c1 f3       	breq	.-16     	; 0x5f4 <__mulsf3+0x20>
 604:	95 0f       	add	r25, r21
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	55 1f       	adc	r21, r21
 60a:	62 9f       	mul	r22, r18
 60c:	f0 01       	movw	r30, r0
 60e:	72 9f       	mul	r23, r18
 610:	bb 27       	eor	r27, r27
 612:	f0 0d       	add	r31, r0
 614:	b1 1d       	adc	r27, r1
 616:	63 9f       	mul	r22, r19
 618:	aa 27       	eor	r26, r26
 61a:	f0 0d       	add	r31, r0
 61c:	b1 1d       	adc	r27, r1
 61e:	aa 1f       	adc	r26, r26
 620:	64 9f       	mul	r22, r20
 622:	66 27       	eor	r22, r22
 624:	b0 0d       	add	r27, r0
 626:	a1 1d       	adc	r26, r1
 628:	66 1f       	adc	r22, r22
 62a:	82 9f       	mul	r24, r18
 62c:	22 27       	eor	r18, r18
 62e:	b0 0d       	add	r27, r0
 630:	a1 1d       	adc	r26, r1
 632:	62 1f       	adc	r22, r18
 634:	73 9f       	mul	r23, r19
 636:	b0 0d       	add	r27, r0
 638:	a1 1d       	adc	r26, r1
 63a:	62 1f       	adc	r22, r18
 63c:	83 9f       	mul	r24, r19
 63e:	a0 0d       	add	r26, r0
 640:	61 1d       	adc	r22, r1
 642:	22 1f       	adc	r18, r18
 644:	74 9f       	mul	r23, r20
 646:	33 27       	eor	r19, r19
 648:	a0 0d       	add	r26, r0
 64a:	61 1d       	adc	r22, r1
 64c:	23 1f       	adc	r18, r19
 64e:	84 9f       	mul	r24, r20
 650:	60 0d       	add	r22, r0
 652:	21 1d       	adc	r18, r1
 654:	82 2f       	mov	r24, r18
 656:	76 2f       	mov	r23, r22
 658:	6a 2f       	mov	r22, r26
 65a:	11 24       	eor	r1, r1
 65c:	9f 57       	subi	r25, 0x7F	; 127
 65e:	50 40       	sbci	r21, 0x00	; 0
 660:	9a f0       	brmi	.+38     	; 0x688 <__mulsf3_pse+0x88>
 662:	f1 f0       	breq	.+60     	; 0x6a0 <__mulsf3_pse+0xa0>
 664:	88 23       	and	r24, r24
 666:	4a f0       	brmi	.+18     	; 0x67a <__mulsf3_pse+0x7a>
 668:	ee 0f       	add	r30, r30
 66a:	ff 1f       	adc	r31, r31
 66c:	bb 1f       	adc	r27, r27
 66e:	66 1f       	adc	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	91 50       	subi	r25, 0x01	; 1
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	a9 f7       	brne	.-22     	; 0x664 <__mulsf3_pse+0x64>
 67a:	9e 3f       	cpi	r25, 0xFE	; 254
 67c:	51 05       	cpc	r21, r1
 67e:	80 f0       	brcs	.+32     	; 0x6a0 <__mulsf3_pse+0xa0>
 680:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 684:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>
 688:	5f 3f       	cpi	r21, 0xFF	; 255
 68a:	e4 f3       	brlt	.-8      	; 0x684 <__mulsf3_pse+0x84>
 68c:	98 3e       	cpi	r25, 0xE8	; 232
 68e:	d4 f3       	brlt	.-12     	; 0x684 <__mulsf3_pse+0x84>
 690:	86 95       	lsr	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f7 95       	ror	r31
 69a:	e7 95       	ror	r30
 69c:	9f 5f       	subi	r25, 0xFF	; 255
 69e:	c1 f7       	brne	.-16     	; 0x690 <__mulsf3_pse+0x90>
 6a0:	fe 2b       	or	r31, r30
 6a2:	88 0f       	add	r24, r24
 6a4:	91 1d       	adc	r25, r1
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	97 f9       	bld	r25, 7
 6ac:	08 95       	ret

000006ae <__udivmodsi4>:
 6ae:	a1 e2       	ldi	r26, 0x21	; 33
 6b0:	1a 2e       	mov	r1, r26
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	fd 01       	movw	r30, r26
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <__udivmodsi4_ep>

000006ba <__udivmodsi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	ee 1f       	adc	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	a2 17       	cp	r26, r18
 6c4:	b3 07       	cpc	r27, r19
 6c6:	e4 07       	cpc	r30, r20
 6c8:	f5 07       	cpc	r31, r21
 6ca:	20 f0       	brcs	.+8      	; 0x6d4 <__udivmodsi4_ep>
 6cc:	a2 1b       	sub	r26, r18
 6ce:	b3 0b       	sbc	r27, r19
 6d0:	e4 0b       	sbc	r30, r20
 6d2:	f5 0b       	sbc	r31, r21

000006d4 <__udivmodsi4_ep>:
 6d4:	66 1f       	adc	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	1a 94       	dec	r1
 6de:	69 f7       	brne	.-38     	; 0x6ba <__udivmodsi4_loop>
 6e0:	60 95       	com	r22
 6e2:	70 95       	com	r23
 6e4:	80 95       	com	r24
 6e6:	90 95       	com	r25
 6e8:	9b 01       	movw	r18, r22
 6ea:	ac 01       	movw	r20, r24
 6ec:	bd 01       	movw	r22, r26
 6ee:	cf 01       	movw	r24, r30
 6f0:	08 95       	ret

000006f2 <eeprom_write_byte>:
 6f2:	26 2f       	mov	r18, r22

000006f4 <eeprom_write_r18>:
 6f4:	f9 99       	sbic	0x1f, 1	; 31
 6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <eeprom_write_r18>
 6f8:	92 bd       	out	0x22, r25	; 34
 6fa:	81 bd       	out	0x21, r24	; 33
 6fc:	20 bd       	out	0x20, r18	; 32
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	fa 9a       	sbi	0x1f, 2	; 31
 704:	f9 9a       	sbi	0x1f, 1	; 31
 706:	0f be       	out	0x3f, r0	; 63
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
