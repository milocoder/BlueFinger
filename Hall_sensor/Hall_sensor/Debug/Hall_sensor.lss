
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000770  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000007e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb6  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf2  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038e  00000000  00000000  00002f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  b4:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
    }	
}


void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	4b 01       	movw	r8, r22
  d6:	5c 01       	movw	r10, r24
  d8:	ea 01       	movw	r28, r20
	int val1 = (int)value; // pak getal voor de komma
  da:	0e 94 1c 02 	call	0x438	; 0x438 <__fixsfsi>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
  e2:	07 2e       	mov	r0, r23
  e4:	00 0c       	add	r0, r0
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__floatsisf>
  ee:	9b 01       	movw	r18, r22
  f0:	ac 01       	movw	r20, r24
  f2:	c5 01       	movw	r24, r10
  f4:	b4 01       	movw	r22, r8
  f6:	0e 94 3d 01 	call	0x27a	; 0x27a <__subsf3>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	48 ec       	ldi	r20, 0xC8	; 200
 100:	52 e4       	ldi	r21, 0x42	; 66
 102:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__mulsf3>
 106:	0e 94 1c 02 	call	0x438	; 0x438 <__fixsfsi>
 10a:	8b 01       	movw	r16, r22
 10c:	0f 5f       	subi	r16, 0xFF	; 255
 10e:	1f 4f       	sbci	r17, 0xFF	; 255
	eeprom_write_byte((uint8_t*)address, val1);
 110:	6c 2d       	mov	r22, r12
 112:	ce 01       	movw	r24, r28
 114:	0e 94 6f 03 	call	0x6de	; 0x6de <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 118:	60 2f       	mov	r22, r16
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	0e 94 6f 03 	call	0x6de	; 0x6de <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+2, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	ce 01       	movw	r24, r28
 126:	02 96       	adiw	r24, 0x02	; 2
 128:	0e 94 6f 03 	call	0x6de	; 0x6de <eeprom_write_byte>
	
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	ff 90       	pop	r15
 136:	ef 90       	pop	r14
 138:	df 90       	pop	r13
 13a:	cf 90       	pop	r12
 13c:	bf 90       	pop	r11
 13e:	af 90       	pop	r10
 140:	9f 90       	pop	r9
 142:	8f 90       	pop	r8
 144:	08 95       	ret

00000146 <main>:
void writeFloatToEEPROM(float value, int address);


int main(void)
{	
	init_millis(16000000UL);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	74 e2       	ldi	r23, 0x24	; 36
 14a:	84 ef       	ldi	r24, 0xF4	; 244
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 14 01 	call	0x228	; 0x228 <init_millis>
	sei();  // Enable interrupts
 152:	78 94       	sei
	float huidige_tijd_ms = 0; 
	float vorige_tijd_ms = 0; 	
	
	int addressHall = 0;
	
	DDRF = 1;		//output ledje
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		//input hall sensor
 158:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 15a:	18 b8       	out	0x08, r1	; 8
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	float huidige_tijd_ms = 0; 
	float vorige_tijd_ms = 0; 	
	
	int addressHall = 0;
 15c:	00 e0       	ldi	r16, 0x00	; 0
 15e:	10 e0       	ldi	r17, 0x00	; 0
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	float huidige_tijd_ms = 0; 
	float vorige_tijd_ms = 0; 	
 160:	81 2c       	mov	r8, r1
 162:	91 2c       	mov	r9, r1
 164:	a1 2c       	mov	r10, r1
 166:	b1 2c       	mov	r11, r1
{	
	init_millis(16000000UL);
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 c0       	rjmp	.+2      	; 0x170 <main+0x2a>
 16e:	ce 01       	movw	r24, r28
		
	
	/* Replace with your application code */
    while (1) 
    {	
		huidige_status_hall = PINC & (1 << PC0); 
 170:	26 b1       	in	r18, 0x06	; 6
 172:	21 70       	andi	r18, 0x01	; 1
 174:	c2 2f       	mov	r28, r18
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	d2 2f       	mov	r29, r18
		
		if (vorige_status_hall != huidige_status_hall && huidige_status_hall == 1) {
 17a:	8c 17       	cp	r24, r28
 17c:	9d 07       	cpc	r25, r29
 17e:	b9 f3       	breq	.-18     	; 0x16e <main+0x28>
 180:	c1 30       	cpi	r28, 0x01	; 1
 182:	d1 05       	cpc	r29, r1
 184:	a1 f7       	brne	.-24     	; 0x16e <main+0x28>
		
			huidige_tijd_ms = millis();
 186:	0e 94 2d 01 	call	0x25a	; 0x25a <millis>
 18a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__floatunsisf>
 18e:	c6 2e       	mov	r12, r22
 190:	d7 2e       	mov	r13, r23
 192:	e8 2e       	mov	r14, r24
 194:	f9 2e       	mov	r15, r25
			float verschil_tijd_ms = huidige_tijd_ms - vorige_tijd_ms; 
 196:	28 2d       	mov	r18, r8
 198:	39 2d       	mov	r19, r9
 19a:	4a 2d       	mov	r20, r10
 19c:	5b 2d       	mov	r21, r11
 19e:	0e 94 3d 01 	call	0x27a	; 0x27a <__subsf3>
			float verschil_tijd_s = verschil_tijd_ms / 1000; 
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	4a e7       	ldi	r20, 0x7A	; 122
 1a8:	54 e4       	ldi	r21, 0x44	; 68
 1aa:	0e 94 aa 01 	call	0x354	; 0x354 <__divsf3>
 1ae:	9b 01       	movw	r18, r22
 1b0:	ac 01       	movw	r20, r24
	
					
			
			float snelheidms = OMTREK_WIEL / verschil_tijd_s;
 1b2:	6d ec       	ldi	r22, 0xCD	; 205
 1b4:	7c ec       	ldi	r23, 0xCC	; 204
 1b6:	8c ea       	ldi	r24, 0xAC	; 172
 1b8:	9f e3       	ldi	r25, 0x3F	; 63
 1ba:	0e 94 aa 01 	call	0x354	; 0x354 <__divsf3>
			float snelheidKmH = snelheidms * 3.6;  		
 1be:	26 e6       	ldi	r18, 0x66	; 102
 1c0:	36 e6       	ldi	r19, 0x66	; 102
 1c2:	46 e6       	ldi	r20, 0x66	; 102
 1c4:	50 e4       	ldi	r21, 0x40	; 64
 1c6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__mulsf3>
			writeFloatToEEPROM(snelheidKmH, addressHall);
 1ca:	a8 01       	movw	r20, r16
 1cc:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			addressHall += 3;		
 1d0:	0d 5f       	subi	r16, 0xFD	; 253
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
			
			
			
			vorige_tijd_ms = huidige_tijd_ms; 
 1d4:	8c 2c       	mov	r8, r12
 1d6:	9d 2c       	mov	r9, r13
 1d8:	ae 2c       	mov	r10, r14
 1da:	bf 2c       	mov	r11, r15
 1dc:	c8 cf       	rjmp	.-112    	; 0x16e <main+0x28>

000001de <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
  timer1_millis++;
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1fc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	a1 1d       	adc	r26, r1
 204:	b1 1d       	adc	r27, r1
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 212:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 228:	20 e4       	ldi	r18, 0x40	; 64
 22a:	3f e1       	ldi	r19, 0x1F	; 31
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	0e 94 4d 03 	call	0x69a	; 0x69a <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	8a 60       	ori	r24, 0x0A	; 10
 23c:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 23e:	bb 27       	eor	r27, r27
 240:	a5 2f       	mov	r26, r21
 242:	94 2f       	mov	r25, r20
 244:	83 2f       	mov	r24, r19
 246:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 24a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 24e:	ef e6       	ldi	r30, 0x6F	; 111
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	82 60       	ori	r24, 0x02	; 2
 256:	80 83       	st	Z, r24
 258:	08 95       	ret

0000025a <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 25a:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	09 c0       	rjmp	.+18     	; 0x272 <millis+0x18>
    millis_return = timer1_millis;
 260:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 268:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 26c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	21 11       	cpse	r18, r1
 274:	f5 cf       	rjmp	.-22     	; 0x260 <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 276:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 278:	08 95       	ret

0000027a <__subsf3>:
 27a:	50 58       	subi	r21, 0x80	; 128

0000027c <__addsf3>:
 27c:	bb 27       	eor	r27, r27
 27e:	aa 27       	eor	r26, r26
 280:	0e 94 55 01 	call	0x2aa	; 0x2aa <__addsf3x>
 284:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_round>
 288:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscA>
 28c:	38 f0       	brcs	.+14     	; 0x29c <__addsf3+0x20>
 28e:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_pscB>
 292:	20 f0       	brcs	.+8      	; 0x29c <__addsf3+0x20>
 294:	39 f4       	brne	.+14     	; 0x2a4 <__addsf3+0x28>
 296:	9f 3f       	cpi	r25, 0xFF	; 255
 298:	19 f4       	brne	.+6      	; 0x2a0 <__addsf3+0x24>
 29a:	26 f4       	brtc	.+8      	; 0x2a4 <__addsf3+0x28>
 29c:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_nan>
 2a0:	0e f4       	brtc	.+2      	; 0x2a4 <__addsf3+0x28>
 2a2:	e0 95       	com	r30
 2a4:	e7 fb       	bst	r30, 7
 2a6:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>

000002aa <__addsf3x>:
 2aa:	e9 2f       	mov	r30, r25
 2ac:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_split3>
 2b0:	58 f3       	brcs	.-42     	; 0x288 <__addsf3+0xc>
 2b2:	ba 17       	cp	r27, r26
 2b4:	62 07       	cpc	r22, r18
 2b6:	73 07       	cpc	r23, r19
 2b8:	84 07       	cpc	r24, r20
 2ba:	95 07       	cpc	r25, r21
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <__addsf3x+0x1c>
 2be:	79 f4       	brne	.+30     	; 0x2de <__addsf3x+0x34>
 2c0:	a6 f5       	brtc	.+104    	; 0x32a <__addsf3x+0x80>
 2c2:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_zero>
 2c6:	0e f4       	brtc	.+2      	; 0x2ca <__addsf3x+0x20>
 2c8:	e0 95       	com	r30
 2ca:	0b 2e       	mov	r0, r27
 2cc:	ba 2f       	mov	r27, r26
 2ce:	a0 2d       	mov	r26, r0
 2d0:	0b 01       	movw	r0, r22
 2d2:	b9 01       	movw	r22, r18
 2d4:	90 01       	movw	r18, r0
 2d6:	0c 01       	movw	r0, r24
 2d8:	ca 01       	movw	r24, r20
 2da:	a0 01       	movw	r20, r0
 2dc:	11 24       	eor	r1, r1
 2de:	ff 27       	eor	r31, r31
 2e0:	59 1b       	sub	r21, r25
 2e2:	99 f0       	breq	.+38     	; 0x30a <__addsf3x+0x60>
 2e4:	59 3f       	cpi	r21, 0xF9	; 249
 2e6:	50 f4       	brcc	.+20     	; 0x2fc <__addsf3x+0x52>
 2e8:	50 3e       	cpi	r21, 0xE0	; 224
 2ea:	68 f1       	brcs	.+90     	; 0x346 <__addsf3x+0x9c>
 2ec:	1a 16       	cp	r1, r26
 2ee:	f0 40       	sbci	r31, 0x00	; 0
 2f0:	a2 2f       	mov	r26, r18
 2f2:	23 2f       	mov	r18, r19
 2f4:	34 2f       	mov	r19, r20
 2f6:	44 27       	eor	r20, r20
 2f8:	58 5f       	subi	r21, 0xF8	; 248
 2fa:	f3 cf       	rjmp	.-26     	; 0x2e2 <__addsf3x+0x38>
 2fc:	46 95       	lsr	r20
 2fe:	37 95       	ror	r19
 300:	27 95       	ror	r18
 302:	a7 95       	ror	r26
 304:	f0 40       	sbci	r31, 0x00	; 0
 306:	53 95       	inc	r21
 308:	c9 f7       	brne	.-14     	; 0x2fc <__addsf3x+0x52>
 30a:	7e f4       	brtc	.+30     	; 0x32a <__addsf3x+0x80>
 30c:	1f 16       	cp	r1, r31
 30e:	ba 0b       	sbc	r27, r26
 310:	62 0b       	sbc	r22, r18
 312:	73 0b       	sbc	r23, r19
 314:	84 0b       	sbc	r24, r20
 316:	ba f0       	brmi	.+46     	; 0x346 <__addsf3x+0x9c>
 318:	91 50       	subi	r25, 0x01	; 1
 31a:	a1 f0       	breq	.+40     	; 0x344 <__addsf3x+0x9a>
 31c:	ff 0f       	add	r31, r31
 31e:	bb 1f       	adc	r27, r27
 320:	66 1f       	adc	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	c2 f7       	brpl	.-16     	; 0x318 <__addsf3x+0x6e>
 328:	0e c0       	rjmp	.+28     	; 0x346 <__addsf3x+0x9c>
 32a:	ba 0f       	add	r27, r26
 32c:	62 1f       	adc	r22, r18
 32e:	73 1f       	adc	r23, r19
 330:	84 1f       	adc	r24, r20
 332:	48 f4       	brcc	.+18     	; 0x346 <__addsf3x+0x9c>
 334:	87 95       	ror	r24
 336:	77 95       	ror	r23
 338:	67 95       	ror	r22
 33a:	b7 95       	ror	r27
 33c:	f7 95       	ror	r31
 33e:	9e 3f       	cpi	r25, 0xFE	; 254
 340:	08 f0       	brcs	.+2      	; 0x344 <__addsf3x+0x9a>
 342:	b0 cf       	rjmp	.-160    	; 0x2a4 <__addsf3+0x28>
 344:	93 95       	inc	r25
 346:	88 0f       	add	r24, r24
 348:	08 f0       	brcs	.+2      	; 0x34c <__addsf3x+0xa2>
 34a:	99 27       	eor	r25, r25
 34c:	ee 0f       	add	r30, r30
 34e:	97 95       	ror	r25
 350:	87 95       	ror	r24
 352:	08 95       	ret

00000354 <__divsf3>:
 354:	0e 94 be 01 	call	0x37c	; 0x37c <__divsf3x>
 358:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_round>
 35c:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_pscB>
 360:	58 f0       	brcs	.+22     	; 0x378 <__divsf3+0x24>
 362:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscA>
 366:	40 f0       	brcs	.+16     	; 0x378 <__divsf3+0x24>
 368:	29 f4       	brne	.+10     	; 0x374 <__divsf3+0x20>
 36a:	5f 3f       	cpi	r21, 0xFF	; 255
 36c:	29 f0       	breq	.+10     	; 0x378 <__divsf3+0x24>
 36e:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 372:	51 11       	cpse	r21, r1
 374:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>
 378:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_nan>

0000037c <__divsf3x>:
 37c:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_split3>
 380:	68 f3       	brcs	.-38     	; 0x35c <__divsf3+0x8>

00000382 <__divsf3_pse>:
 382:	99 23       	and	r25, r25
 384:	b1 f3       	breq	.-20     	; 0x372 <__divsf3+0x1e>
 386:	55 23       	and	r21, r21
 388:	91 f3       	breq	.-28     	; 0x36e <__divsf3+0x1a>
 38a:	95 1b       	sub	r25, r21
 38c:	55 0b       	sbc	r21, r21
 38e:	bb 27       	eor	r27, r27
 390:	aa 27       	eor	r26, r26
 392:	62 17       	cp	r22, r18
 394:	73 07       	cpc	r23, r19
 396:	84 07       	cpc	r24, r20
 398:	38 f0       	brcs	.+14     	; 0x3a8 <__divsf3_pse+0x26>
 39a:	9f 5f       	subi	r25, 0xFF	; 255
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	44 1f       	adc	r20, r20
 3a4:	aa 1f       	adc	r26, r26
 3a6:	a9 f3       	breq	.-22     	; 0x392 <__divsf3_pse+0x10>
 3a8:	35 d0       	rcall	.+106    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3aa:	0e 2e       	mov	r0, r30
 3ac:	3a f0       	brmi	.+14     	; 0x3bc <__divsf3_pse+0x3a>
 3ae:	e0 e8       	ldi	r30, 0x80	; 128
 3b0:	32 d0       	rcall	.+100    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3b2:	91 50       	subi	r25, 0x01	; 1
 3b4:	50 40       	sbci	r21, 0x00	; 0
 3b6:	e6 95       	lsr	r30
 3b8:	00 1c       	adc	r0, r0
 3ba:	ca f7       	brpl	.-14     	; 0x3ae <__divsf3_pse+0x2c>
 3bc:	2b d0       	rcall	.+86     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3be:	fe 2f       	mov	r31, r30
 3c0:	29 d0       	rcall	.+82     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	88 1f       	adc	r24, r24
 3c8:	bb 1f       	adc	r27, r27
 3ca:	26 17       	cp	r18, r22
 3cc:	37 07       	cpc	r19, r23
 3ce:	48 07       	cpc	r20, r24
 3d0:	ab 07       	cpc	r26, r27
 3d2:	b0 e8       	ldi	r27, 0x80	; 128
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <__divsf3_pse+0x56>
 3d6:	bb 0b       	sbc	r27, r27
 3d8:	80 2d       	mov	r24, r0
 3da:	bf 01       	movw	r22, r30
 3dc:	ff 27       	eor	r31, r31
 3de:	93 58       	subi	r25, 0x83	; 131
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	3a f0       	brmi	.+14     	; 0x3f2 <__divsf3_pse+0x70>
 3e4:	9e 3f       	cpi	r25, 0xFE	; 254
 3e6:	51 05       	cpc	r21, r1
 3e8:	78 f0       	brcs	.+30     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ea:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 3ee:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>
 3f2:	5f 3f       	cpi	r21, 0xFF	; 255
 3f4:	e4 f3       	brlt	.-8      	; 0x3ee <__divsf3_pse+0x6c>
 3f6:	98 3e       	cpi	r25, 0xE8	; 232
 3f8:	d4 f3       	brlt	.-12     	; 0x3ee <__divsf3_pse+0x6c>
 3fa:	86 95       	lsr	r24
 3fc:	77 95       	ror	r23
 3fe:	67 95       	ror	r22
 400:	b7 95       	ror	r27
 402:	f7 95       	ror	r31
 404:	9f 5f       	subi	r25, 0xFF	; 255
 406:	c9 f7       	brne	.-14     	; 0x3fa <__divsf3_pse+0x78>
 408:	88 0f       	add	r24, r24
 40a:	91 1d       	adc	r25, r1
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret
 414:	e1 e0       	ldi	r30, 0x01	; 1
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	bb 1f       	adc	r27, r27
 41e:	62 17       	cp	r22, r18
 420:	73 07       	cpc	r23, r19
 422:	84 07       	cpc	r24, r20
 424:	ba 07       	cpc	r27, r26
 426:	20 f0       	brcs	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 428:	62 1b       	sub	r22, r18
 42a:	73 0b       	sbc	r23, r19
 42c:	84 0b       	sbc	r24, r20
 42e:	ba 0b       	sbc	r27, r26
 430:	ee 1f       	adc	r30, r30
 432:	88 f7       	brcc	.-30     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 434:	e0 95       	com	r30
 436:	08 95       	ret

00000438 <__fixsfsi>:
 438:	0e 94 23 02 	call	0x446	; 0x446 <__fixunssfsi>
 43c:	68 94       	set
 43e:	b1 11       	cpse	r27, r1
 440:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>
 444:	08 95       	ret

00000446 <__fixunssfsi>:
 446:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_splitA>
 44a:	88 f0       	brcs	.+34     	; 0x46e <__fixunssfsi+0x28>
 44c:	9f 57       	subi	r25, 0x7F	; 127
 44e:	98 f0       	brcs	.+38     	; 0x476 <__fixunssfsi+0x30>
 450:	b9 2f       	mov	r27, r25
 452:	99 27       	eor	r25, r25
 454:	b7 51       	subi	r27, 0x17	; 23
 456:	b0 f0       	brcs	.+44     	; 0x484 <__fixunssfsi+0x3e>
 458:	e1 f0       	breq	.+56     	; 0x492 <__fixunssfsi+0x4c>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	1a f0       	brmi	.+6      	; 0x46a <__fixunssfsi+0x24>
 464:	ba 95       	dec	r27
 466:	c9 f7       	brne	.-14     	; 0x45a <__fixunssfsi+0x14>
 468:	14 c0       	rjmp	.+40     	; 0x492 <__fixunssfsi+0x4c>
 46a:	b1 30       	cpi	r27, 0x01	; 1
 46c:	91 f0       	breq	.+36     	; 0x492 <__fixunssfsi+0x4c>
 46e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_zero>
 472:	b1 e0       	ldi	r27, 0x01	; 1
 474:	08 95       	ret
 476:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_zero>
 47a:	67 2f       	mov	r22, r23
 47c:	78 2f       	mov	r23, r24
 47e:	88 27       	eor	r24, r24
 480:	b8 5f       	subi	r27, 0xF8	; 248
 482:	39 f0       	breq	.+14     	; 0x492 <__fixunssfsi+0x4c>
 484:	b9 3f       	cpi	r27, 0xF9	; 249
 486:	cc f3       	brlt	.-14     	; 0x47a <__fixunssfsi+0x34>
 488:	86 95       	lsr	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b3 95       	inc	r27
 490:	d9 f7       	brne	.-10     	; 0x488 <__fixunssfsi+0x42>
 492:	3e f4       	brtc	.+14     	; 0x4a2 <__fixunssfsi+0x5c>
 494:	90 95       	com	r25
 496:	80 95       	com	r24
 498:	70 95       	com	r23
 49a:	61 95       	neg	r22
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	08 95       	ret

000004a4 <__floatunsisf>:
 4a4:	e8 94       	clt
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <__floatsisf+0x12>

000004a8 <__floatsisf>:
 4a8:	97 fb       	bst	r25, 7
 4aa:	3e f4       	brtc	.+14     	; 0x4ba <__floatsisf+0x12>
 4ac:	90 95       	com	r25
 4ae:	80 95       	com	r24
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	8f 4f       	sbci	r24, 0xFF	; 255
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	99 23       	and	r25, r25
 4bc:	a9 f0       	breq	.+42     	; 0x4e8 <__floatsisf+0x40>
 4be:	f9 2f       	mov	r31, r25
 4c0:	96 e9       	ldi	r25, 0x96	; 150
 4c2:	bb 27       	eor	r27, r27
 4c4:	93 95       	inc	r25
 4c6:	f6 95       	lsr	r31
 4c8:	87 95       	ror	r24
 4ca:	77 95       	ror	r23
 4cc:	67 95       	ror	r22
 4ce:	b7 95       	ror	r27
 4d0:	f1 11       	cpse	r31, r1
 4d2:	f8 cf       	rjmp	.-16     	; 0x4c4 <__floatsisf+0x1c>
 4d4:	fa f4       	brpl	.+62     	; 0x514 <__floatsisf+0x6c>
 4d6:	bb 0f       	add	r27, r27
 4d8:	11 f4       	brne	.+4      	; 0x4de <__floatsisf+0x36>
 4da:	60 ff       	sbrs	r22, 0
 4dc:	1b c0       	rjmp	.+54     	; 0x514 <__floatsisf+0x6c>
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	16 c0       	rjmp	.+44     	; 0x514 <__floatsisf+0x6c>
 4e8:	88 23       	and	r24, r24
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <__floatsisf+0x48>
 4ec:	96 e9       	ldi	r25, 0x96	; 150
 4ee:	11 c0       	rjmp	.+34     	; 0x512 <__floatsisf+0x6a>
 4f0:	77 23       	and	r23, r23
 4f2:	21 f0       	breq	.+8      	; 0x4fc <__floatsisf+0x54>
 4f4:	9e e8       	ldi	r25, 0x8E	; 142
 4f6:	87 2f       	mov	r24, r23
 4f8:	76 2f       	mov	r23, r22
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <__floatsisf+0x5e>
 4fc:	66 23       	and	r22, r22
 4fe:	71 f0       	breq	.+28     	; 0x51c <__floatsisf+0x74>
 500:	96 e8       	ldi	r25, 0x86	; 134
 502:	86 2f       	mov	r24, r22
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	2a f0       	brmi	.+10     	; 0x514 <__floatsisf+0x6c>
 50a:	9a 95       	dec	r25
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	da f7       	brpl	.-10     	; 0x50a <__floatsisf+0x62>
 514:	88 0f       	add	r24, r24
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__fp_inf>:
 51e:	97 f9       	bld	r25, 7
 520:	9f 67       	ori	r25, 0x7F	; 127
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	08 95       	ret

0000052a <__fp_nan>:
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	08 95       	ret

00000530 <__fp_pscA>:
 530:	00 24       	eor	r0, r0
 532:	0a 94       	dec	r0
 534:	16 16       	cp	r1, r22
 536:	17 06       	cpc	r1, r23
 538:	18 06       	cpc	r1, r24
 53a:	09 06       	cpc	r0, r25
 53c:	08 95       	ret

0000053e <__fp_pscB>:
 53e:	00 24       	eor	r0, r0
 540:	0a 94       	dec	r0
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	05 06       	cpc	r0, r21
 54a:	08 95       	ret

0000054c <__fp_round>:
 54c:	09 2e       	mov	r0, r25
 54e:	03 94       	inc	r0
 550:	00 0c       	add	r0, r0
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0xc>
 554:	88 23       	and	r24, r24
 556:	52 f0       	brmi	.+20     	; 0x56c <__fp_round+0x20>
 558:	bb 0f       	add	r27, r27
 55a:	40 f4       	brcc	.+16     	; 0x56c <__fp_round+0x20>
 55c:	bf 2b       	or	r27, r31
 55e:	11 f4       	brne	.+4      	; 0x564 <__fp_round+0x18>
 560:	60 ff       	sbrs	r22, 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <__fp_round+0x20>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__fp_split3>:
 56e:	57 fd       	sbrc	r21, 7
 570:	90 58       	subi	r25, 0x80	; 128
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	59 f0       	breq	.+22     	; 0x58e <__fp_splitA+0x10>
 578:	5f 3f       	cpi	r21, 0xFF	; 255
 57a:	71 f0       	breq	.+28     	; 0x598 <__fp_splitA+0x1a>
 57c:	47 95       	ror	r20

0000057e <__fp_splitA>:
 57e:	88 0f       	add	r24, r24
 580:	97 fb       	bst	r25, 7
 582:	99 1f       	adc	r25, r25
 584:	61 f0       	breq	.+24     	; 0x59e <__fp_splitA+0x20>
 586:	9f 3f       	cpi	r25, 0xFF	; 255
 588:	79 f0       	breq	.+30     	; 0x5a8 <__fp_splitA+0x2a>
 58a:	87 95       	ror	r24
 58c:	08 95       	ret
 58e:	12 16       	cp	r1, r18
 590:	13 06       	cpc	r1, r19
 592:	14 06       	cpc	r1, r20
 594:	55 1f       	adc	r21, r21
 596:	f2 cf       	rjmp	.-28     	; 0x57c <__fp_split3+0xe>
 598:	46 95       	lsr	r20
 59a:	f1 df       	rcall	.-30     	; 0x57e <__fp_splitA>
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__fp_splitA+0x30>
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	f1 cf       	rjmp	.-30     	; 0x58a <__fp_splitA+0xc>
 5a8:	86 95       	lsr	r24
 5aa:	71 05       	cpc	r23, r1
 5ac:	61 05       	cpc	r22, r1
 5ae:	08 94       	sec
 5b0:	08 95       	ret

000005b2 <__fp_zero>:
 5b2:	e8 94       	clt

000005b4 <__fp_szero>:
 5b4:	bb 27       	eor	r27, r27
 5b6:	66 27       	eor	r22, r22
 5b8:	77 27       	eor	r23, r23
 5ba:	cb 01       	movw	r24, r22
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__mulsf3>:
 5c0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__mulsf3x>
 5c4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_round>
 5c8:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscA>
 5cc:	38 f0       	brcs	.+14     	; 0x5dc <__mulsf3+0x1c>
 5ce:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_pscB>
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__mulsf3+0x1c>
 5d4:	95 23       	and	r25, r21
 5d6:	11 f0       	breq	.+4      	; 0x5dc <__mulsf3+0x1c>
 5d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 5dc:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_nan>
 5e0:	11 24       	eor	r1, r1
 5e2:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>

000005e6 <__mulsf3x>:
 5e6:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_split3>
 5ea:	70 f3       	brcs	.-36     	; 0x5c8 <__mulsf3+0x8>

000005ec <__mulsf3_pse>:
 5ec:	95 9f       	mul	r25, r21
 5ee:	c1 f3       	breq	.-16     	; 0x5e0 <__mulsf3+0x20>
 5f0:	95 0f       	add	r25, r21
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	55 1f       	adc	r21, r21
 5f6:	62 9f       	mul	r22, r18
 5f8:	f0 01       	movw	r30, r0
 5fa:	72 9f       	mul	r23, r18
 5fc:	bb 27       	eor	r27, r27
 5fe:	f0 0d       	add	r31, r0
 600:	b1 1d       	adc	r27, r1
 602:	63 9f       	mul	r22, r19
 604:	aa 27       	eor	r26, r26
 606:	f0 0d       	add	r31, r0
 608:	b1 1d       	adc	r27, r1
 60a:	aa 1f       	adc	r26, r26
 60c:	64 9f       	mul	r22, r20
 60e:	66 27       	eor	r22, r22
 610:	b0 0d       	add	r27, r0
 612:	a1 1d       	adc	r26, r1
 614:	66 1f       	adc	r22, r22
 616:	82 9f       	mul	r24, r18
 618:	22 27       	eor	r18, r18
 61a:	b0 0d       	add	r27, r0
 61c:	a1 1d       	adc	r26, r1
 61e:	62 1f       	adc	r22, r18
 620:	73 9f       	mul	r23, r19
 622:	b0 0d       	add	r27, r0
 624:	a1 1d       	adc	r26, r1
 626:	62 1f       	adc	r22, r18
 628:	83 9f       	mul	r24, r19
 62a:	a0 0d       	add	r26, r0
 62c:	61 1d       	adc	r22, r1
 62e:	22 1f       	adc	r18, r18
 630:	74 9f       	mul	r23, r20
 632:	33 27       	eor	r19, r19
 634:	a0 0d       	add	r26, r0
 636:	61 1d       	adc	r22, r1
 638:	23 1f       	adc	r18, r19
 63a:	84 9f       	mul	r24, r20
 63c:	60 0d       	add	r22, r0
 63e:	21 1d       	adc	r18, r1
 640:	82 2f       	mov	r24, r18
 642:	76 2f       	mov	r23, r22
 644:	6a 2f       	mov	r22, r26
 646:	11 24       	eor	r1, r1
 648:	9f 57       	subi	r25, 0x7F	; 127
 64a:	50 40       	sbci	r21, 0x00	; 0
 64c:	9a f0       	brmi	.+38     	; 0x674 <__mulsf3_pse+0x88>
 64e:	f1 f0       	breq	.+60     	; 0x68c <__mulsf3_pse+0xa0>
 650:	88 23       	and	r24, r24
 652:	4a f0       	brmi	.+18     	; 0x666 <__mulsf3_pse+0x7a>
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	bb 1f       	adc	r27, r27
 65a:	66 1f       	adc	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	91 50       	subi	r25, 0x01	; 1
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	a9 f7       	brne	.-22     	; 0x650 <__mulsf3_pse+0x64>
 666:	9e 3f       	cpi	r25, 0xFE	; 254
 668:	51 05       	cpc	r21, r1
 66a:	80 f0       	brcs	.+32     	; 0x68c <__mulsf3_pse+0xa0>
 66c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 670:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>
 674:	5f 3f       	cpi	r21, 0xFF	; 255
 676:	e4 f3       	brlt	.-8      	; 0x670 <__mulsf3_pse+0x84>
 678:	98 3e       	cpi	r25, 0xE8	; 232
 67a:	d4 f3       	brlt	.-12     	; 0x670 <__mulsf3_pse+0x84>
 67c:	86 95       	lsr	r24
 67e:	77 95       	ror	r23
 680:	67 95       	ror	r22
 682:	b7 95       	ror	r27
 684:	f7 95       	ror	r31
 686:	e7 95       	ror	r30
 688:	9f 5f       	subi	r25, 0xFF	; 255
 68a:	c1 f7       	brne	.-16     	; 0x67c <__mulsf3_pse+0x90>
 68c:	fe 2b       	or	r31, r30
 68e:	88 0f       	add	r24, r24
 690:	91 1d       	adc	r25, r1
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret

0000069a <__udivmodsi4>:
 69a:	a1 e2       	ldi	r26, 0x21	; 33
 69c:	1a 2e       	mov	r1, r26
 69e:	aa 1b       	sub	r26, r26
 6a0:	bb 1b       	sub	r27, r27
 6a2:	fd 01       	movw	r30, r26
 6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <__udivmodsi4_ep>

000006a6 <__udivmodsi4_loop>:
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	ee 1f       	adc	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	a2 17       	cp	r26, r18
 6b0:	b3 07       	cpc	r27, r19
 6b2:	e4 07       	cpc	r30, r20
 6b4:	f5 07       	cpc	r31, r21
 6b6:	20 f0       	brcs	.+8      	; 0x6c0 <__udivmodsi4_ep>
 6b8:	a2 1b       	sub	r26, r18
 6ba:	b3 0b       	sbc	r27, r19
 6bc:	e4 0b       	sbc	r30, r20
 6be:	f5 0b       	sbc	r31, r21

000006c0 <__udivmodsi4_ep>:
 6c0:	66 1f       	adc	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	1a 94       	dec	r1
 6ca:	69 f7       	brne	.-38     	; 0x6a6 <__udivmodsi4_loop>
 6cc:	60 95       	com	r22
 6ce:	70 95       	com	r23
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	9b 01       	movw	r18, r22
 6d6:	ac 01       	movw	r20, r24
 6d8:	bd 01       	movw	r22, r26
 6da:	cf 01       	movw	r24, r30
 6dc:	08 95       	ret

000006de <eeprom_write_byte>:
 6de:	26 2f       	mov	r18, r22

000006e0 <eeprom_write_r18>:
 6e0:	f9 99       	sbic	0x1f, 1	; 31
 6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <eeprom_write_r18>
 6e4:	92 bd       	out	0x22, r25	; 34
 6e6:	81 bd       	out	0x21, r24	; 33
 6e8:	20 bd       	out	0x20, r18	; 32
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	fa 9a       	sbi	0x1f, 2	; 31
 6f0:	f9 9a       	sbi	0x1f, 1	; 31
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	08 95       	ret

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
