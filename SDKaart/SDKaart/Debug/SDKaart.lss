
SDKaart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da4  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b52  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e9  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056f  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021f  00000000  00000000  000025c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000027e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  58:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  5c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  60:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  68:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  6c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  70:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  74:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  7c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  80:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  84:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  88:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  8c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  90:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  a4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <SPI_init>:
}

void SPI_init()
{
	// zet CS, MOSI en SCK als output
	DDR_SPI |= (1 << CS) | (1 << MOSI) | (1 << SCK);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	84 b9       	out	0x04, r24	; 4

	// enable pull up resistor in MISO
	DDR_SPI |= (1 << MISO);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	84 b9       	out	0x04, r24	; 4

	// enable SPI, zet as master, and clock to fosc/128
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  b8:	83 e5       	ldi	r24, 0x53	; 83
  ba:	8c bd       	out	0x2c, r24	; 44
  bc:	08 95       	ret

000000be <SPI_transfer>:
}

uint8_t SPI_transfer(uint8_t data)
{
	SPDR = data;
  be:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1 << SPIF))); // wacht tot transmissie voltooid is
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <SPI_transfer+0x2>
	
	return SPDR;
  c6:	8e b5       	in	r24, 0x2e	; 46
  c8:	08 95       	ret

000000ca <SD_readRes1>:
	
	return res1;
}

uint8_t SD_readRes1()
{
  ca:	cf 93       	push	r28
	uint8_t i = 0, res1;
  cc:	c0 e0       	ldi	r28, 0x00	; 0
	// blijf checken tot data is ontvangen
	while((res1 = SPI_transfer(0xFF)) == 0xFF)
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <SD_readRes1+0xc>
	{
		i++;
  d0:	cf 5f       	subi	r28, 0xFF	; 255
		// als je voor 8 bytes geen data hebt ontvangen, break, dan is er een error
		if(i > 8) break;
  d2:	c9 30       	cpi	r28, 0x09	; 9
  d4:	28 f4       	brcc	.+10     	; 0xe0 <SD_readRes1+0x16>

uint8_t SD_readRes1()
{
	uint8_t i = 0, res1;
	// blijf checken tot data is ontvangen
	while((res1 = SPI_transfer(0xFF)) == 0xFF)
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
  dc:	8f 3f       	cpi	r24, 0xFF	; 255
  de:	c1 f3       	breq	.-16     	; 0xd0 <SD_readRes1+0x6>
		i++;
		// als je voor 8 bytes geen data hebt ontvangen, break, dan is er een error
		if(i > 8) break;
	}
	return res1;
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <SD_command>:

void SD_command(uint8_t cmd, uint32_t arg, uint8_t crc)
{
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d4 2f       	mov	r29, r20
  f0:	15 2f       	mov	r17, r21
  f2:	06 2f       	mov	r16, r22
  f4:	f7 2e       	mov	r15, r23
  f6:	c2 2f       	mov	r28, r18
	// verstuurt command
	SPI_transfer(cmd|0x40);
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// verstuurt een 4 byte (32 bit) argument, 1 byte per keer, door telkens 8 bits te verschuiven
	SPI_transfer((uint8_t)(arg >> 24));
  fe:	8f 2d       	mov	r24, r15
 100:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	SPI_transfer((uint8_t)(arg >> 16));
 104:	80 2f       	mov	r24, r16
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	SPI_transfer((uint8_t)(arg >> 8));
 10a:	81 2f       	mov	r24, r17
 10c:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	SPI_transfer((uint8_t)(arg));
 110:	8d 2f       	mov	r24, r29
 112:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// verstuurt crc
	SPI_transfer(crc|0x01);
 116:	8c 2f       	mov	r24, r28
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	08 95       	ret

0000012a <SD_goIdleState>:
		
    }
}

uint8_t SD_goIdleState()
{
 12a:	cf 93       	push	r28
	// assert chip select
	SPI_transfer(0xFF);
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_ENABLE();
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	// verstuurt CMD0
	SD_command(CMD0, CMD0_ARG, CMD0_CRC);
 13e:	24 e9       	ldi	r18, 0x94	; 148
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	ba 01       	movw	r22, r20
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 72 00 	call	0xe4	; 0xe4 <SD_command>
	// lees resultaat
	uint8_t res1 = SD_readRes1();
 14c:	0e 94 65 00 	call	0xca	; 0xca <SD_readRes1>
 150:	c8 2f       	mov	r28, r24
	// deassert chip select
	SPI_transfer(0xFF);
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	CS_DISABLE();
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
	
	return res1;
}
 164:	8c 2f       	mov	r24, r28
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <SD_powerUp>:
	// verstuurt crc
	SPI_transfer(crc|0x01);
}

void SD_powerUp()
{
 16a:	cf 93       	push	r28
	CS_DISABLE(); // deselecteer sd-kaart
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	89 ef       	ldi	r24, 0xF9	; 249
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <SD_powerUp+0xc>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <SD_powerUp+0x12>
 17c:	00 00       	nop
	_delay_ms(1); // wacht op opstarten
	for(uint8_t i = 0; i < 10; i++) // stuur 80 clockcycles om te synchroniseren
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	04 c0       	rjmp	.+8      	; 0x18a <SD_powerUp+0x20>
	{
		SPI_transfer(0xFF);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>

void SD_powerUp()
{
	CS_DISABLE(); // deselecteer sd-kaart
	_delay_ms(1); // wacht op opstarten
	for(uint8_t i = 0; i < 10; i++) // stuur 80 clockcycles om te synchroniseren
 188:	cf 5f       	subi	r28, 0xFF	; 255
 18a:	ca 30       	cpi	r28, 0x0A	; 10
 18c:	d0 f3       	brcs	.-12     	; 0x182 <SD_powerUp+0x18>
	{
		SPI_transfer(0xFF);
	}
	CS_DISABLE(); // deselecteer sd-kaart
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	81 60       	ori	r24, 0x01	; 1
 192:	85 b9       	out	0x05, r24	; 5
	SPI_transfer(0xFF);
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_transfer>
}
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <main>:
uint8_t SD_readRes1();
uint8_t SD_goIdleState();

int main(void)
{
	SPI_init(); // initialiseer SPI
 19e:	0e 94 56 00 	call	0xac	; 0xac <SPI_init>
	SD_powerUp(); // start power up sequence
 1a2:	0e 94 b5 00 	call	0x16a	; 0x16a <SD_powerUp>
	SD_goIdleState(); // zet sd-kaart in idle stand
 1a6:	0e 94 95 00 	call	0x12a	; 0x12a <SD_goIdleState>
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0xc>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
