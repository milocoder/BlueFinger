
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000720  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000794  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000800  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9f  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c01  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000605  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038e  00000000  00000000  00002f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  b4:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
		
	}
}

void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	4b 01       	movw	r8, r22
  d6:	5c 01       	movw	r10, r24
  d8:	8a 01       	movw	r16, r20
	int val1 = (int)value; // pak getal voor de komma
  da:	0e 94 2e 02 	call	0x45c	; 0x45c <__fixsfsi>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
  e2:	07 2e       	mov	r0, r23
  e4:	00 0c       	add	r0, r0
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	0e 94 66 02 	call	0x4cc	; 0x4cc <__floatsisf>
  ee:	9b 01       	movw	r18, r22
  f0:	ac 01       	movw	r20, r24
  f2:	c5 01       	movw	r24, r10
  f4:	b4 01       	movw	r22, r8
  f6:	0e 94 4f 01 	call	0x29e	; 0x29e <__subsf3>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	48 ec       	ldi	r20, 0xC8	; 200
 100:	52 e4       	ldi	r21, 0x42	; 66
 102:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__mulsf3>
 106:	0e 94 2e 02 	call	0x45c	; 0x45c <__fixsfsi>
 10a:	eb 01       	movw	r28, r22
 10c:	21 96       	adiw	r28, 0x01	; 1
	eeprom_write_byte((uint8_t*)address, val1);
 10e:	6c 2d       	mov	r22, r12
 110:	c8 01       	movw	r24, r16
 112:	0e 94 81 03 	call	0x702	; 0x702 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 116:	6c 2f       	mov	r22, r28
 118:	c8 01       	movw	r24, r16
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 81 03 	call	0x702	; 0x702 <eeprom_write_byte>
	
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	bf 90       	pop	r11
 132:	af 90       	pop	r10
 134:	9f 90       	pop	r9
 136:	8f 90       	pop	r8
 138:	08 95       	ret

0000013a <main>:
// if(!(~PINC & (1 << PC0))) hiermee kijk je of pin hoog is

void writeFloatToEEPROM(float value, int address);

int main(void)
{	
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x6>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	init_millis(12000000UL);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	7b e1       	ldi	r23, 0x1B	; 27
 148:	87 eb       	ldi	r24, 0xB7	; 183
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 26 01 	call	0x24c	; 0x24c <init_millis>
	sei();  // Enable interrupts
 150:	78 94       	sei
	
	// initialiseer in- en outputs
	DDRF = 0xFF;	//output led
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		// input hall sensor
 156:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 158:	18 b8       	out	0x08, r1	; 8
	PORTF = 0;
 15a:	11 ba       	out	0x11, r1	; 17
	
	int addressHall = 0;
	float omtrek_wiel = 1.35;
	volatile int rpmaantal = 0;
 15c:	1a 82       	std	Y+2, r1	; 0x02
 15e:	19 82       	std	Y+1, r1	; 0x01
	int vorigeStatusHall = 0;
	int huidigeStatusHall = 0;
	unsigned long timer = 0; // hierin wordt de huidige tijd gestopt in miliseconden
 160:	81 2c       	mov	r8, r1
 162:	91 2c       	mov	r9, r1
 164:	54 01       	movw	r10, r8
	PORTF = 0;
	
	int addressHall = 0;
	float omtrek_wiel = 1.35;
	volatile int rpmaantal = 0;
	int vorigeStatusHall = 0;
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
	DDRF = 0xFF;	//output led
	DDRC = 0;		// input hall sensor
	PORTC = 0;
	PORTF = 0;
	
	int addressHall = 0;
 16a:	e1 2c       	mov	r14, r1
 16c:	f1 2c       	mov	r15, r1
 16e:	01 c0       	rjmp	.+2      	; 0x172 <main+0x38>
 170:	98 01       	movw	r18, r16
	unsigned long timer = 0; // hierin wordt de huidige tijd gestopt in miliseconden
		
	while(1)
	{
		
		huidigeStatusHall = !(~PINC & (1 << PC0));
 172:	86 b1       	in	r24, 0x06	; 6
 174:	01 e0       	ldi	r16, 0x01	; 1
 176:	98 2f       	mov	r25, r24
 178:	91 70       	andi	r25, 0x01	; 1
 17a:	80 ff       	sbrs	r24, 0
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	10 e0       	ldi	r17, 0x00	; 0
		if(huidigeStatusHall) {
 180:	99 23       	and	r25, r25
 182:	59 f0       	breq	.+22     	; 0x19a <main+0x60>
			if(vorigeStatusHall == 0)
 184:	23 2b       	or	r18, r19
 186:	41 f4       	brne	.+16     	; 0x198 <main+0x5e>
			{
				PORTF = 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	81 bb       	out	0x11, r24	; 17
				rpmaantal += 1;
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	01 c0       	rjmp	.+2      	; 0x19a <main+0x60>
				vorigeStatusHall = 1;
			} else {
				PORTF = 0;
 198:	11 ba       	out	0x11, r1	; 17
			}
		}
		vorigeStatusHall = huidigeStatusHall;
		
		if(millis() - timer >= 418) // 418 komt overeen met 5 seconden in werkelijkheid
 19a:	0e 94 3f 01 	call	0x27e	; 0x27e <millis>
 19e:	dc 01       	movw	r26, r24
 1a0:	cb 01       	movw	r24, r22
 1a2:	88 19       	sub	r24, r8
 1a4:	99 09       	sbc	r25, r9
 1a6:	aa 09       	sbc	r26, r10
 1a8:	bb 09       	sbc	r27, r11
 1aa:	82 3a       	cpi	r24, 0xA2	; 162
 1ac:	91 40       	sbci	r25, 0x01	; 1
 1ae:	a1 05       	cpc	r26, r1
 1b0:	b1 05       	cpc	r27, r1
 1b2:	f0 f2       	brcs	.-68     	; 0x170 <main+0x36>
		{			
			float snelheidms = (float) (omtrek_wiel * rpmaantal) / 418;
 1b4:	69 81       	ldd	r22, Y+1	; 0x01
 1b6:	7a 81       	ldd	r23, Y+2	; 0x02
 1b8:	07 2e       	mov	r0, r23
 1ba:	00 0c       	add	r0, r0
 1bc:	88 0b       	sbc	r24, r24
 1be:	99 0b       	sbc	r25, r25
 1c0:	0e 94 66 02 	call	0x4cc	; 0x4cc <__floatsisf>
 1c4:	2d ec       	ldi	r18, 0xCD	; 205
 1c6:	3c ec       	ldi	r19, 0xCC	; 204
 1c8:	4c ea       	ldi	r20, 0xAC	; 172
 1ca:	5f e3       	ldi	r21, 0x3F	; 63
 1cc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__mulsf3>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	41 ed       	ldi	r20, 0xD1	; 209
 1d6:	53 e4       	ldi	r21, 0x43	; 67
 1d8:	0e 94 bc 01 	call	0x378	; 0x378 <__divsf3>
			float snelheidkmh = snelheidms * 3.6;
 1dc:	26 e6       	ldi	r18, 0x66	; 102
 1de:	36 e6       	ldi	r19, 0x66	; 102
 1e0:	46 e6       	ldi	r20, 0x66	; 102
 1e2:	50 e4       	ldi	r21, 0x40	; 64
 1e4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__mulsf3>
			writeFloatToEEPROM(snelheidkmh, addressHall);
 1e8:	a7 01       	movw	r20, r14
 1ea:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			
			addressHall += 2;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	e8 0e       	add	r14, r24
 1f2:	f1 1c       	adc	r15, r1
			rpmaantal = 0; // reset rpm
 1f4:	1a 82       	std	Y+2, r1	; 0x02
 1f6:	19 82       	std	Y+1, r1	; 0x01
			timer = millis(); // reset timer
 1f8:	0e 94 3f 01 	call	0x27e	; 0x27e <millis>
 1fc:	4b 01       	movw	r8, r22
 1fe:	5c 01       	movw	r10, r24
 200:	b7 cf       	rjmp	.-146    	; 0x170 <main+0x36>

00000202 <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
  timer1_millis++;
 214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 218:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 220:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	a1 1d       	adc	r26, r1
 228:	b1 1d       	adc	r27, r1
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 232:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 236:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 24c:	20 e4       	ldi	r18, 0x40	; 64
 24e:	3f e1       	ldi	r19, 0x1F	; 31
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 258:	e1 e8       	ldi	r30, 0x81	; 129
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8a 60       	ori	r24, 0x0A	; 10
 260:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 262:	bb 27       	eor	r27, r27
 264:	a5 2f       	mov	r26, r21
 266:	94 2f       	mov	r25, r20
 268:	83 2f       	mov	r24, r19
 26a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 26e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 272:	ef e6       	ldi	r30, 0x6F	; 111
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 27e:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	09 c0       	rjmp	.+18     	; 0x296 <millis+0x18>
    millis_return = timer1_millis;
 284:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 290:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
 ATOMIC_BLOCK(ATOMIC_FORCEON) {
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	21 11       	cpse	r18, r1
 298:	f5 cf       	rjmp	.-22     	; 0x284 <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 29a:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 29c:	08 95       	ret

0000029e <__subsf3>:
 29e:	50 58       	subi	r21, 0x80	; 128

000002a0 <__addsf3>:
 2a0:	bb 27       	eor	r27, r27
 2a2:	aa 27       	eor	r26, r26
 2a4:	0e 94 67 01 	call	0x2ce	; 0x2ce <__addsf3x>
 2a8:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_round>
 2ac:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_pscA>
 2b0:	38 f0       	brcs	.+14     	; 0x2c0 <__addsf3+0x20>
 2b2:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_pscB>
 2b6:	20 f0       	brcs	.+8      	; 0x2c0 <__addsf3+0x20>
 2b8:	39 f4       	brne	.+14     	; 0x2c8 <__addsf3+0x28>
 2ba:	9f 3f       	cpi	r25, 0xFF	; 255
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <__addsf3+0x24>
 2be:	26 f4       	brtc	.+8      	; 0x2c8 <__addsf3+0x28>
 2c0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_nan>
 2c4:	0e f4       	brtc	.+2      	; 0x2c8 <__addsf3+0x28>
 2c6:	e0 95       	com	r30
 2c8:	e7 fb       	bst	r30, 7
 2ca:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_inf>

000002ce <__addsf3x>:
 2ce:	e9 2f       	mov	r30, r25
 2d0:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_split3>
 2d4:	58 f3       	brcs	.-42     	; 0x2ac <__addsf3+0xc>
 2d6:	ba 17       	cp	r27, r26
 2d8:	62 07       	cpc	r22, r18
 2da:	73 07       	cpc	r23, r19
 2dc:	84 07       	cpc	r24, r20
 2de:	95 07       	cpc	r25, r21
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <__addsf3x+0x1c>
 2e2:	79 f4       	brne	.+30     	; 0x302 <__addsf3x+0x34>
 2e4:	a6 f5       	brtc	.+104    	; 0x34e <__addsf3x+0x80>
 2e6:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_zero>
 2ea:	0e f4       	brtc	.+2      	; 0x2ee <__addsf3x+0x20>
 2ec:	e0 95       	com	r30
 2ee:	0b 2e       	mov	r0, r27
 2f0:	ba 2f       	mov	r27, r26
 2f2:	a0 2d       	mov	r26, r0
 2f4:	0b 01       	movw	r0, r22
 2f6:	b9 01       	movw	r22, r18
 2f8:	90 01       	movw	r18, r0
 2fa:	0c 01       	movw	r0, r24
 2fc:	ca 01       	movw	r24, r20
 2fe:	a0 01       	movw	r20, r0
 300:	11 24       	eor	r1, r1
 302:	ff 27       	eor	r31, r31
 304:	59 1b       	sub	r21, r25
 306:	99 f0       	breq	.+38     	; 0x32e <__addsf3x+0x60>
 308:	59 3f       	cpi	r21, 0xF9	; 249
 30a:	50 f4       	brcc	.+20     	; 0x320 <__addsf3x+0x52>
 30c:	50 3e       	cpi	r21, 0xE0	; 224
 30e:	68 f1       	brcs	.+90     	; 0x36a <__addsf3x+0x9c>
 310:	1a 16       	cp	r1, r26
 312:	f0 40       	sbci	r31, 0x00	; 0
 314:	a2 2f       	mov	r26, r18
 316:	23 2f       	mov	r18, r19
 318:	34 2f       	mov	r19, r20
 31a:	44 27       	eor	r20, r20
 31c:	58 5f       	subi	r21, 0xF8	; 248
 31e:	f3 cf       	rjmp	.-26     	; 0x306 <__addsf3x+0x38>
 320:	46 95       	lsr	r20
 322:	37 95       	ror	r19
 324:	27 95       	ror	r18
 326:	a7 95       	ror	r26
 328:	f0 40       	sbci	r31, 0x00	; 0
 32a:	53 95       	inc	r21
 32c:	c9 f7       	brne	.-14     	; 0x320 <__addsf3x+0x52>
 32e:	7e f4       	brtc	.+30     	; 0x34e <__addsf3x+0x80>
 330:	1f 16       	cp	r1, r31
 332:	ba 0b       	sbc	r27, r26
 334:	62 0b       	sbc	r22, r18
 336:	73 0b       	sbc	r23, r19
 338:	84 0b       	sbc	r24, r20
 33a:	ba f0       	brmi	.+46     	; 0x36a <__addsf3x+0x9c>
 33c:	91 50       	subi	r25, 0x01	; 1
 33e:	a1 f0       	breq	.+40     	; 0x368 <__addsf3x+0x9a>
 340:	ff 0f       	add	r31, r31
 342:	bb 1f       	adc	r27, r27
 344:	66 1f       	adc	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	88 1f       	adc	r24, r24
 34a:	c2 f7       	brpl	.-16     	; 0x33c <__addsf3x+0x6e>
 34c:	0e c0       	rjmp	.+28     	; 0x36a <__addsf3x+0x9c>
 34e:	ba 0f       	add	r27, r26
 350:	62 1f       	adc	r22, r18
 352:	73 1f       	adc	r23, r19
 354:	84 1f       	adc	r24, r20
 356:	48 f4       	brcc	.+18     	; 0x36a <__addsf3x+0x9c>
 358:	87 95       	ror	r24
 35a:	77 95       	ror	r23
 35c:	67 95       	ror	r22
 35e:	b7 95       	ror	r27
 360:	f7 95       	ror	r31
 362:	9e 3f       	cpi	r25, 0xFE	; 254
 364:	08 f0       	brcs	.+2      	; 0x368 <__addsf3x+0x9a>
 366:	b0 cf       	rjmp	.-160    	; 0x2c8 <__addsf3+0x28>
 368:	93 95       	inc	r25
 36a:	88 0f       	add	r24, r24
 36c:	08 f0       	brcs	.+2      	; 0x370 <__addsf3x+0xa2>
 36e:	99 27       	eor	r25, r25
 370:	ee 0f       	add	r30, r30
 372:	97 95       	ror	r25
 374:	87 95       	ror	r24
 376:	08 95       	ret

00000378 <__divsf3>:
 378:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__divsf3x>
 37c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_round>
 380:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_pscB>
 384:	58 f0       	brcs	.+22     	; 0x39c <__divsf3+0x24>
 386:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_pscA>
 38a:	40 f0       	brcs	.+16     	; 0x39c <__divsf3+0x24>
 38c:	29 f4       	brne	.+10     	; 0x398 <__divsf3+0x20>
 38e:	5f 3f       	cpi	r21, 0xFF	; 255
 390:	29 f0       	breq	.+10     	; 0x39c <__divsf3+0x24>
 392:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_inf>
 396:	51 11       	cpse	r21, r1
 398:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_szero>
 39c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_nan>

000003a0 <__divsf3x>:
 3a0:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_split3>
 3a4:	68 f3       	brcs	.-38     	; 0x380 <__divsf3+0x8>

000003a6 <__divsf3_pse>:
 3a6:	99 23       	and	r25, r25
 3a8:	b1 f3       	breq	.-20     	; 0x396 <__divsf3+0x1e>
 3aa:	55 23       	and	r21, r21
 3ac:	91 f3       	breq	.-28     	; 0x392 <__divsf3+0x1a>
 3ae:	95 1b       	sub	r25, r21
 3b0:	55 0b       	sbc	r21, r21
 3b2:	bb 27       	eor	r27, r27
 3b4:	aa 27       	eor	r26, r26
 3b6:	62 17       	cp	r22, r18
 3b8:	73 07       	cpc	r23, r19
 3ba:	84 07       	cpc	r24, r20
 3bc:	38 f0       	brcs	.+14     	; 0x3cc <__divsf3_pse+0x26>
 3be:	9f 5f       	subi	r25, 0xFF	; 255
 3c0:	5f 4f       	sbci	r21, 0xFF	; 255
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	44 1f       	adc	r20, r20
 3c8:	aa 1f       	adc	r26, r26
 3ca:	a9 f3       	breq	.-22     	; 0x3b6 <__divsf3_pse+0x10>
 3cc:	35 d0       	rcall	.+106    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3ce:	0e 2e       	mov	r0, r30
 3d0:	3a f0       	brmi	.+14     	; 0x3e0 <__divsf3_pse+0x3a>
 3d2:	e0 e8       	ldi	r30, 0x80	; 128
 3d4:	32 d0       	rcall	.+100    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3d6:	91 50       	subi	r25, 0x01	; 1
 3d8:	50 40       	sbci	r21, 0x00	; 0
 3da:	e6 95       	lsr	r30
 3dc:	00 1c       	adc	r0, r0
 3de:	ca f7       	brpl	.-14     	; 0x3d2 <__divsf3_pse+0x2c>
 3e0:	2b d0       	rcall	.+86     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3e2:	fe 2f       	mov	r31, r30
 3e4:	29 d0       	rcall	.+82     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	bb 1f       	adc	r27, r27
 3ee:	26 17       	cp	r18, r22
 3f0:	37 07       	cpc	r19, r23
 3f2:	48 07       	cpc	r20, r24
 3f4:	ab 07       	cpc	r26, r27
 3f6:	b0 e8       	ldi	r27, 0x80	; 128
 3f8:	09 f0       	breq	.+2      	; 0x3fc <__divsf3_pse+0x56>
 3fa:	bb 0b       	sbc	r27, r27
 3fc:	80 2d       	mov	r24, r0
 3fe:	bf 01       	movw	r22, r30
 400:	ff 27       	eor	r31, r31
 402:	93 58       	subi	r25, 0x83	; 131
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	3a f0       	brmi	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 408:	9e 3f       	cpi	r25, 0xFE	; 254
 40a:	51 05       	cpc	r21, r1
 40c:	78 f0       	brcs	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40e:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_inf>
 412:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_szero>
 416:	5f 3f       	cpi	r21, 0xFF	; 255
 418:	e4 f3       	brlt	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	98 3e       	cpi	r25, 0xE8	; 232
 41c:	d4 f3       	brlt	.-12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41e:	86 95       	lsr	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f7 95       	ror	r31
 428:	9f 5f       	subi	r25, 0xFF	; 255
 42a:	c9 f7       	brne	.-14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 42c:	88 0f       	add	r24, r24
 42e:	91 1d       	adc	r25, r1
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	97 f9       	bld	r25, 7
 436:	08 95       	ret
 438:	e1 e0       	ldi	r30, 0x01	; 1
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	88 1f       	adc	r24, r24
 440:	bb 1f       	adc	r27, r27
 442:	62 17       	cp	r22, r18
 444:	73 07       	cpc	r23, r19
 446:	84 07       	cpc	r24, r20
 448:	ba 07       	cpc	r27, r26
 44a:	20 f0       	brcs	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	62 1b       	sub	r22, r18
 44e:	73 0b       	sbc	r23, r19
 450:	84 0b       	sbc	r24, r20
 452:	ba 0b       	sbc	r27, r26
 454:	ee 1f       	adc	r30, r30
 456:	88 f7       	brcc	.-30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 458:	e0 95       	com	r30
 45a:	08 95       	ret

0000045c <__fixsfsi>:
 45c:	0e 94 35 02 	call	0x46a	; 0x46a <__fixunssfsi>
 460:	68 94       	set
 462:	b1 11       	cpse	r27, r1
 464:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_szero>
 468:	08 95       	ret

0000046a <__fixunssfsi>:
 46a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_splitA>
 46e:	88 f0       	brcs	.+34     	; 0x492 <__fixunssfsi+0x28>
 470:	9f 57       	subi	r25, 0x7F	; 127
 472:	98 f0       	brcs	.+38     	; 0x49a <__fixunssfsi+0x30>
 474:	b9 2f       	mov	r27, r25
 476:	99 27       	eor	r25, r25
 478:	b7 51       	subi	r27, 0x17	; 23
 47a:	b0 f0       	brcs	.+44     	; 0x4a8 <__fixunssfsi+0x3e>
 47c:	e1 f0       	breq	.+56     	; 0x4b6 <__fixunssfsi+0x4c>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	1a f0       	brmi	.+6      	; 0x48e <__fixunssfsi+0x24>
 488:	ba 95       	dec	r27
 48a:	c9 f7       	brne	.-14     	; 0x47e <__fixunssfsi+0x14>
 48c:	14 c0       	rjmp	.+40     	; 0x4b6 <__fixunssfsi+0x4c>
 48e:	b1 30       	cpi	r27, 0x01	; 1
 490:	91 f0       	breq	.+36     	; 0x4b6 <__fixunssfsi+0x4c>
 492:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_zero>
 496:	b1 e0       	ldi	r27, 0x01	; 1
 498:	08 95       	ret
 49a:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_zero>
 49e:	67 2f       	mov	r22, r23
 4a0:	78 2f       	mov	r23, r24
 4a2:	88 27       	eor	r24, r24
 4a4:	b8 5f       	subi	r27, 0xF8	; 248
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <__fixunssfsi+0x4c>
 4a8:	b9 3f       	cpi	r27, 0xF9	; 249
 4aa:	cc f3       	brlt	.-14     	; 0x49e <__fixunssfsi+0x34>
 4ac:	86 95       	lsr	r24
 4ae:	77 95       	ror	r23
 4b0:	67 95       	ror	r22
 4b2:	b3 95       	inc	r27
 4b4:	d9 f7       	brne	.-10     	; 0x4ac <__fixunssfsi+0x42>
 4b6:	3e f4       	brtc	.+14     	; 0x4c6 <__fixunssfsi+0x5c>
 4b8:	90 95       	com	r25
 4ba:	80 95       	com	r24
 4bc:	70 95       	com	r23
 4be:	61 95       	neg	r22
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	8f 4f       	sbci	r24, 0xFF	; 255
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	08 95       	ret

000004c8 <__floatunsisf>:
 4c8:	e8 94       	clt
 4ca:	09 c0       	rjmp	.+18     	; 0x4de <__floatsisf+0x12>

000004cc <__floatsisf>:
 4cc:	97 fb       	bst	r25, 7
 4ce:	3e f4       	brtc	.+14     	; 0x4de <__floatsisf+0x12>
 4d0:	90 95       	com	r25
 4d2:	80 95       	com	r24
 4d4:	70 95       	com	r23
 4d6:	61 95       	neg	r22
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	99 23       	and	r25, r25
 4e0:	a9 f0       	breq	.+42     	; 0x50c <__floatsisf+0x40>
 4e2:	f9 2f       	mov	r31, r25
 4e4:	96 e9       	ldi	r25, 0x96	; 150
 4e6:	bb 27       	eor	r27, r27
 4e8:	93 95       	inc	r25
 4ea:	f6 95       	lsr	r31
 4ec:	87 95       	ror	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b7 95       	ror	r27
 4f4:	f1 11       	cpse	r31, r1
 4f6:	f8 cf       	rjmp	.-16     	; 0x4e8 <__floatsisf+0x1c>
 4f8:	fa f4       	brpl	.+62     	; 0x538 <__floatsisf+0x6c>
 4fa:	bb 0f       	add	r27, r27
 4fc:	11 f4       	brne	.+4      	; 0x502 <__floatsisf+0x36>
 4fe:	60 ff       	sbrs	r22, 0
 500:	1b c0       	rjmp	.+54     	; 0x538 <__floatsisf+0x6c>
 502:	6f 5f       	subi	r22, 0xFF	; 255
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	16 c0       	rjmp	.+44     	; 0x538 <__floatsisf+0x6c>
 50c:	88 23       	and	r24, r24
 50e:	11 f0       	breq	.+4      	; 0x514 <__floatsisf+0x48>
 510:	96 e9       	ldi	r25, 0x96	; 150
 512:	11 c0       	rjmp	.+34     	; 0x536 <__floatsisf+0x6a>
 514:	77 23       	and	r23, r23
 516:	21 f0       	breq	.+8      	; 0x520 <__floatsisf+0x54>
 518:	9e e8       	ldi	r25, 0x8E	; 142
 51a:	87 2f       	mov	r24, r23
 51c:	76 2f       	mov	r23, r22
 51e:	05 c0       	rjmp	.+10     	; 0x52a <__floatsisf+0x5e>
 520:	66 23       	and	r22, r22
 522:	71 f0       	breq	.+28     	; 0x540 <__floatsisf+0x74>
 524:	96 e8       	ldi	r25, 0x86	; 134
 526:	86 2f       	mov	r24, r22
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	2a f0       	brmi	.+10     	; 0x538 <__floatsisf+0x6c>
 52e:	9a 95       	dec	r25
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	da f7       	brpl	.-10     	; 0x52e <__floatsisf+0x62>
 538:	88 0f       	add	r24, r24
 53a:	96 95       	lsr	r25
 53c:	87 95       	ror	r24
 53e:	97 f9       	bld	r25, 7
 540:	08 95       	ret

00000542 <__fp_inf>:
 542:	97 f9       	bld	r25, 7
 544:	9f 67       	ori	r25, 0x7F	; 127
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	08 95       	ret

0000054e <__fp_nan>:
 54e:	9f ef       	ldi	r25, 0xFF	; 255
 550:	80 ec       	ldi	r24, 0xC0	; 192
 552:	08 95       	ret

00000554 <__fp_pscA>:
 554:	00 24       	eor	r0, r0
 556:	0a 94       	dec	r0
 558:	16 16       	cp	r1, r22
 55a:	17 06       	cpc	r1, r23
 55c:	18 06       	cpc	r1, r24
 55e:	09 06       	cpc	r0, r25
 560:	08 95       	ret

00000562 <__fp_pscB>:
 562:	00 24       	eor	r0, r0
 564:	0a 94       	dec	r0
 566:	12 16       	cp	r1, r18
 568:	13 06       	cpc	r1, r19
 56a:	14 06       	cpc	r1, r20
 56c:	05 06       	cpc	r0, r21
 56e:	08 95       	ret

00000570 <__fp_round>:
 570:	09 2e       	mov	r0, r25
 572:	03 94       	inc	r0
 574:	00 0c       	add	r0, r0
 576:	11 f4       	brne	.+4      	; 0x57c <__fp_round+0xc>
 578:	88 23       	and	r24, r24
 57a:	52 f0       	brmi	.+20     	; 0x590 <__fp_round+0x20>
 57c:	bb 0f       	add	r27, r27
 57e:	40 f4       	brcc	.+16     	; 0x590 <__fp_round+0x20>
 580:	bf 2b       	or	r27, r31
 582:	11 f4       	brne	.+4      	; 0x588 <__fp_round+0x18>
 584:	60 ff       	sbrs	r22, 0
 586:	04 c0       	rjmp	.+8      	; 0x590 <__fp_round+0x20>
 588:	6f 5f       	subi	r22, 0xFF	; 255
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	08 95       	ret

00000592 <__fp_split3>:
 592:	57 fd       	sbrc	r21, 7
 594:	90 58       	subi	r25, 0x80	; 128
 596:	44 0f       	add	r20, r20
 598:	55 1f       	adc	r21, r21
 59a:	59 f0       	breq	.+22     	; 0x5b2 <__fp_splitA+0x10>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	71 f0       	breq	.+28     	; 0x5bc <__fp_splitA+0x1a>
 5a0:	47 95       	ror	r20

000005a2 <__fp_splitA>:
 5a2:	88 0f       	add	r24, r24
 5a4:	97 fb       	bst	r25, 7
 5a6:	99 1f       	adc	r25, r25
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <__fp_splitA+0x20>
 5aa:	9f 3f       	cpi	r25, 0xFF	; 255
 5ac:	79 f0       	breq	.+30     	; 0x5cc <__fp_splitA+0x2a>
 5ae:	87 95       	ror	r24
 5b0:	08 95       	ret
 5b2:	12 16       	cp	r1, r18
 5b4:	13 06       	cpc	r1, r19
 5b6:	14 06       	cpc	r1, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	f2 cf       	rjmp	.-28     	; 0x5a0 <__fp_split3+0xe>
 5bc:	46 95       	lsr	r20
 5be:	f1 df       	rcall	.-30     	; 0x5a2 <__fp_splitA>
 5c0:	08 c0       	rjmp	.+16     	; 0x5d2 <__fp_splitA+0x30>
 5c2:	16 16       	cp	r1, r22
 5c4:	17 06       	cpc	r1, r23
 5c6:	18 06       	cpc	r1, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	f1 cf       	rjmp	.-30     	; 0x5ae <__fp_splitA+0xc>
 5cc:	86 95       	lsr	r24
 5ce:	71 05       	cpc	r23, r1
 5d0:	61 05       	cpc	r22, r1
 5d2:	08 94       	sec
 5d4:	08 95       	ret

000005d6 <__fp_zero>:
 5d6:	e8 94       	clt

000005d8 <__fp_szero>:
 5d8:	bb 27       	eor	r27, r27
 5da:	66 27       	eor	r22, r22
 5dc:	77 27       	eor	r23, r23
 5de:	cb 01       	movw	r24, r22
 5e0:	97 f9       	bld	r25, 7
 5e2:	08 95       	ret

000005e4 <__mulsf3>:
 5e4:	0e 94 05 03 	call	0x60a	; 0x60a <__mulsf3x>
 5e8:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_round>
 5ec:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_pscA>
 5f0:	38 f0       	brcs	.+14     	; 0x600 <__mulsf3+0x1c>
 5f2:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_pscB>
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__mulsf3+0x1c>
 5f8:	95 23       	and	r25, r21
 5fa:	11 f0       	breq	.+4      	; 0x600 <__mulsf3+0x1c>
 5fc:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_inf>
 600:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_nan>
 604:	11 24       	eor	r1, r1
 606:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_szero>

0000060a <__mulsf3x>:
 60a:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_split3>
 60e:	70 f3       	brcs	.-36     	; 0x5ec <__mulsf3+0x8>

00000610 <__mulsf3_pse>:
 610:	95 9f       	mul	r25, r21
 612:	c1 f3       	breq	.-16     	; 0x604 <__mulsf3+0x20>
 614:	95 0f       	add	r25, r21
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	55 1f       	adc	r21, r21
 61a:	62 9f       	mul	r22, r18
 61c:	f0 01       	movw	r30, r0
 61e:	72 9f       	mul	r23, r18
 620:	bb 27       	eor	r27, r27
 622:	f0 0d       	add	r31, r0
 624:	b1 1d       	adc	r27, r1
 626:	63 9f       	mul	r22, r19
 628:	aa 27       	eor	r26, r26
 62a:	f0 0d       	add	r31, r0
 62c:	b1 1d       	adc	r27, r1
 62e:	aa 1f       	adc	r26, r26
 630:	64 9f       	mul	r22, r20
 632:	66 27       	eor	r22, r22
 634:	b0 0d       	add	r27, r0
 636:	a1 1d       	adc	r26, r1
 638:	66 1f       	adc	r22, r22
 63a:	82 9f       	mul	r24, r18
 63c:	22 27       	eor	r18, r18
 63e:	b0 0d       	add	r27, r0
 640:	a1 1d       	adc	r26, r1
 642:	62 1f       	adc	r22, r18
 644:	73 9f       	mul	r23, r19
 646:	b0 0d       	add	r27, r0
 648:	a1 1d       	adc	r26, r1
 64a:	62 1f       	adc	r22, r18
 64c:	83 9f       	mul	r24, r19
 64e:	a0 0d       	add	r26, r0
 650:	61 1d       	adc	r22, r1
 652:	22 1f       	adc	r18, r18
 654:	74 9f       	mul	r23, r20
 656:	33 27       	eor	r19, r19
 658:	a0 0d       	add	r26, r0
 65a:	61 1d       	adc	r22, r1
 65c:	23 1f       	adc	r18, r19
 65e:	84 9f       	mul	r24, r20
 660:	60 0d       	add	r22, r0
 662:	21 1d       	adc	r18, r1
 664:	82 2f       	mov	r24, r18
 666:	76 2f       	mov	r23, r22
 668:	6a 2f       	mov	r22, r26
 66a:	11 24       	eor	r1, r1
 66c:	9f 57       	subi	r25, 0x7F	; 127
 66e:	50 40       	sbci	r21, 0x00	; 0
 670:	9a f0       	brmi	.+38     	; 0x698 <__mulsf3_pse+0x88>
 672:	f1 f0       	breq	.+60     	; 0x6b0 <__mulsf3_pse+0xa0>
 674:	88 23       	and	r24, r24
 676:	4a f0       	brmi	.+18     	; 0x68a <__mulsf3_pse+0x7a>
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	bb 1f       	adc	r27, r27
 67e:	66 1f       	adc	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	91 50       	subi	r25, 0x01	; 1
 686:	50 40       	sbci	r21, 0x00	; 0
 688:	a9 f7       	brne	.-22     	; 0x674 <__mulsf3_pse+0x64>
 68a:	9e 3f       	cpi	r25, 0xFE	; 254
 68c:	51 05       	cpc	r21, r1
 68e:	80 f0       	brcs	.+32     	; 0x6b0 <__mulsf3_pse+0xa0>
 690:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_inf>
 694:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_szero>
 698:	5f 3f       	cpi	r21, 0xFF	; 255
 69a:	e4 f3       	brlt	.-8      	; 0x694 <__mulsf3_pse+0x84>
 69c:	98 3e       	cpi	r25, 0xE8	; 232
 69e:	d4 f3       	brlt	.-12     	; 0x694 <__mulsf3_pse+0x84>
 6a0:	86 95       	lsr	r24
 6a2:	77 95       	ror	r23
 6a4:	67 95       	ror	r22
 6a6:	b7 95       	ror	r27
 6a8:	f7 95       	ror	r31
 6aa:	e7 95       	ror	r30
 6ac:	9f 5f       	subi	r25, 0xFF	; 255
 6ae:	c1 f7       	brne	.-16     	; 0x6a0 <__mulsf3_pse+0x90>
 6b0:	fe 2b       	or	r31, r30
 6b2:	88 0f       	add	r24, r24
 6b4:	91 1d       	adc	r25, r1
 6b6:	96 95       	lsr	r25
 6b8:	87 95       	ror	r24
 6ba:	97 f9       	bld	r25, 7
 6bc:	08 95       	ret

000006be <__udivmodsi4>:
 6be:	a1 e2       	ldi	r26, 0x21	; 33
 6c0:	1a 2e       	mov	r1, r26
 6c2:	aa 1b       	sub	r26, r26
 6c4:	bb 1b       	sub	r27, r27
 6c6:	fd 01       	movw	r30, r26
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <__udivmodsi4_ep>

000006ca <__udivmodsi4_loop>:
 6ca:	aa 1f       	adc	r26, r26
 6cc:	bb 1f       	adc	r27, r27
 6ce:	ee 1f       	adc	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	a2 17       	cp	r26, r18
 6d4:	b3 07       	cpc	r27, r19
 6d6:	e4 07       	cpc	r30, r20
 6d8:	f5 07       	cpc	r31, r21
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <__udivmodsi4_ep>
 6dc:	a2 1b       	sub	r26, r18
 6de:	b3 0b       	sbc	r27, r19
 6e0:	e4 0b       	sbc	r30, r20
 6e2:	f5 0b       	sbc	r31, r21

000006e4 <__udivmodsi4_ep>:
 6e4:	66 1f       	adc	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	1a 94       	dec	r1
 6ee:	69 f7       	brne	.-38     	; 0x6ca <__udivmodsi4_loop>
 6f0:	60 95       	com	r22
 6f2:	70 95       	com	r23
 6f4:	80 95       	com	r24
 6f6:	90 95       	com	r25
 6f8:	9b 01       	movw	r18, r22
 6fa:	ac 01       	movw	r20, r24
 6fc:	bd 01       	movw	r22, r26
 6fe:	cf 01       	movw	r24, r30
 700:	08 95       	ret

00000702 <eeprom_write_byte>:
 702:	26 2f       	mov	r18, r22

00000704 <eeprom_write_r18>:
 704:	f9 99       	sbic	0x1f, 1	; 31
 706:	fe cf       	rjmp	.-4      	; 0x704 <eeprom_write_r18>
 708:	92 bd       	out	0x22, r25	; 34
 70a:	81 bd       	out	0x21, r24	; 33
 70c:	20 bd       	out	0x20, r18	; 32
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	f8 94       	cli
 712:	fa 9a       	sbi	0x1f, 2	; 31
 714:	f9 9a       	sbi	0x1f, 1	; 31
 716:	0f be       	out	0x3f, r0	; 63
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
