
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000075c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000007c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eaf  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c01  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000562  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000637  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000320  00000000  00000000  00002f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000327f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  b4:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
    }
}


void writeFloatToEEPROM(float value, int address)
{
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	4b 01       	movw	r8, r22
  d6:	5c 01       	movw	r10, r24
  d8:	8a 01       	movw	r16, r20
	int val1 = (int)value; // pak getal voor de komma
  da:	0e 94 12 02 	call	0x424	; 0x424 <__fixsfsi>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
  e2:	07 2e       	mov	r0, r23
  e4:	00 0c       	add	r0, r0
  e6:	88 0b       	sbc	r24, r24
  e8:	99 0b       	sbc	r25, r25
  ea:	0e 94 4a 02 	call	0x494	; 0x494 <__floatsisf>
  ee:	9b 01       	movw	r18, r22
  f0:	ac 01       	movw	r20, r24
  f2:	c5 01       	movw	r24, r10
  f4:	b4 01       	movw	r22, r8
  f6:	0e 94 33 01 	call	0x266	; 0x266 <__subsf3>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	48 ec       	ldi	r20, 0xC8	; 200
 100:	52 e4       	ldi	r21, 0x42	; 66
 102:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__mulsf3>
 106:	0e 94 12 02 	call	0x424	; 0x424 <__fixsfsi>
 10a:	eb 01       	movw	r28, r22
 10c:	21 96       	adiw	r28, 0x01	; 1
	eeprom_write_byte((uint8_t*)address, val1);
 10e:	6c 2d       	mov	r22, r12
 110:	c8 01       	movw	r24, r16
 112:	0e 94 65 03 	call	0x6ca	; 0x6ca <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 116:	6c 2f       	mov	r22, r28
 118:	c8 01       	movw	r24, r16
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 65 03 	call	0x6ca	; 0x6ca <eeprom_write_byte>
	
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	bf 90       	pop	r11
 132:	af 90       	pop	r10
 134:	9f 90       	pop	r9
 136:	8f 90       	pop	r8
 138:	08 95       	ret

0000013a <main>:
void writeFloatToEEPROM(float value, int address);


int main(void)
{	
	init_millis(16000000UL);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	74 e2       	ldi	r23, 0x24	; 36
 13e:	84 ef       	ldi	r24, 0xF4	; 244
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 0a 01 	call	0x214	; 0x214 <init_millis>
	sei();  // Enable interrupts
 146:	78 94       	sei
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = millis(); 
 148:	0e 94 23 01 	call	0x246	; 0x246 <millis>
 14c:	6b 01       	movw	r12, r22
 14e:	7c 01       	movw	r14, r24
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
	
	DDRF = 1;		//output ledje
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		//input hall sensor
 154:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
 156:	18 b8       	out	0x08, r1	; 8
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = millis(); 
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
 158:	01 e0       	ldi	r16, 0x01	; 1
 15a:	10 e0       	ldi	r17, 0x00	; 0
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = millis(); 
	unsigned long vorige_tijd_ms = 0; 	
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	ba 01       	movw	r22, r20
{	
	init_millis(16000000UL);
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
		
	
	/* Replace with your application code */
    while (1) 
    {	
		huidige_status_hall = PINC & (1 << PC0); 
 166:	86 b1       	in	r24, 0x06	; 6
 168:	81 70       	andi	r24, 0x01	; 1
 16a:	c8 2f       	mov	r28, r24
 16c:	81 2c       	mov	r8, r1
 16e:	d8 2d       	mov	r29, r8
		
		if (vorige_status_hall != huidige_status_hall && huidige_status_hall == 1) {
 170:	2c 17       	cp	r18, r28
 172:	3d 07       	cpc	r19, r29
 174:	c1 f3       	breq	.-16     	; 0x166 <main+0x2c>
 176:	c1 30       	cpi	r28, 0x01	; 1
 178:	d1 05       	cpc	r29, r1
 17a:	a9 f7       	brne	.-22     	; 0x166 <main+0x2c>
		
			unsigned long verschil_tijd_ms = huidige_tijd_ms - vorige_tijd_ms; 
 17c:	46 01       	movw	r8, r12
 17e:	57 01       	movw	r10, r14
 180:	84 1a       	sub	r8, r20
 182:	95 0a       	sbc	r9, r21
 184:	a6 0a       	sbc	r10, r22
 186:	b7 0a       	sbc	r11, r23
 188:	c5 01       	movw	r24, r10
 18a:	b4 01       	movw	r22, r8
			
			float afstand_cm = OMTREK_WIEL; 
			float tijd_uren = (float)verschil_tijd_ms / 1000.0 / 3600.0; 
 18c:	0e 94 48 02 	call	0x490	; 0x490 <__floatunsisf>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4a e7       	ldi	r20, 0x7A	; 122
 196:	54 e4       	ldi	r21, 0x44	; 68
 198:	0e 94 a0 01 	call	0x340	; 0x340 <__divsf3>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	41 e6       	ldi	r20, 0x61	; 97
 1a2:	55 e4       	ldi	r21, 0x45	; 69
 1a4:	0e 94 a0 01 	call	0x340	; 0x340 <__divsf3>
 1a8:	9b 01       	movw	r18, r22
 1aa:	ac 01       	movw	r20, r24
			float snelheidKmH = afstand_cm / 100000.0 / tijd_uren; 
 1ac:	6c e7       	ldi	r22, 0x7C	; 124
 1ae:	72 ef       	ldi	r23, 0xF2	; 242
 1b0:	80 eb       	ldi	r24, 0xB0	; 176
 1b2:	9a e3       	ldi	r25, 0x3A	; 58
 1b4:	0e 94 a0 01 	call	0x340	; 0x340 <__divsf3>
			
			writeFloatToEEPROM(snelheidKmH, addressHall);
 1b8:	a8 01       	movw	r20, r16
 1ba:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			addressHall += 3;		
 1be:	0d 5f       	subi	r16, 0xFD	; 253
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
			
			
			vorige_status_hall = huidige_status_hall;
			vorige_tijd_ms = huidige_tijd_ms; 
 1c2:	b7 01       	movw	r22, r14
 1c4:	a6 01       	movw	r20, r12
			
			writeFloatToEEPROM(snelheidKmH, addressHall);
			addressHall += 3;		
			
			
			vorige_status_hall = huidige_status_hall;
 1c6:	9e 01       	movw	r18, r28
 1c8:	ce cf       	rjmp	.-100    	; 0x166 <main+0x2c>

000001ca <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
  timer1_millis++;
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1e8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	a1 1d       	adc	r26, r1
 1f0:	b1 1d       	adc	r27, r1
 1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fa:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1fe:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 214:	20 e4       	ldi	r18, 0x40	; 64
 216:	3f e1       	ldi	r19, 0x1F	; 31
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	0e 94 43 03 	call	0x686	; 0x686 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 220:	e1 e8       	ldi	r30, 0x81	; 129
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8a 60       	ori	r24, 0x0A	; 10
 228:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 22a:	bb 27       	eor	r27, r27
 22c:	a5 2f       	mov	r26, r21
 22e:	94 2f       	mov	r25, r20
 230:	83 2f       	mov	r24, r19
 232:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 236:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 23a:	ef e6       	ldi	r30, 0x6F	; 111
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
 244:	08 95       	ret

00000246 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 246:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	09 c0       	rjmp	.+18     	; 0x25e <millis+0x18>
    millis_return = timer1_millis;
 24c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 254:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 258:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	21 11       	cpse	r18, r1
 260:	f5 cf       	rjmp	.-22     	; 0x24c <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 262:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 264:	08 95       	ret

00000266 <__subsf3>:
 266:	50 58       	subi	r21, 0x80	; 128

00000268 <__addsf3>:
 268:	bb 27       	eor	r27, r27
 26a:	aa 27       	eor	r26, r26
 26c:	0e 94 4b 01 	call	0x296	; 0x296 <__addsf3x>
 270:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_round>
 274:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_pscA>
 278:	38 f0       	brcs	.+14     	; 0x288 <__addsf3+0x20>
 27a:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscB>
 27e:	20 f0       	brcs	.+8      	; 0x288 <__addsf3+0x20>
 280:	39 f4       	brne	.+14     	; 0x290 <__addsf3+0x28>
 282:	9f 3f       	cpi	r25, 0xFF	; 255
 284:	19 f4       	brne	.+6      	; 0x28c <__addsf3+0x24>
 286:	26 f4       	brtc	.+8      	; 0x290 <__addsf3+0x28>
 288:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_nan>
 28c:	0e f4       	brtc	.+2      	; 0x290 <__addsf3+0x28>
 28e:	e0 95       	com	r30
 290:	e7 fb       	bst	r30, 7
 292:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>

00000296 <__addsf3x>:
 296:	e9 2f       	mov	r30, r25
 298:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_split3>
 29c:	58 f3       	brcs	.-42     	; 0x274 <__addsf3+0xc>
 29e:	ba 17       	cp	r27, r26
 2a0:	62 07       	cpc	r22, r18
 2a2:	73 07       	cpc	r23, r19
 2a4:	84 07       	cpc	r24, r20
 2a6:	95 07       	cpc	r25, r21
 2a8:	20 f0       	brcs	.+8      	; 0x2b2 <__addsf3x+0x1c>
 2aa:	79 f4       	brne	.+30     	; 0x2ca <__addsf3x+0x34>
 2ac:	a6 f5       	brtc	.+104    	; 0x316 <__addsf3x+0x80>
 2ae:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_zero>
 2b2:	0e f4       	brtc	.+2      	; 0x2b6 <__addsf3x+0x20>
 2b4:	e0 95       	com	r30
 2b6:	0b 2e       	mov	r0, r27
 2b8:	ba 2f       	mov	r27, r26
 2ba:	a0 2d       	mov	r26, r0
 2bc:	0b 01       	movw	r0, r22
 2be:	b9 01       	movw	r22, r18
 2c0:	90 01       	movw	r18, r0
 2c2:	0c 01       	movw	r0, r24
 2c4:	ca 01       	movw	r24, r20
 2c6:	a0 01       	movw	r20, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	ff 27       	eor	r31, r31
 2cc:	59 1b       	sub	r21, r25
 2ce:	99 f0       	breq	.+38     	; 0x2f6 <__addsf3x+0x60>
 2d0:	59 3f       	cpi	r21, 0xF9	; 249
 2d2:	50 f4       	brcc	.+20     	; 0x2e8 <__addsf3x+0x52>
 2d4:	50 3e       	cpi	r21, 0xE0	; 224
 2d6:	68 f1       	brcs	.+90     	; 0x332 <__addsf3x+0x9c>
 2d8:	1a 16       	cp	r1, r26
 2da:	f0 40       	sbci	r31, 0x00	; 0
 2dc:	a2 2f       	mov	r26, r18
 2de:	23 2f       	mov	r18, r19
 2e0:	34 2f       	mov	r19, r20
 2e2:	44 27       	eor	r20, r20
 2e4:	58 5f       	subi	r21, 0xF8	; 248
 2e6:	f3 cf       	rjmp	.-26     	; 0x2ce <__addsf3x+0x38>
 2e8:	46 95       	lsr	r20
 2ea:	37 95       	ror	r19
 2ec:	27 95       	ror	r18
 2ee:	a7 95       	ror	r26
 2f0:	f0 40       	sbci	r31, 0x00	; 0
 2f2:	53 95       	inc	r21
 2f4:	c9 f7       	brne	.-14     	; 0x2e8 <__addsf3x+0x52>
 2f6:	7e f4       	brtc	.+30     	; 0x316 <__addsf3x+0x80>
 2f8:	1f 16       	cp	r1, r31
 2fa:	ba 0b       	sbc	r27, r26
 2fc:	62 0b       	sbc	r22, r18
 2fe:	73 0b       	sbc	r23, r19
 300:	84 0b       	sbc	r24, r20
 302:	ba f0       	brmi	.+46     	; 0x332 <__addsf3x+0x9c>
 304:	91 50       	subi	r25, 0x01	; 1
 306:	a1 f0       	breq	.+40     	; 0x330 <__addsf3x+0x9a>
 308:	ff 0f       	add	r31, r31
 30a:	bb 1f       	adc	r27, r27
 30c:	66 1f       	adc	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	88 1f       	adc	r24, r24
 312:	c2 f7       	brpl	.-16     	; 0x304 <__addsf3x+0x6e>
 314:	0e c0       	rjmp	.+28     	; 0x332 <__addsf3x+0x9c>
 316:	ba 0f       	add	r27, r26
 318:	62 1f       	adc	r22, r18
 31a:	73 1f       	adc	r23, r19
 31c:	84 1f       	adc	r24, r20
 31e:	48 f4       	brcc	.+18     	; 0x332 <__addsf3x+0x9c>
 320:	87 95       	ror	r24
 322:	77 95       	ror	r23
 324:	67 95       	ror	r22
 326:	b7 95       	ror	r27
 328:	f7 95       	ror	r31
 32a:	9e 3f       	cpi	r25, 0xFE	; 254
 32c:	08 f0       	brcs	.+2      	; 0x330 <__addsf3x+0x9a>
 32e:	b0 cf       	rjmp	.-160    	; 0x290 <__addsf3+0x28>
 330:	93 95       	inc	r25
 332:	88 0f       	add	r24, r24
 334:	08 f0       	brcs	.+2      	; 0x338 <__addsf3x+0xa2>
 336:	99 27       	eor	r25, r25
 338:	ee 0f       	add	r30, r30
 33a:	97 95       	ror	r25
 33c:	87 95       	ror	r24
 33e:	08 95       	ret

00000340 <__divsf3>:
 340:	0e 94 b4 01 	call	0x368	; 0x368 <__divsf3x>
 344:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_round>
 348:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscB>
 34c:	58 f0       	brcs	.+22     	; 0x364 <__divsf3+0x24>
 34e:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_pscA>
 352:	40 f0       	brcs	.+16     	; 0x364 <__divsf3+0x24>
 354:	29 f4       	brne	.+10     	; 0x360 <__divsf3+0x20>
 356:	5f 3f       	cpi	r21, 0xFF	; 255
 358:	29 f0       	breq	.+10     	; 0x364 <__divsf3+0x24>
 35a:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 35e:	51 11       	cpse	r21, r1
 360:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 364:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_nan>

00000368 <__divsf3x>:
 368:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_split3>
 36c:	68 f3       	brcs	.-38     	; 0x348 <__divsf3+0x8>

0000036e <__divsf3_pse>:
 36e:	99 23       	and	r25, r25
 370:	b1 f3       	breq	.-20     	; 0x35e <__divsf3+0x1e>
 372:	55 23       	and	r21, r21
 374:	91 f3       	breq	.-28     	; 0x35a <__divsf3+0x1a>
 376:	95 1b       	sub	r25, r21
 378:	55 0b       	sbc	r21, r21
 37a:	bb 27       	eor	r27, r27
 37c:	aa 27       	eor	r26, r26
 37e:	62 17       	cp	r22, r18
 380:	73 07       	cpc	r23, r19
 382:	84 07       	cpc	r24, r20
 384:	38 f0       	brcs	.+14     	; 0x394 <__divsf3_pse+0x26>
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	44 1f       	adc	r20, r20
 390:	aa 1f       	adc	r26, r26
 392:	a9 f3       	breq	.-22     	; 0x37e <__divsf3_pse+0x10>
 394:	35 d0       	rcall	.+106    	; 0x400 <__LOCK_REGION_LENGTH__>
 396:	0e 2e       	mov	r0, r30
 398:	3a f0       	brmi	.+14     	; 0x3a8 <__divsf3_pse+0x3a>
 39a:	e0 e8       	ldi	r30, 0x80	; 128
 39c:	32 d0       	rcall	.+100    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 39e:	91 50       	subi	r25, 0x01	; 1
 3a0:	50 40       	sbci	r21, 0x00	; 0
 3a2:	e6 95       	lsr	r30
 3a4:	00 1c       	adc	r0, r0
 3a6:	ca f7       	brpl	.-14     	; 0x39a <__divsf3_pse+0x2c>
 3a8:	2b d0       	rcall	.+86     	; 0x400 <__LOCK_REGION_LENGTH__>
 3aa:	fe 2f       	mov	r31, r30
 3ac:	29 d0       	rcall	.+82     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	bb 1f       	adc	r27, r27
 3b6:	26 17       	cp	r18, r22
 3b8:	37 07       	cpc	r19, r23
 3ba:	48 07       	cpc	r20, r24
 3bc:	ab 07       	cpc	r26, r27
 3be:	b0 e8       	ldi	r27, 0x80	; 128
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <__divsf3_pse+0x56>
 3c2:	bb 0b       	sbc	r27, r27
 3c4:	80 2d       	mov	r24, r0
 3c6:	bf 01       	movw	r22, r30
 3c8:	ff 27       	eor	r31, r31
 3ca:	93 58       	subi	r25, 0x83	; 131
 3cc:	5f 4f       	sbci	r21, 0xFF	; 255
 3ce:	3a f0       	brmi	.+14     	; 0x3de <__divsf3_pse+0x70>
 3d0:	9e 3f       	cpi	r25, 0xFE	; 254
 3d2:	51 05       	cpc	r21, r1
 3d4:	78 f0       	brcs	.+30     	; 0x3f4 <__divsf3_pse+0x86>
 3d6:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 3da:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 3de:	5f 3f       	cpi	r21, 0xFF	; 255
 3e0:	e4 f3       	brlt	.-8      	; 0x3da <__divsf3_pse+0x6c>
 3e2:	98 3e       	cpi	r25, 0xE8	; 232
 3e4:	d4 f3       	brlt	.-12     	; 0x3da <__divsf3_pse+0x6c>
 3e6:	86 95       	lsr	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b7 95       	ror	r27
 3ee:	f7 95       	ror	r31
 3f0:	9f 5f       	subi	r25, 0xFF	; 255
 3f2:	c9 f7       	brne	.-14     	; 0x3e6 <__divsf3_pse+0x78>
 3f4:	88 0f       	add	r24, r24
 3f6:	91 1d       	adc	r25, r1
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	97 f9       	bld	r25, 7
 3fe:	08 95       	ret
 400:	e1 e0       	ldi	r30, 0x01	; 1
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	bb 1f       	adc	r27, r27
 40a:	62 17       	cp	r22, r18
 40c:	73 07       	cpc	r23, r19
 40e:	84 07       	cpc	r24, r20
 410:	ba 07       	cpc	r27, r26
 412:	20 f0       	brcs	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	62 1b       	sub	r22, r18
 416:	73 0b       	sbc	r23, r19
 418:	84 0b       	sbc	r24, r20
 41a:	ba 0b       	sbc	r27, r26
 41c:	ee 1f       	adc	r30, r30
 41e:	88 f7       	brcc	.-30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 420:	e0 95       	com	r30
 422:	08 95       	ret

00000424 <__fixsfsi>:
 424:	0e 94 19 02 	call	0x432	; 0x432 <__fixunssfsi>
 428:	68 94       	set
 42a:	b1 11       	cpse	r27, r1
 42c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 430:	08 95       	ret

00000432 <__fixunssfsi>:
 432:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_splitA>
 436:	88 f0       	brcs	.+34     	; 0x45a <__fixunssfsi+0x28>
 438:	9f 57       	subi	r25, 0x7F	; 127
 43a:	98 f0       	brcs	.+38     	; 0x462 <__fixunssfsi+0x30>
 43c:	b9 2f       	mov	r27, r25
 43e:	99 27       	eor	r25, r25
 440:	b7 51       	subi	r27, 0x17	; 23
 442:	b0 f0       	brcs	.+44     	; 0x470 <__fixunssfsi+0x3e>
 444:	e1 f0       	breq	.+56     	; 0x47e <__fixunssfsi+0x4c>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	1a f0       	brmi	.+6      	; 0x456 <__fixunssfsi+0x24>
 450:	ba 95       	dec	r27
 452:	c9 f7       	brne	.-14     	; 0x446 <__fixunssfsi+0x14>
 454:	14 c0       	rjmp	.+40     	; 0x47e <__fixunssfsi+0x4c>
 456:	b1 30       	cpi	r27, 0x01	; 1
 458:	91 f0       	breq	.+36     	; 0x47e <__fixunssfsi+0x4c>
 45a:	0e 94 cf 02 	call	0x59e	; 0x59e <__fp_zero>
 45e:	b1 e0       	ldi	r27, 0x01	; 1
 460:	08 95       	ret
 462:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_zero>
 466:	67 2f       	mov	r22, r23
 468:	78 2f       	mov	r23, r24
 46a:	88 27       	eor	r24, r24
 46c:	b8 5f       	subi	r27, 0xF8	; 248
 46e:	39 f0       	breq	.+14     	; 0x47e <__fixunssfsi+0x4c>
 470:	b9 3f       	cpi	r27, 0xF9	; 249
 472:	cc f3       	brlt	.-14     	; 0x466 <__fixunssfsi+0x34>
 474:	86 95       	lsr	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b3 95       	inc	r27
 47c:	d9 f7       	brne	.-10     	; 0x474 <__fixunssfsi+0x42>
 47e:	3e f4       	brtc	.+14     	; 0x48e <__fixunssfsi+0x5c>
 480:	90 95       	com	r25
 482:	80 95       	com	r24
 484:	70 95       	com	r23
 486:	61 95       	neg	r22
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	08 95       	ret

00000490 <__floatunsisf>:
 490:	e8 94       	clt
 492:	09 c0       	rjmp	.+18     	; 0x4a6 <__floatsisf+0x12>

00000494 <__floatsisf>:
 494:	97 fb       	bst	r25, 7
 496:	3e f4       	brtc	.+14     	; 0x4a6 <__floatsisf+0x12>
 498:	90 95       	com	r25
 49a:	80 95       	com	r24
 49c:	70 95       	com	r23
 49e:	61 95       	neg	r22
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	99 23       	and	r25, r25
 4a8:	a9 f0       	breq	.+42     	; 0x4d4 <__floatsisf+0x40>
 4aa:	f9 2f       	mov	r31, r25
 4ac:	96 e9       	ldi	r25, 0x96	; 150
 4ae:	bb 27       	eor	r27, r27
 4b0:	93 95       	inc	r25
 4b2:	f6 95       	lsr	r31
 4b4:	87 95       	ror	r24
 4b6:	77 95       	ror	r23
 4b8:	67 95       	ror	r22
 4ba:	b7 95       	ror	r27
 4bc:	f1 11       	cpse	r31, r1
 4be:	f8 cf       	rjmp	.-16     	; 0x4b0 <__floatsisf+0x1c>
 4c0:	fa f4       	brpl	.+62     	; 0x500 <__floatsisf+0x6c>
 4c2:	bb 0f       	add	r27, r27
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__floatsisf+0x36>
 4c6:	60 ff       	sbrs	r22, 0
 4c8:	1b c0       	rjmp	.+54     	; 0x500 <__floatsisf+0x6c>
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	16 c0       	rjmp	.+44     	; 0x500 <__floatsisf+0x6c>
 4d4:	88 23       	and	r24, r24
 4d6:	11 f0       	breq	.+4      	; 0x4dc <__floatsisf+0x48>
 4d8:	96 e9       	ldi	r25, 0x96	; 150
 4da:	11 c0       	rjmp	.+34     	; 0x4fe <__floatsisf+0x6a>
 4dc:	77 23       	and	r23, r23
 4de:	21 f0       	breq	.+8      	; 0x4e8 <__floatsisf+0x54>
 4e0:	9e e8       	ldi	r25, 0x8E	; 142
 4e2:	87 2f       	mov	r24, r23
 4e4:	76 2f       	mov	r23, r22
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <__floatsisf+0x5e>
 4e8:	66 23       	and	r22, r22
 4ea:	71 f0       	breq	.+28     	; 0x508 <__floatsisf+0x74>
 4ec:	96 e8       	ldi	r25, 0x86	; 134
 4ee:	86 2f       	mov	r24, r22
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	2a f0       	brmi	.+10     	; 0x500 <__floatsisf+0x6c>
 4f6:	9a 95       	dec	r25
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	da f7       	brpl	.-10     	; 0x4f6 <__floatsisf+0x62>
 500:	88 0f       	add	r24, r24
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret

0000050a <__fp_inf>:
 50a:	97 f9       	bld	r25, 7
 50c:	9f 67       	ori	r25, 0x7F	; 127
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	08 95       	ret

00000516 <__fp_nan>:
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	80 ec       	ldi	r24, 0xC0	; 192
 51a:	08 95       	ret

0000051c <__fp_pscA>:
 51c:	00 24       	eor	r0, r0
 51e:	0a 94       	dec	r0
 520:	16 16       	cp	r1, r22
 522:	17 06       	cpc	r1, r23
 524:	18 06       	cpc	r1, r24
 526:	09 06       	cpc	r0, r25
 528:	08 95       	ret

0000052a <__fp_pscB>:
 52a:	00 24       	eor	r0, r0
 52c:	0a 94       	dec	r0
 52e:	12 16       	cp	r1, r18
 530:	13 06       	cpc	r1, r19
 532:	14 06       	cpc	r1, r20
 534:	05 06       	cpc	r0, r21
 536:	08 95       	ret

00000538 <__fp_round>:
 538:	09 2e       	mov	r0, r25
 53a:	03 94       	inc	r0
 53c:	00 0c       	add	r0, r0
 53e:	11 f4       	brne	.+4      	; 0x544 <__fp_round+0xc>
 540:	88 23       	and	r24, r24
 542:	52 f0       	brmi	.+20     	; 0x558 <__fp_round+0x20>
 544:	bb 0f       	add	r27, r27
 546:	40 f4       	brcc	.+16     	; 0x558 <__fp_round+0x20>
 548:	bf 2b       	or	r27, r31
 54a:	11 f4       	brne	.+4      	; 0x550 <__fp_round+0x18>
 54c:	60 ff       	sbrs	r22, 0
 54e:	04 c0       	rjmp	.+8      	; 0x558 <__fp_round+0x20>
 550:	6f 5f       	subi	r22, 0xFF	; 255
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	8f 4f       	sbci	r24, 0xFF	; 255
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	08 95       	ret

0000055a <__fp_split3>:
 55a:	57 fd       	sbrc	r21, 7
 55c:	90 58       	subi	r25, 0x80	; 128
 55e:	44 0f       	add	r20, r20
 560:	55 1f       	adc	r21, r21
 562:	59 f0       	breq	.+22     	; 0x57a <__fp_splitA+0x10>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	71 f0       	breq	.+28     	; 0x584 <__fp_splitA+0x1a>
 568:	47 95       	ror	r20

0000056a <__fp_splitA>:
 56a:	88 0f       	add	r24, r24
 56c:	97 fb       	bst	r25, 7
 56e:	99 1f       	adc	r25, r25
 570:	61 f0       	breq	.+24     	; 0x58a <__fp_splitA+0x20>
 572:	9f 3f       	cpi	r25, 0xFF	; 255
 574:	79 f0       	breq	.+30     	; 0x594 <__fp_splitA+0x2a>
 576:	87 95       	ror	r24
 578:	08 95       	ret
 57a:	12 16       	cp	r1, r18
 57c:	13 06       	cpc	r1, r19
 57e:	14 06       	cpc	r1, r20
 580:	55 1f       	adc	r21, r21
 582:	f2 cf       	rjmp	.-28     	; 0x568 <__fp_split3+0xe>
 584:	46 95       	lsr	r20
 586:	f1 df       	rcall	.-30     	; 0x56a <__fp_splitA>
 588:	08 c0       	rjmp	.+16     	; 0x59a <__fp_splitA+0x30>
 58a:	16 16       	cp	r1, r22
 58c:	17 06       	cpc	r1, r23
 58e:	18 06       	cpc	r1, r24
 590:	99 1f       	adc	r25, r25
 592:	f1 cf       	rjmp	.-30     	; 0x576 <__fp_splitA+0xc>
 594:	86 95       	lsr	r24
 596:	71 05       	cpc	r23, r1
 598:	61 05       	cpc	r22, r1
 59a:	08 94       	sec
 59c:	08 95       	ret

0000059e <__fp_zero>:
 59e:	e8 94       	clt

000005a0 <__fp_szero>:
 5a0:	bb 27       	eor	r27, r27
 5a2:	66 27       	eor	r22, r22
 5a4:	77 27       	eor	r23, r23
 5a6:	cb 01       	movw	r24, r22
 5a8:	97 f9       	bld	r25, 7
 5aa:	08 95       	ret

000005ac <__mulsf3>:
 5ac:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__mulsf3x>
 5b0:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_round>
 5b4:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_pscA>
 5b8:	38 f0       	brcs	.+14     	; 0x5c8 <__mulsf3+0x1c>
 5ba:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscB>
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <__mulsf3+0x1c>
 5c0:	95 23       	and	r25, r21
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <__mulsf3+0x1c>
 5c4:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 5c8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_nan>
 5cc:	11 24       	eor	r1, r1
 5ce:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>

000005d2 <__mulsf3x>:
 5d2:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_split3>
 5d6:	70 f3       	brcs	.-36     	; 0x5b4 <__mulsf3+0x8>

000005d8 <__mulsf3_pse>:
 5d8:	95 9f       	mul	r25, r21
 5da:	c1 f3       	breq	.-16     	; 0x5cc <__mulsf3+0x20>
 5dc:	95 0f       	add	r25, r21
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	55 1f       	adc	r21, r21
 5e2:	62 9f       	mul	r22, r18
 5e4:	f0 01       	movw	r30, r0
 5e6:	72 9f       	mul	r23, r18
 5e8:	bb 27       	eor	r27, r27
 5ea:	f0 0d       	add	r31, r0
 5ec:	b1 1d       	adc	r27, r1
 5ee:	63 9f       	mul	r22, r19
 5f0:	aa 27       	eor	r26, r26
 5f2:	f0 0d       	add	r31, r0
 5f4:	b1 1d       	adc	r27, r1
 5f6:	aa 1f       	adc	r26, r26
 5f8:	64 9f       	mul	r22, r20
 5fa:	66 27       	eor	r22, r22
 5fc:	b0 0d       	add	r27, r0
 5fe:	a1 1d       	adc	r26, r1
 600:	66 1f       	adc	r22, r22
 602:	82 9f       	mul	r24, r18
 604:	22 27       	eor	r18, r18
 606:	b0 0d       	add	r27, r0
 608:	a1 1d       	adc	r26, r1
 60a:	62 1f       	adc	r22, r18
 60c:	73 9f       	mul	r23, r19
 60e:	b0 0d       	add	r27, r0
 610:	a1 1d       	adc	r26, r1
 612:	62 1f       	adc	r22, r18
 614:	83 9f       	mul	r24, r19
 616:	a0 0d       	add	r26, r0
 618:	61 1d       	adc	r22, r1
 61a:	22 1f       	adc	r18, r18
 61c:	74 9f       	mul	r23, r20
 61e:	33 27       	eor	r19, r19
 620:	a0 0d       	add	r26, r0
 622:	61 1d       	adc	r22, r1
 624:	23 1f       	adc	r18, r19
 626:	84 9f       	mul	r24, r20
 628:	60 0d       	add	r22, r0
 62a:	21 1d       	adc	r18, r1
 62c:	82 2f       	mov	r24, r18
 62e:	76 2f       	mov	r23, r22
 630:	6a 2f       	mov	r22, r26
 632:	11 24       	eor	r1, r1
 634:	9f 57       	subi	r25, 0x7F	; 127
 636:	50 40       	sbci	r21, 0x00	; 0
 638:	9a f0       	brmi	.+38     	; 0x660 <__mulsf3_pse+0x88>
 63a:	f1 f0       	breq	.+60     	; 0x678 <__mulsf3_pse+0xa0>
 63c:	88 23       	and	r24, r24
 63e:	4a f0       	brmi	.+18     	; 0x652 <__mulsf3_pse+0x7a>
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	bb 1f       	adc	r27, r27
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	91 50       	subi	r25, 0x01	; 1
 64e:	50 40       	sbci	r21, 0x00	; 0
 650:	a9 f7       	brne	.-22     	; 0x63c <__mulsf3_pse+0x64>
 652:	9e 3f       	cpi	r25, 0xFE	; 254
 654:	51 05       	cpc	r21, r1
 656:	80 f0       	brcs	.+32     	; 0x678 <__mulsf3_pse+0xa0>
 658:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 65c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 660:	5f 3f       	cpi	r21, 0xFF	; 255
 662:	e4 f3       	brlt	.-8      	; 0x65c <__mulsf3_pse+0x84>
 664:	98 3e       	cpi	r25, 0xE8	; 232
 666:	d4 f3       	brlt	.-12     	; 0x65c <__mulsf3_pse+0x84>
 668:	86 95       	lsr	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b7 95       	ror	r27
 670:	f7 95       	ror	r31
 672:	e7 95       	ror	r30
 674:	9f 5f       	subi	r25, 0xFF	; 255
 676:	c1 f7       	brne	.-16     	; 0x668 <__mulsf3_pse+0x90>
 678:	fe 2b       	or	r31, r30
 67a:	88 0f       	add	r24, r24
 67c:	91 1d       	adc	r25, r1
 67e:	96 95       	lsr	r25
 680:	87 95       	ror	r24
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret

00000686 <__udivmodsi4>:
 686:	a1 e2       	ldi	r26, 0x21	; 33
 688:	1a 2e       	mov	r1, r26
 68a:	aa 1b       	sub	r26, r26
 68c:	bb 1b       	sub	r27, r27
 68e:	fd 01       	movw	r30, r26
 690:	0d c0       	rjmp	.+26     	; 0x6ac <__udivmodsi4_ep>

00000692 <__udivmodsi4_loop>:
 692:	aa 1f       	adc	r26, r26
 694:	bb 1f       	adc	r27, r27
 696:	ee 1f       	adc	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	a2 17       	cp	r26, r18
 69c:	b3 07       	cpc	r27, r19
 69e:	e4 07       	cpc	r30, r20
 6a0:	f5 07       	cpc	r31, r21
 6a2:	20 f0       	brcs	.+8      	; 0x6ac <__udivmodsi4_ep>
 6a4:	a2 1b       	sub	r26, r18
 6a6:	b3 0b       	sbc	r27, r19
 6a8:	e4 0b       	sbc	r30, r20
 6aa:	f5 0b       	sbc	r31, r21

000006ac <__udivmodsi4_ep>:
 6ac:	66 1f       	adc	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	1a 94       	dec	r1
 6b6:	69 f7       	brne	.-38     	; 0x692 <__udivmodsi4_loop>
 6b8:	60 95       	com	r22
 6ba:	70 95       	com	r23
 6bc:	80 95       	com	r24
 6be:	90 95       	com	r25
 6c0:	9b 01       	movw	r18, r22
 6c2:	ac 01       	movw	r20, r24
 6c4:	bd 01       	movw	r22, r26
 6c6:	cf 01       	movw	r24, r30
 6c8:	08 95       	ret

000006ca <eeprom_write_byte>:
 6ca:	26 2f       	mov	r18, r22

000006cc <eeprom_write_r18>:
 6cc:	f9 99       	sbic	0x1f, 1	; 31
 6ce:	fe cf       	rjmp	.-4      	; 0x6cc <eeprom_write_r18>
 6d0:	92 bd       	out	0x22, r25	; 34
 6d2:	81 bd       	out	0x21, r24	; 33
 6d4:	20 bd       	out	0x20, r18	; 32
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	fa 9a       	sbi	0x1f, 2	; 31
 6dc:	f9 9a       	sbi	0x1f, 1	; 31
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	08 95       	ret

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>
