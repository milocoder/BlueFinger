
SD_kaart4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000150c  000015a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000150c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800192  00800192  00001632  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002379  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef6  00000000  00000000  00003b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011cc  00000000  00000000  00004a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00005bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000811  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc1  00000000  00000000  000068b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00008872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec e0       	ldi	r30, 0x0C	; 12
      a8:	f5 e1       	ldi	r31, 0x15	; 21
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a2 39       	cpi	r26, 0x92	; 146
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	21 e0       	ldi	r18, 0x01	; 1
      b8:	a2 e9       	ldi	r26, 0x92	; 146
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ad 3c       	cpi	r26, 0xCD	; 205
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 c0 02 	call	0x580	; 0x580 <main>
      ca:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_spi>:
//

static void init_spi(void)
{
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= ((1 << MOSI) | (1 << SCK) | (1 << CS));
      d2:	84 b1       	in	r24, 0x04	; 4
      d4:	87 60       	ori	r24, 0x07	; 7
      d6:	84 b9       	out	0x04, r24	; 4
	
	// enable pull up resistor in MISO
	PORTB |= (1 << MISO);
      d8:	85 b1       	in	r24, 0x05	; 5
      da:	88 60       	ori	r24, 0x08	; 8
      dc:	85 b9       	out	0x05, r24	; 5
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= ((1<<SPE) | (1<<MSTR) | (1<<SPR0));
      de:	8c b5       	in	r24, 0x2c	; 44
      e0:	81 65       	ori	r24, 0x51	; 81
      e2:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<CS); 				//hoog maken CS	
      e4:	85 b1       	in	r24, 0x05	; 5
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	85 b9       	out	0x05, r24	; 5
      ea:	08 95       	ret

000000ec <xmit_spi>:
}

static BYTE xmit_spi(BYTE data)
{
	PORTB &= ~(1<<CS); //laag maken
      ec:	95 b1       	in	r25, 0x05	; 5
      ee:	9e 7f       	andi	r25, 0xFE	; 254
      f0:	95 b9       	out	0x05, r25	; 5
	/* Start transmission */
	SPDR = data;
      f2:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <xmit_spi+0x8>
	PORTB |= (1<<CS);		//hoog maken CS
      fa:	85 b1       	in	r24, 0x05	; 5
      fc:	81 60       	ori	r24, 0x01	; 1
      fe:	85 b9       	out	0x05, r24	; 5
	
	return SPDR; 
     100:	8e b5       	in	r24, 0x2e	; 46
}
     102:	08 95       	ret

00000104 <rcv_spi>:

static BYTE rcv_spi(void)
{
	return xmit_spi(0xFF);
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
}
     10a:	08 95       	ret

0000010c <send_cmd>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static BYTE send_cmd(BYTE  cmd, /* 1st byte (Start + Index) */
                     DWORD arg ) /* Argument (32 bits) */
{
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	c8 2f       	mov	r28, r24
     118:	d4 2f       	mov	r29, r20
     11a:	15 2f       	mov	r17, r21
     11c:	06 2f       	mov	r16, r22
     11e:	f7 2e       	mov	r15, r23
	BYTE n, res;

	if (cmd & 0x80) { /* ACMD<n> is the command sequence of CMD55-CMD<n> */
     120:	88 23       	and	r24, r24
     122:	4c f4       	brge	.+18     	; 0x136 <send_cmd+0x2a>
		cmd &= 0x7F;
     124:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	ba 01       	movw	r22, r20
     12c:	87 e7       	ldi	r24, 0x77	; 119
     12e:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
		if (res > 1)
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	50 f5       	brcc	.+84     	; 0x18a <send_cmd+0x7e>
			return res;
	}

	/* Select the card */
	DESELECT();
     136:	85 b1       	in	r24, 0x05	; 5
     138:	81 60       	ori	r24, 0x01	; 1
     13a:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     13c:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	SELECT();
     140:	85 b1       	in	r24, 0x05	; 5
     142:	8e 7f       	andi	r24, 0xFE	; 254
     144:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     146:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);               /* Start + Command index */
     14a:	8c 2f       	mov	r24, r28
     14c:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
     150:	8f 2d       	mov	r24, r15
     152:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
     156:	80 2f       	mov	r24, r16
     158:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));  /* Argument[15..8] */
     15c:	81 2f       	mov	r24, r17
     15e:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)arg);         /* Argument[7..0] */
     162:	8d 2f       	mov	r24, r29
     164:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	n = 0x01;                    /* Dummy CRC + Stop */
	if (cmd == CMD0)
     168:	c0 34       	cpi	r28, 0x40	; 64
     16a:	11 f0       	breq	.+4      	; 0x170 <send_cmd+0x64>
	xmit_spi(cmd);               /* Start + Command index */
	xmit_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));  /* Argument[15..8] */
	xmit_spi((BYTE)arg);         /* Argument[7..0] */
	n = 0x01;                    /* Dummy CRC + Stop */
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	01 c0       	rjmp	.+2      	; 0x172 <send_cmd+0x66>
	if (cmd == CMD0)
		n = 0x95; /* Valid CRC for CMD0(0) */
     170:	85 e9       	ldi	r24, 0x95	; 149
	if (cmd == CMD8)
     172:	c8 34       	cpi	r28, 0x48	; 72
     174:	09 f4       	brne	.+2      	; 0x178 <send_cmd+0x6c>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
     176:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
     178:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>

	/* Receive a command response */
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
     17c:	ca e0       	ldi	r28, 0x0A	; 10
	do {
		res = rcv_spi();
     17e:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	} while ((res & 0x80) && --n);
     182:	88 23       	and	r24, r24
     184:	14 f4       	brge	.+4      	; 0x18a <send_cmd+0x7e>
     186:	c1 50       	subi	r28, 0x01	; 1
     188:	d1 f7       	brne	.-12     	; 0x17e <send_cmd+0x72>

	return res; /* Return with the response value */
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	08 95       	ret

00000196 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(void)
{
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <disk_initialize+0xe>
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <disk_initialize+0x10>
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && SELECTING)
     1aa:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <CardType>
     1ae:	81 11       	cpse	r24, r1
     1b0:	84 b1       	in	r24, 0x04	; 4
		disk_writep(0, 0); /* Finalize write process if it is in progress */
	
#endif

	init_spi(); /* Initialize ports to control MMC */ 
     1b2:	0e 94 69 00 	call	0xd2	; 0xd2 <init_spi>
	DESELECT();
     1b6:	85 b1       	in	r24, 0x05	; 5
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	85 b9       	out	0x05, r24	; 5
	for (n = 10; n; n--)
     1bc:	1a e0       	ldi	r17, 0x0A	; 10
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <disk_initialize+0x30>
		rcv_spi(); /* 80 dummy clocks with CS=H */
     1c0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	
#endif

	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
     1c4:	11 50       	subi	r17, 0x01	; 1
     1c6:	11 11       	cpse	r17, r1
     1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <disk_initialize+0x2a>
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) { 
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	ba 01       	movw	r22, r20
     1d0:	80 e4       	ldi	r24, 0x40	; 64
     1d2:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	09 f0       	breq	.+2      	; 0x1dc <disk_initialize+0x46>
     1da:	9b c0       	rjmp	.+310    	; 0x312 <disk_initialize+0x17c>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
     1dc:	4a ea       	ldi	r20, 0xAA	; 170
     1de:	51 e0       	ldi	r21, 0x01	; 1
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	88 e4       	ldi	r24, 0x48	; 72
     1e6:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <disk_initialize+0x5a>
     1ee:	59 c0       	rjmp	.+178    	; 0x2a2 <disk_initialize+0x10c>
     1f0:	0d c0       	rjmp	.+26     	; 0x20c <disk_initialize+0x76>
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
     1f2:	e0 2e       	mov	r14, r16
     1f4:	f1 2c       	mov	r15, r1
     1f6:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     1fa:	e1 e0       	ldi	r30, 0x01	; 1
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0d       	add	r30, r14
     204:	ff 1d       	adc	r31, r15
     206:	80 83       	st	Z, r24
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) { 
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
     208:	0f 5f       	subi	r16, 0xFF	; 255
     20a:	01 c0       	rjmp	.+2      	; 0x20e <disk_initialize+0x78>
     20c:	01 2f       	mov	r16, r17
     20e:	04 30       	cpi	r16, 0x04	; 4
     210:	80 f3       	brcs	.-32     	; 0x1f2 <disk_initialize+0x5c>
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	09 f0       	breq	.+2      	; 0x21a <disk_initialize+0x84>
     218:	7e c0       	rjmp	.+252    	; 0x316 <disk_initialize+0x180>
     21a:	8c 81       	ldd	r24, Y+4	; 0x04
     21c:	8a 3a       	cpi	r24, 0xAA	; 170
     21e:	61 f0       	breq	.+24     	; 0x238 <disk_initialize+0xa2>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     220:	f1 2c       	mov	r15, r1
     222:	84 c0       	rjmp	.+264    	; 0x32c <disk_initialize+0x196>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     224:	8f e8       	ldi	r24, 0x8F	; 143
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <disk_initialize+0x92>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <disk_initialize+0x98>
     22e:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) { 
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	e9 1a       	sub	r14, r25
     234:	f1 08       	sbc	r15, r1
     236:	06 c0       	rjmp	.+12     	; 0x244 <disk_initialize+0xae>
     238:	0f 2e       	mov	r0, r31
     23a:	f0 e1       	ldi	r31, 0x10	; 16
     23c:	ef 2e       	mov	r14, r31
     23e:	f7 e2       	ldi	r31, 0x27	; 39
     240:	ff 2e       	mov	r15, r31
     242:	f0 2d       	mov	r31, r0
     244:	e1 14       	cp	r14, r1
     246:	f1 04       	cpc	r15, r1
     248:	49 f0       	breq	.+18     	; 0x25c <disk_initialize+0xc6>
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e4       	ldi	r23, 0x40	; 64
     252:	89 ee       	ldi	r24, 0xE9	; 233
     254:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     258:	81 11       	cpse	r24, r1
     25a:	e4 cf       	rjmp	.-56     	; 0x224 <disk_initialize+0x8e>
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
     25c:	ef 28       	or	r14, r15
     25e:	09 f4       	brne	.+2      	; 0x262 <disk_initialize+0xcc>
     260:	5c c0       	rjmp	.+184    	; 0x31a <disk_initialize+0x184>
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	ba 01       	movw	r22, r20
     268:	8a e7       	ldi	r24, 0x7A	; 122
     26a:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     26e:	88 23       	and	r24, r24
     270:	71 f0       	breq	.+28     	; 0x28e <disk_initialize+0xf8>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     272:	f1 2c       	mov	r15, r1
     274:	5b c0       	rjmp	.+182    	; 0x32c <disk_initialize+0x196>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
     276:	e1 2e       	mov	r14, r17
     278:	f1 2c       	mov	r15, r1
     27a:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     27e:	e1 e0       	ldi	r30, 0x01	; 1
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ec 0f       	add	r30, r28
     284:	fd 1f       	adc	r31, r29
     286:	ee 0d       	add	r30, r14
     288:	ff 1d       	adc	r31, r15
     28a:	80 83       	st	Z, r24
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
     28c:	1f 5f       	subi	r17, 0xFF	; 255
     28e:	14 30       	cpi	r17, 0x04	; 4
     290:	90 f3       	brcs	.-28     	; 0x276 <disk_initialize+0xe0>
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	86 ff       	sbrs	r24, 6
     296:	43 c0       	rjmp	.+134    	; 0x31e <disk_initialize+0x188>
     298:	0f 2e       	mov	r0, r31
     29a:	fc e0       	ldi	r31, 0x0C	; 12
     29c:	ff 2e       	mov	r15, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	45 c0       	rjmp	.+138    	; 0x32c <disk_initialize+0x196>
				}
			}
		} else { /* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	ba 01       	movw	r22, r20
     2a8:	89 ee       	ldi	r24, 0xE9	; 233
     2aa:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	40 f4       	brcc	.+16     	; 0x2c2 <disk_initialize+0x12c>
				ty  = CT_SD1;
     2b2:	68 94       	set
     2b4:	ff 24       	eor	r15, r15
     2b6:	f1 f8       	bld	r15, 1
				cmd = ACMD41; /* SDv1 */
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f9 ee       	ldi	r31, 0xE9	; 233
     2bc:	ef 2e       	mov	r14, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	06 c0       	rjmp	.+12     	; 0x2ce <disk_initialize+0x138>
			} else {
				ty  = CT_MMC;
     2c2:	ff 24       	eor	r15, r15
     2c4:	f3 94       	inc	r15
				cmd = CMD1; /* MMCv3 */
     2c6:	0f 2e       	mov	r0, r31
     2c8:	f1 e4       	ldi	r31, 0x41	; 65
     2ca:	ef 2e       	mov	r14, r31
     2cc:	f0 2d       	mov	r31, r0
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
     2ce:	00 e1       	ldi	r16, 0x10	; 16
     2d0:	17 e2       	ldi	r17, 0x27	; 39
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <disk_initialize+0x14e>
     2d4:	8f e8       	ldi	r24, 0x8F	; 143
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <disk_initialize+0x142>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <disk_initialize+0x148>
     2de:	00 00       	nop
     2e0:	01 50       	subi	r16, 0x01	; 1
     2e2:	11 09       	sbc	r17, r1
     2e4:	01 15       	cp	r16, r1
     2e6:	11 05       	cpc	r17, r1
     2e8:	41 f0       	breq	.+16     	; 0x2fa <disk_initialize+0x164>
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	ba 01       	movw	r22, r20
     2f0:	8e 2d       	mov	r24, r14
     2f2:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     2f6:	81 11       	cpse	r24, r1
     2f8:	ed cf       	rjmp	.-38     	; 0x2d4 <disk_initialize+0x13e>
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
     2fa:	01 2b       	or	r16, r17
     2fc:	a1 f0       	breq	.+40     	; 0x326 <disk_initialize+0x190>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	52 e0       	ldi	r21, 0x02	; 2
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e5       	ldi	r24, 0x50	; 80
     308:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     30c:	81 11       	cpse	r24, r1
     30e:	0d c0       	rjmp	.+26     	; 0x32a <disk_initialize+0x194>
     310:	0d c0       	rjmp	.+26     	; 0x32c <disk_initialize+0x196>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     312:	f1 2c       	mov	r15, r1
     314:	0b c0       	rjmp	.+22     	; 0x32c <disk_initialize+0x196>
     316:	f1 2c       	mov	r15, r1
     318:	09 c0       	rjmp	.+18     	; 0x32c <disk_initialize+0x196>
     31a:	f1 2c       	mov	r15, r1
     31c:	07 c0       	rjmp	.+14     	; 0x32c <disk_initialize+0x196>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
     31e:	68 94       	set
     320:	ff 24       	eor	r15, r15
     322:	f2 f8       	bld	r15, 2
     324:	03 c0       	rjmp	.+6      	; 0x32c <disk_initialize+0x196>
				cmd = CMD1; /* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
				ty = 0;
     326:	f1 2c       	mov	r15, r1
     328:	01 c0       	rjmp	.+2      	; 0x32c <disk_initialize+0x196>
     32a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     32c:	f0 92 94 01 	sts	0x0194, r15	; 0x800194 <CardType>
	DESELECT();
     330:	85 b1       	in	r24, 0x05	; 5
     332:	81 60       	ori	r24, 0x01	; 1
     334:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     336:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	return ty ? 0 : STA_NOINIT;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	f1 10       	cpse	r15, r1
     33e:	80 e0       	ldi	r24, 0x00	; 0
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	08 95       	ret

00000356 <disk_readp>:
DRESULT disk_readp(BYTE *buff,   /* Pointer to the read buffer (NULL:Forward to the stream) */
                   DWORD sector, /* Sector number (LBA) */
                   UINT  offset, /* Byte offset to read from (0..511) */
                   UINT  count   /* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	6c 01       	movw	r12, r24
     36c:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE    rc;
	UINT    bc;

	if (!(CardType & CT_BLOCK))
     36e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <CardType>
     372:	83 fd       	sbrc	r24, 3
     374:	09 c0       	rjmp	.+18     	; 0x388 <disk_readp+0x32>
		sector *= 512; /* Convert to byte address if needed */
     376:	03 2e       	mov	r0, r19
     378:	39 e0       	ldi	r19, 0x09	; 9
     37a:	44 0f       	add	r20, r20
     37c:	55 1f       	adc	r21, r21
     37e:	66 1f       	adc	r22, r22
     380:	77 1f       	adc	r23, r23
     382:	3a 95       	dec	r19
     384:	d1 f7       	brne	.-12     	; 0x37a <disk_readp+0x24>
     386:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) { /* READ_SINGLE_BLOCK */
     388:	81 e5       	ldi	r24, 0x51	; 81
     38a:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     38e:	81 11       	cpse	r24, r1
     390:	31 c0       	rjmp	.+98     	; 0x3f4 <disk_readp+0x9e>

		// bc = 40000;	/* Time counter */
		do { /* Wait for response */
			rc = rcv_spi();
     392:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
		} while (rc == 0xFF);
     396:	8f 3f       	cpi	r24, 0xFF	; 255
     398:	e1 f3       	breq	.-8      	; 0x392 <disk_readp+0x3c>

		if (rc == 0xFE) { /* A data packet arrived */
     39a:	8e 3f       	cpi	r24, 0xFE	; 254
     39c:	69 f5       	brne	.+90     	; 0x3f8 <disk_readp+0xa2>

			bc = 512 + 2 - offset - count; /* Number of trailing bytes to skip */
     39e:	cc 27       	eor	r28, r28
     3a0:	dd 27       	eor	r29, r29
     3a2:	ce 19       	sub	r28, r14
     3a4:	df 09       	sbc	r29, r15
     3a6:	c0 1b       	sub	r28, r16
     3a8:	d1 0b       	sbc	r29, r17
     3aa:	ce 5f       	subi	r28, 0xFE	; 254
     3ac:	dd 4f       	sbci	r29, 0xFD	; 253

			/* Skip leading bytes */
			while (offset--)
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <disk_readp+0x60>
				rcv_spi();
     3b0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
		if (rc == 0xFE) { /* A data packet arrived */

			bc = 512 + 2 - offset - count; /* Number of trailing bytes to skip */

			/* Skip leading bytes */
			while (offset--)
     3b4:	75 01       	movw	r14, r10
     3b6:	57 01       	movw	r10, r14
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	a8 1a       	sub	r10, r24
     3bc:	b1 08       	sbc	r11, r1
     3be:	ef 28       	or	r14, r15
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <disk_readp+0x5a>
				rcv_spi();

			/* Receive a part of the sector */
			if (buff) { /* Store data to the memory */
     3c2:	c1 14       	cp	r12, r1
     3c4:	d1 04       	cpc	r13, r1
     3c6:	69 f0       	breq	.+26     	; 0x3e2 <disk_readp+0x8c>
				do {
					*buff++ = rcv_spi();
     3c8:	76 01       	movw	r14, r12
     3ca:	ef ef       	ldi	r30, 0xFF	; 255
     3cc:	ee 1a       	sub	r14, r30
     3ce:	fe 0a       	sbc	r15, r30
     3d0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     3d4:	f6 01       	movw	r30, r12
     3d6:	80 83       	st	Z, r24
				} while (--count);
     3d8:	01 50       	subi	r16, 0x01	; 1
     3da:	11 09       	sbc	r17, r1
				rcv_spi();

			/* Receive a part of the sector */
			if (buff) { /* Store data to the memory */
				do {
					*buff++ = rcv_spi();
     3dc:	67 01       	movw	r12, r14
				} while (--count);
     3de:	a1 f7       	brne	.-24     	; 0x3c8 <disk_readp+0x72>
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <disk_readp+0x92>
			} else { /* Forward data to the outgoing stream */
				do {
					// FORWARD(rcv_spi());
				} while (--count);
     3e2:	01 50       	subi	r16, 0x01	; 1
     3e4:	11 09       	sbc	r17, r1
     3e6:	e9 f7       	brne	.-6      	; 0x3e2 <disk_readp+0x8c>
			}

			/* Skip trailing bytes and CRC */
			do
				rcv_spi();
     3e8:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
			while (--bc);
     3ec:	21 97       	sbiw	r28, 0x01	; 1
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <disk_readp+0x92>

			res = RES_OK;
     3f0:	c0 e0       	ldi	r28, 0x00	; 0
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <disk_readp+0xa4>
	UINT    bc;

	if (!(CardType & CT_BLOCK))
		sector *= 512; /* Convert to byte address if needed */

	res = RES_ERROR;
     3f4:	c1 e0       	ldi	r28, 0x01	; 1
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <disk_readp+0xa4>
     3f8:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
     3fa:	85 b1       	in	r24, 0x05	; 5
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     400:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	return res;
}
     404:	8c 2f       	mov	r24, r28
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	08 95       	ret

0000041c <disk_writep>:

#if _USE_WRITE
DRESULT disk_writep(const BYTE *buff, /* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
                    DWORD       sc    /* Number of bytes to send, Sector number (LBA) or zero */
)
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	fc 01       	movw	r30, r24
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
     426:	89 2b       	or	r24, r25
     428:	f1 f0       	breq	.+60     	; 0x466 <disk_writep+0x4a>
		bc = sc;
     42a:	ea 01       	movw	r28, r20
		while (bc && wc) { /* Send data bytes to the card */
     42c:	11 c0       	rjmp	.+34     	; 0x450 <disk_writep+0x34>
			xmit_spi(*buff++);
     42e:	8f 01       	movw	r16, r30
     430:	0f 5f       	subi	r16, 0xFF	; 255
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
			wc--;
     43a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     43e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
     448:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
			bc--;
     44c:	21 97       	sbiw	r28, 0x01	; 1
	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
     44e:	f8 01       	movw	r30, r16

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
     450:	20 97       	sbiw	r28, 0x00	; 0
     452:	09 f4       	brne	.+2      	; 0x456 <disk_writep+0x3a>
     454:	5f c0       	rjmp	.+190    	; 0x514 <disk_writep+0xf8>
     456:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     45a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
     45e:	89 2b       	or	r24, r25
     460:	31 f7       	brne	.-52     	; 0x42e <disk_writep+0x12>
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
     462:	c0 e0       	ldi	r28, 0x00	; 0
     464:	5a c0       	rjmp	.+180    	; 0x51a <disk_writep+0xfe>
	} else {
		if (sc) { /* Initiate sector write process */
     466:	41 15       	cp	r20, r1
     468:	51 05       	cpc	r21, r1
     46a:	61 05       	cpc	r22, r1
     46c:	71 05       	cpc	r23, r1
     46e:	01 f1       	breq	.+64     	; 0x4b0 <disk_writep+0x94>
			if (!(CardType & CT_BLOCK))
     470:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <CardType>
     474:	83 fd       	sbrc	r24, 3
     476:	09 c0       	rjmp	.+18     	; 0x48a <disk_writep+0x6e>
				sc *= 512;                  /* Convert to byte address if needed */
     478:	03 2e       	mov	r0, r19
     47a:	39 e0       	ldi	r19, 0x09	; 9
     47c:	44 0f       	add	r20, r20
     47e:	55 1f       	adc	r21, r21
     480:	66 1f       	adc	r22, r22
     482:	77 1f       	adc	r23, r23
     484:	3a 95       	dec	r19
     486:	d1 f7       	brne	.-12     	; 0x47c <disk_writep+0x60>
     488:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sc) == 0) { /* WRITE_SINGLE_BLOCK */
     48a:	88 e5       	ldi	r24, 0x58	; 88
     48c:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     490:	81 11       	cpse	r24, r1
     492:	42 c0       	rjmp	.+132    	; 0x518 <disk_writep+0xfc>
				xmit_spi(0xFF);
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				xmit_spi(0xFE); /* Data block header */
     49a:	8e ef       	ldi	r24, 0xFE	; 254
     49c:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
     4a8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
				res = RES_OK;
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
     4ae:	35 c0       	rjmp	.+106    	; 0x51a <disk_writep+0xfe>
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
     4b0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     4b4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
     4b8:	02 96       	adiw	r24, 0x02	; 2
			while (bc--) {
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <disk_writep+0xa8>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
				res = RES_OK;
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
			while (bc--) {
     4c2:	ce 01       	movw	r24, r28
     4c4:	ec 01       	movw	r28, r24
     4c6:	21 97       	sbiw	r28, 0x01	; 1
     4c8:	89 2b       	or	r24, r25
     4ca:	c1 f7       	brne	.-16     	; 0x4bc <disk_writep+0xa0>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
			}
			do {
				res = rcv_spi();
     4cc:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     4d0:	c8 2f       	mov	r28, r24
			} while (res == 0xFF);
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	d9 f3       	breq	.-10     	; 0x4cc <disk_writep+0xb0>
			if ((res & 0x1F) == 0x05) { /* Receive data resp and wait for end of write process in timeout of 500ms */
     4d6:	8f 71       	andi	r24, 0x1F	; 31
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	b1 f4       	brne	.+44     	; 0x508 <disk_writep+0xec>
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <disk_writep+0xd4>
     4de:	8f e8       	ldi	r24, 0x8F	; 143
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <disk_writep+0xc6>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <disk_writep+0xcc>
     4e8:	00 00       	nop
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) /* Wait for ready */
     4ea:	01 50       	subi	r16, 0x01	; 1
     4ec:	11 09       	sbc	r17, r1
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <disk_writep+0xd8>
     4f0:	08 e8       	ldi	r16, 0x88	; 136
     4f2:	13 e1       	ldi	r17, 0x13	; 19
     4f4:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     4f8:	8f 3f       	cpi	r24, 0xFF	; 255
     4fa:	19 f0       	breq	.+6      	; 0x502 <disk_writep+0xe6>
     4fc:	01 15       	cp	r16, r1
     4fe:	11 05       	cpc	r17, r1
     500:	71 f7       	brne	.-36     	; 0x4de <disk_writep+0xc2>
					_delay_us(100);
				if (bc)
     502:	01 2b       	or	r16, r17
     504:	09 f0       	breq	.+2      	; 0x508 <disk_writep+0xec>
					res = RES_OK;
     506:	c0 e0       	ldi	r28, 0x00	; 0
			}
			DESELECT();
     508:	85 b1       	in	r24, 0x05	; 5
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	85 b9       	out	0x05, r24	; 5
			rcv_spi();
     50e:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     512:	03 c0       	rjmp	.+6      	; 0x51a <disk_writep+0xfe>
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
     514:	c0 e0       	ldi	r28, 0x00	; 0
     516:	01 c0       	rjmp	.+2      	; 0x51a <disk_writep+0xfe>
{
	DRESULT     res;
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;
     518:	c1 e0       	ldi	r28, 0x01	; 1
			rcv_spi();
		}
	}

	return res;
}
     51a:	8c 2f       	mov	r24, r28
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <init_sd_card>:
	int ERROR = 0;

	/* Initialize physical drive */
	do {
		
		status = disk_initialize();
     526:	0e 94 cb 00 	call	0x196	; 0x196 <disk_initialize>
		if (status != 0) {
     52a:	81 11       	cpse	r24, r1
     52c:	0a c0       	rjmp	.+20     	; 0x542 <init_sd_card+0x1c>
			ERROR = 1; 
		} else {
			LED_OFF();
     52e:	88 b1       	in	r24, 0x08	; 8
     530:	8e 7f       	andi	r24, 0xFE	; 254
     532:	88 b9       	out	0x08, r24	; 8
			ERROR = 0;			
			/* Set SPI clock faster after initialization */
			SPCR = (1<<MSTR) | (0<<SPR1) | (0<<SPR0) | (1<<SPE);
     534:	80 e5       	ldi	r24, 0x50	; 80
     536:	8c bd       	out	0x2c, r24	; 44
			SPSR = (1<<SPI2X); 		
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	8d bd       	out	0x2d, r24	; 45
		status = disk_initialize();
		if (status != 0) {
			ERROR = 1; 
		} else {
			LED_OFF();
			ERROR = 0;			
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <init_sd_card+0x20>
	/* Initialize physical drive */
	do {
		
		status = disk_initialize();
		if (status != 0) {
			ERROR = 1; 
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
		/* The application will continue to try and initialize the card.
		 * If the LED is on, try taking out the SD card and putting
		 * it back in again.  After an operation has been interrupted this is
		 * sometimes necessary.
		 */
	} while (ERROR == 1);
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	71 f3       	breq	.-36     	; 0x526 <init_sd_card>

	/* Mount volume */
	result = pf_mount(&file_system);
     54a:	83 ea       	ldi	r24, 0xA3	; 163
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 c3 05 	call	0xb86	; 0xb86 <pf_mount>
	if (result != FR_OK){ // 0
		
	}

	/* Open file */
	result = pf_open(EXAMPLE_FILENAME);
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 dd 06 	call	0xdba	; 0xdba <pf_open>
	if (result != FR_OK) {
     55a:	88 23       	and	r24, r24
     55c:	81 f0       	breq	.+32     	; 0x57e <init_sd_card+0x58>
		if (result == FR_NO_FILE)
     55e:	83 30       	cpi	r24, 0x03	; 3
     560:	71 f4       	brne	.+28     	; 0x57e <init_sd_card+0x58>
		{
			while (1)
			{
				PORTC ^= (1 << PC0);
     562:	98 b1       	in	r25, 0x08	; 8
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	89 27       	eor	r24, r25
     568:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56a:	2f ef       	ldi	r18, 0xFF	; 255
     56c:	8e e9       	ldi	r24, 0x9E	; 158
     56e:	94 e2       	ldi	r25, 0x24	; 36
     570:	21 50       	subi	r18, 0x01	; 1
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	90 40       	sbci	r25, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <init_sd_card+0x4a>
     578:	00 c0       	rjmp	.+0      	; 0x57a <init_sd_card+0x54>
     57a:	00 00       	nop
     57c:	f2 cf       	rjmp	.-28     	; 0x562 <init_sd_card+0x3c>
     57e:	08 95       	ret

00000580 <main>:

void init_sd_card(void);
	
int main(void)
{
	DDRC = 1; // output led (p4)
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	87 b9       	out	0x07, r24	; 7
	LED_OFF();
     584:	88 b1       	in	r24, 0x08	; 8
     586:	8e 7f       	andi	r24, 0xFE	; 254
     588:	88 b9       	out	0x08, r24	; 8
	//_PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc))
	
	_PROTECTED_WRITE(CLKPR, ( (1<<CLKPCE) | ((0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (0<<CLKPS0)))); 

	/* Initialize card */
	init_sd_card();
     58a:	0e 94 93 02 	call	0x526	; 0x526 <init_sd_card>

	/* Set file pointer to beginning of file */
	pf_lseek(0);
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	cb 01       	movw	r24, r22
     594:	0e 94 1d 09 	call	0x123a	; 0x123a <pf_lseek>

	/* Write buffer */
	pf_write(write_buffer, BUFFER_SIZE, &byte_counter);
     598:	45 e9       	ldi	r20, 0x95	; 149
     59a:	51 e0       	ldi	r21, 0x01	; 1
     59c:	6a e0       	ldi	r22, 0x0A	; 10
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 11 08 	call	0x1022	; 0x1022 <pf_write>
		/* End of file */
		
	}

	/* Finalize write */
	pf_write(0, 0, &byte_counter);
     5a8:	45 e9       	ldi	r20, 0x95	; 149
     5aa:	51 e0       	ldi	r21, 0x01	; 1
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 11 08 	call	0x1022	; 0x1022 <pf_write>

	/* Reset file pointer to beginning of file */
	pf_lseek(0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	cb 01       	movw	r24, r22
     5be:	0e 94 1d 09 	call	0x123a	; 0x123a <pf_lseek>

	/* Read back the same bytes */
	pf_read(read_buffer, BUFFER_SIZE, &byte_counter);
     5c2:	45 e9       	ldi	r20, 0x95	; 149
     5c4:	51 e0       	ldi	r21, 0x01	; 1
     5c6:	6a e0       	ldi	r22, 0x0A	; 10
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	87 e9       	ldi	r24, 0x97	; 151
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 2e 07 	call	0xe5c	; 0xe5c <pf_read>

	/* Check they're the same */
	while (byte_counter) {
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <main+0x72>
		if (write_buffer[byte_counter] != read_buffer[byte_counter]) {
     5d4:	fc 01       	movw	r30, r24
     5d6:	e0 50       	subi	r30, 0x00	; 0
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
     5da:	30 81       	ld	r19, Z
     5dc:	fc 01       	movw	r30, r24
     5de:	e9 56       	subi	r30, 0x69	; 105
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	32 13       	cpse	r19, r18
     5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <main+0x66>
			/* ERROR! */
		//	LED_ON();
			while (1)
				;
		}
		byte_counter--;
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <byte_counter+0x1>
     5ee:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <byte_counter>

	/* Read back the same bytes */
	pf_read(read_buffer, BUFFER_SIZE, &byte_counter);

	/* Check they're the same */
	while (byte_counter) {
     5f2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <byte_counter>
     5f6:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <byte_counter+0x1>
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	59 f7       	brne	.-42     	; 0x5d4 <main+0x54>
     5fe:	ff cf       	rjmp	.-2      	; 0x5fe <main+0x7e>

00000600 <mem_set>:

static FATFS *FatFs; /* Pointer to the file system object (logical drive) */

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
     600:	fc 01       	movw	r30, r24
	char *d = (char *)dst;
	while (cnt--)
     602:	03 c0       	rjmp	.+6      	; 0x60a <mem_set+0xa>
		*d++ = (char)val;
     604:	60 83       	st	Z, r22

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
	char *d = (char *)dst;
	while (cnt--)
     606:	ac 01       	movw	r20, r24
		*d++ = (char)val;
     608:	31 96       	adiw	r30, 0x01	; 1

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
	char *d = (char *)dst;
	while (cnt--)
     60a:	ca 01       	movw	r24, r20
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	45 2b       	or	r20, r21
     610:	c9 f7       	brne	.-14     	; 0x604 <mem_set+0x4>
		*d++ = (char)val;
}
     612:	08 95       	ret

00000614 <mem_cmp>:

/* Compare memory to memory */
static int mem_cmp(const void *dst, const void *src, int cnt)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	dc 01       	movw	r26, r24
     61a:	fb 01       	movw	r30, r22
	const char *d = (const char *)dst, *s = (const char *)src;
	int         r = 0;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
	while (cnt-- && (r = *d++ - *s++) == 0)
     620:	02 c0       	rjmp	.+4      	; 0x626 <mem_cmp+0x12>
     622:	fb 01       	movw	r30, r22
     624:	de 01       	movw	r26, r28
     626:	9a 01       	movw	r18, r20
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	31 09       	sbc	r19, r1
     62c:	45 2b       	or	r20, r21
     62e:	61 f0       	breq	.+24     	; 0x648 <mem_cmp+0x34>
     630:	ed 01       	movw	r28, r26
     632:	21 96       	adiw	r28, 0x01	; 1
     634:	8c 91       	ld	r24, X
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	bf 01       	movw	r22, r30
     63a:	6f 5f       	subi	r22, 0xFF	; 255
     63c:	7f 4f       	sbci	r23, 0xFF	; 255
     63e:	40 81       	ld	r20, Z
     640:	84 1b       	sub	r24, r20
     642:	91 09       	sbc	r25, r1
     644:	a9 01       	movw	r20, r18
     646:	69 f3       	breq	.-38     	; 0x622 <mem_cmp+0xe>
		;
	return r;
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect(           /* !=0: Sector number, 0: Failed - invalid cluster# */
                        CLUST clst /* Cluster# to be converted */
)
{
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
	FATFS *fs = FatFs;
     652:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <FatFs>
     656:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <FatFs+0x1>

	clst -= 2;
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	22 50       	subi	r18, 0x02	; 2
     660:	31 09       	sbc	r19, r1
     662:	41 09       	sbc	r20, r1
     664:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2))
     666:	86 81       	ldd	r24, Z+6	; 0x06
     668:	97 81       	ldd	r25, Z+7	; 0x07
     66a:	a0 85       	ldd	r26, Z+8	; 0x08
     66c:	b1 85       	ldd	r27, Z+9	; 0x09
     66e:	02 97       	sbiw	r24, 0x02	; 2
     670:	a1 09       	sbc	r26, r1
     672:	b1 09       	sbc	r27, r1
     674:	28 17       	cp	r18, r24
     676:	39 07       	cpc	r19, r25
     678:	4a 07       	cpc	r20, r26
     67a:	5b 07       	cpc	r21, r27
     67c:	68 f4       	brcc	.+26     	; 0x698 <clust2sect+0x4a>
		return 0; /* Invalid cluster# */
	return (DWORD)clst * fs->csize + fs->database;
     67e:	a2 81       	ldd	r26, Z+2	; 0x02
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__muluhisi3>
     686:	02 89       	ldd	r16, Z+18	; 0x12
     688:	13 89       	ldd	r17, Z+19	; 0x13
     68a:	24 89       	ldd	r18, Z+20	; 0x14
     68c:	35 89       	ldd	r19, Z+21	; 0x15
     68e:	60 0f       	add	r22, r16
     690:	71 1f       	adc	r23, r17
     692:	82 1f       	adc	r24, r18
     694:	93 1f       	adc	r25, r19
     696:	03 c0       	rjmp	.+6      	; 0x69e <clust2sect+0x50>
{
	FATFS *fs = FatFs;

	clst -= 2;
	if (clst >= (fs->n_fatent - 2))
		return 0; /* Invalid cluster# */
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <get_clust>:

static CLUST get_clust(BYTE *dir /* Pointer to directory entry */
)
{
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	fc 01       	movw	r30, r24
	FATFS *fs   = FatFs;
	CLUST  clst = 0;

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir + DIR_FstClusHI);
     6aa:	64 89       	ldd	r22, Z+20	; 0x14
     6ac:	75 89       	ldd	r23, Z+21	; 0x15
     6ae:	cb 01       	movw	r24, r22
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
		clst <<= 16;
     6b4:	bc 01       	movw	r22, r24
     6b6:	55 27       	eor	r21, r21
     6b8:	44 27       	eor	r20, r20
	}
	clst |= LD_WORD(dir + DIR_FstClusLO);
     6ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     6bc:	93 8d       	ldd	r25, Z+27	; 0x1b
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	8c 01       	movw	r16, r24
     6c4:	9d 01       	movw	r18, r26
     6c6:	04 2b       	or	r16, r20
     6c8:	15 2b       	or	r17, r21
     6ca:	26 2b       	or	r18, r22
     6cc:	37 2b       	or	r19, r23
     6ce:	c9 01       	movw	r24, r18
     6d0:	b8 01       	movw	r22, r16

	return clst;
}
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <dir_rewind>:
/* Directory handling - Rewind directory index                           */
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind(DIR *dj /* Pointer to directory object */
)
{
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	fc 01       	movw	r30, r24
	CLUST  clst;
	FATFS *fs = FatFs;
     6e2:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <FatFs>
     6e6:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <FatFs+0x1>

	dj->index = 0;
     6ea:	11 82       	std	Z+1, r1	; 0x01
     6ec:	10 82       	st	Z, r1
	clst      = dj->sclust;
     6ee:	64 81       	ldd	r22, Z+4	; 0x04
     6f0:	75 81       	ldd	r23, Z+5	; 0x05
     6f2:	86 81       	ldd	r24, Z+6	; 0x06
     6f4:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent) /* Check start cluster range */
     6f6:	61 30       	cpi	r22, 0x01	; 1
     6f8:	71 05       	cpc	r23, r1
     6fa:	81 05       	cpc	r24, r1
     6fc:	91 05       	cpc	r25, r1
     6fe:	19 f1       	breq	.+70     	; 0x746 <dir_rewind+0x6e>
     700:	16 96       	adiw	r26, 0x06	; 6
     702:	0d 91       	ld	r16, X+
     704:	1d 91       	ld	r17, X+
     706:	2d 91       	ld	r18, X+
     708:	3c 91       	ld	r19, X
     70a:	19 97       	sbiw	r26, 0x09	; 9
     70c:	60 17       	cp	r22, r16
     70e:	71 07       	cpc	r23, r17
     710:	82 07       	cpc	r24, r18
     712:	93 07       	cpc	r25, r19
     714:	d0 f4       	brcc	.+52     	; 0x74a <dir_rewind+0x72>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst
     716:	61 15       	cp	r22, r1
     718:	71 05       	cpc	r23, r1
     71a:	81 05       	cpc	r24, r1
     71c:	91 05       	cpc	r25, r1
     71e:	31 f4       	brne	.+12     	; 0x72c <dir_rewind+0x54>
	    && (_FS_32ONLY || fs->fs_type == FS_FAT32)) /* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
     720:	1e 96       	adiw	r26, 0x0e	; 14
     722:	6d 91       	ld	r22, X+
     724:	7d 91       	ld	r23, X+
     726:	8d 91       	ld	r24, X+
     728:	9c 91       	ld	r25, X
     72a:	51 97       	sbiw	r26, 0x11	; 17
     72c:	ef 01       	movw	r28, r30
	dj->clust = clst;                                                  /* Current cluster */
     72e:	60 87       	std	Z+8, r22	; 0x08
     730:	71 87       	std	Z+9, r23	; 0x09
     732:	82 87       	std	Z+10, r24	; 0x0a
     734:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect  = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase; /* Current sector */
     736:	0e 94 27 03 	call	0x64e	; 0x64e <clust2sect>
     73a:	6c 87       	std	Y+12, r22	; 0x0c
     73c:	7d 87       	std	Y+13, r23	; 0x0d
     73e:	8e 87       	std	Y+14, r24	; 0x0e
     740:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK; /* Seek succeeded */
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	03 c0       	rjmp	.+6      	; 0x74c <dir_rewind+0x74>
	FATFS *fs = FatFs;

	dj->index = 0;
	clst      = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent) /* Check start cluster range */
		return FR_DISK_ERR;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	01 c0       	rjmp	.+2      	; 0x74c <dir_rewind+0x74>
     74a:	81 e0       	ldi	r24, 0x01	; 1
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;                                                  /* Current cluster */
	dj->sect  = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase; /* Current sector */

	return FR_OK; /* Seek succeeded */
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <create_name>:
/*-----------------------------------------------------------------------*/

static FRESULT create_name(DIR *        dj,  /* Pointer to the directory object */
                           const char **path /* Pointer to pointer to the segment in the path string */
)
{
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	eb 01       	movw	r28, r22
	static const BYTE cvt[] = _EXCVT;
#endif
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
     760:	fc 01       	movw	r30, r24
     762:	02 81       	ldd	r16, Z+2	; 0x02
     764:	13 81       	ldd	r17, Z+3	; 0x03
	mem_set(sfn, ' ', 11);
     766:	4b e0       	ldi	r20, 0x0B	; 11
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	60 e2       	ldi	r22, 0x20	; 32
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 00 03 	call	0x600	; 0x600 <mem_set>
	si = i = 0;
	ni     = 8;
	p      = *path;
     774:	28 81       	ld	r18, Y
     776:	39 81       	ldd	r19, Y+1	; 0x01
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0;
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	80 e0       	ldi	r24, 0x00	; 0
	ni     = 8;
     77c:	58 e0       	ldi	r21, 0x08	; 8
     77e:	01 c0       	rjmp	.+2      	; 0x782 <create_name+0x2c>
     780:	84 2f       	mov	r24, r20
	p      = *path;
	for (;;) {
		c = p[si++];
     782:	41 e0       	ldi	r20, 0x01	; 1
     784:	48 0f       	add	r20, r24
     786:	f9 01       	movw	r30, r18
     788:	e8 0f       	add	r30, r24
     78a:	f1 1d       	adc	r31, r1
     78c:	e0 81       	ld	r30, Z
		if (c <= ' ' || c == '/')
     78e:	e1 32       	cpi	r30, 0x21	; 33
     790:	f0 f0       	brcs	.+60     	; 0x7ce <create_name+0x78>
     792:	ef 32       	cpi	r30, 0x2F	; 47
     794:	e1 f0       	breq	.+56     	; 0x7ce <create_name+0x78>
			break; /* Break on end of segment */
		if (c == '.' || i >= ni) {
     796:	ee 32       	cpi	r30, 0x2E	; 46
     798:	11 f0       	breq	.+4      	; 0x79e <create_name+0x48>
     79a:	95 17       	cp	r25, r21
     79c:	38 f0       	brcs	.+14     	; 0x7ac <create_name+0x56>
			if (ni != 8 || c != '.')
     79e:	58 30       	cpi	r21, 0x08	; 8
     7a0:	b1 f4       	brne	.+44     	; 0x7ce <create_name+0x78>
     7a2:	ee 32       	cpi	r30, 0x2E	; 46
     7a4:	a1 f4       	brne	.+40     	; 0x7ce <create_name+0x78>
				break;
			i  = 8;
     7a6:	98 e0       	ldi	r25, 0x08	; 8
			ni = 11;
     7a8:	5b e0       	ldi	r21, 0x0B	; 11
     7aa:	ea cf       	rjmp	.-44     	; 0x780 <create_name+0x2a>
			continue;
		}
#if _USE_LCC
#ifdef _EXCVT
		if (c >= 0x80) /* To upper extended char (SBCS) */
     7ac:	ee 23       	and	r30, r30
     7ae:	24 f4       	brge	.+8      	; 0x7b8 <create_name+0x62>
			c = cvt[c - 0x80];
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ee 56       	subi	r30, 0x6E	; 110
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	e0 81       	ld	r30, Z
			sfn[i++] = c;
			sfn[i++] = d;
		} else
#endif
		{ /* Single byte code */
			if (_USE_LCC && IsLower(c))
     7b8:	8f e9       	ldi	r24, 0x9F	; 159
     7ba:	8e 0f       	add	r24, r30
     7bc:	8a 31       	cpi	r24, 0x1A	; 26
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <create_name+0x6c>
				c -= 0x20; /* toupper */
     7c0:	e0 52       	subi	r30, 0x20	; 32
			sfn[i++] = c;
     7c2:	d8 01       	movw	r26, r16
     7c4:	a9 0f       	add	r26, r25
     7c6:	b1 1d       	adc	r27, r1
     7c8:	ec 93       	st	X, r30
     7ca:	9f 5f       	subi	r25, 0xFF	; 255
     7cc:	d9 cf       	rjmp	.-78     	; 0x780 <create_name+0x2a>
		}
	}
	*path = &p[si]; /* Rerurn pointer to the next segment */
     7ce:	24 0f       	add	r18, r20
     7d0:	31 1d       	adc	r19, r1
     7d2:	39 83       	std	Y+1, r19	; 0x01
     7d4:	28 83       	st	Y, r18

	sfn[11] = (c <= ' ') ? 1 : 0; /* Set last segment flag if end of path */
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	e1 32       	cpi	r30, 0x21	; 33
     7da:	08 f0       	brcs	.+2      	; 0x7de <create_name+0x88>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	f8 01       	movw	r30, r16
     7e0:	83 87       	std	Z+11, r24	; 0x0b

	return FR_OK;
}
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <check_fs>:

static BYTE check_fs(/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
                     BYTE *buf, /* Working buffer */
                     DWORD sect /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	ec 01       	movw	r28, r24
     800:	6a 01       	movw	r12, r20
     802:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2)) /* Read the boot record */
     804:	02 e0       	ldi	r16, 0x02	; 2
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	2e ef       	ldi	r18, 0xFE	; 254
     80a:	31 e0       	ldi	r19, 0x01	; 1
     80c:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     810:	81 11       	cpse	r24, r1
     812:	15 c0       	rjmp	.+42     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		return 3;
	if (LD_WORD(buf) != 0xAA55) /* Check record signature */
     814:	88 81       	ld	r24, Y
     816:	99 81       	ldd	r25, Y+1	; 0x01
     818:	85 35       	cpi	r24, 0x55	; 85
     81a:	9a 4a       	sbci	r25, 0xAA	; 170
     81c:	91 f4       	brne	.+36     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
     81e:	22 e5       	ldi	r18, 0x52	; 82
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	b7 01       	movw	r22, r14
     824:	a6 01       	movw	r20, r12
     826:	ce 01       	movw	r24, r28
     828:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     82c:	81 11       	cpse	r24, r1
     82e:	0b c0       	rjmp	.+22     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     830:	88 81       	ld	r24, Y
     832:	99 81       	ldd	r25, Y+1	; 0x01
     834:	86 34       	cpi	r24, 0x46	; 70
     836:	91 44       	sbci	r25, 0x41	; 65
     838:	41 f0       	breq	.+16     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		return 0;
	return 1;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	07 c0       	rjmp	.+14     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
                     BYTE *buf, /* Working buffer */
                     DWORD sect /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2)) /* Read the boot record */
		return 3;
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	05 c0       	rjmp	.+10     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
	if (LD_WORD(buf) != 0xAA55) /* Check record signature */
		return 2;
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	03 c0       	rjmp	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
		return 0;
	return 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	01 c0       	rjmp	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
		return 0;
     84a:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	08 95       	ret

0000085e <get_fat>:
/*-----------------------------------------------------------------------*/

static CLUST get_fat(           /* 1:IO error, Else:Cluster status */
                     CLUST clst /* Cluster# to get the link information */
)
{
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <get_fat+0x12>
     870:	00 d0       	rcall	.+0      	; 0x872 <get_fat+0x14>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
	BYTE   buf[4];
	FATFS *fs = FatFs;
     876:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <FatFs>
     87a:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <FatFs+0x1>

	if (clst < 2 || clst >= fs->n_fatent) /* Range check */
     87e:	62 30       	cpi	r22, 0x02	; 2
     880:	71 05       	cpc	r23, r1
     882:	81 05       	cpc	r24, r1
     884:	91 05       	cpc	r25, r1
     886:	b8 f1       	brcs	.+110    	; 0x8f6 <get_fat+0x98>
     888:	06 81       	ldd	r16, Z+6	; 0x06
     88a:	17 81       	ldd	r17, Z+7	; 0x07
     88c:	20 85       	ldd	r18, Z+8	; 0x08
     88e:	31 85       	ldd	r19, Z+9	; 0x09
     890:	60 17       	cp	r22, r16
     892:	71 07       	cpc	r23, r17
     894:	82 07       	cpc	r24, r18
     896:	93 07       	cpc	r25, r19
     898:	98 f5       	brcc	.+102    	; 0x900 <__stack+0x1>
		return 1;

	switch (fs->fs_type) {
     89a:	20 81       	ld	r18, Z
     89c:	23 30       	cpi	r18, 0x03	; 3
     89e:	a9 f5       	brne	.+106    	; 0x90a <__stack+0xb>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
			break;
		return LD_WORD(buf);
#endif
#if _FS_FAT32
	case FS_FAT32:
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4))
     8a4:	9c 01       	movw	r18, r24
     8a6:	2f 77       	andi	r18, 0x7F	; 127
     8a8:	33 27       	eor	r19, r19
     8aa:	c2 84       	ldd	r12, Z+10	; 0x0a
     8ac:	d3 84       	ldd	r13, Z+11	; 0x0b
     8ae:	e4 84       	ldd	r14, Z+12	; 0x0c
     8b0:	f5 84       	ldd	r15, Z+13	; 0x0d
     8b2:	68 94       	set
     8b4:	16 f8       	bld	r1, 6
     8b6:	b6 95       	lsr	r27
     8b8:	a7 95       	ror	r26
     8ba:	97 95       	ror	r25
     8bc:	87 95       	ror	r24
     8be:	16 94       	lsr	r1
     8c0:	d1 f7       	brne	.-12     	; 0x8b6 <get_fat+0x58>
     8c2:	22 0f       	add	r18, r18
     8c4:	33 1f       	adc	r19, r19
     8c6:	22 0f       	add	r18, r18
     8c8:	33 1f       	adc	r19, r19
     8ca:	b7 01       	movw	r22, r14
     8cc:	a6 01       	movw	r20, r12
     8ce:	48 0f       	add	r20, r24
     8d0:	59 1f       	adc	r21, r25
     8d2:	6a 1f       	adc	r22, r26
     8d4:	7b 1f       	adc	r23, r27
     8d6:	04 e0       	ldi	r16, 0x04	; 4
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	ce 01       	movw	r24, r28
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     8e2:	81 11       	cpse	r24, r1
     8e4:	17 c0       	rjmp	.+46     	; 0x914 <__stack+0x15>
			break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	ab 81       	ldd	r26, Y+3	; 0x03
     8ec:	bc 81       	ldd	r27, Y+4	; 0x04
     8ee:	bc 01       	movw	r22, r24
     8f0:	cd 01       	movw	r24, r26
     8f2:	9f 70       	andi	r25, 0x0F	; 15
     8f4:	13 c0       	rjmp	.+38     	; 0x91c <__stack+0x1d>
{
	BYTE   buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent) /* Range check */
		return 1;
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e c0       	rjmp	.+28     	; 0x91c <__stack+0x1d>
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	09 c0       	rjmp	.+18     	; 0x91c <__stack+0x1d>
			break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1; /* An error occured at the disk I/O layer */
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	04 c0       	rjmp	.+8      	; 0x91c <__stack+0x1d>
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
}
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	08 95       	ret

00000936 <dir_next>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_next(        /* FR_OK:Succeeded, FR_NO_FILE:End of table */
                        DIR *dj /* Pointer to directory object */
)
{
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
	CLUST  clst;
	WORD   i;
	FATFS *fs = FatFs;
     946:	e0 90 a1 01 	lds	r14, 0x01A1	; 0x8001a1 <FatFs>
     94a:	f0 90 a2 01 	lds	r15, 0x01A2	; 0x8001a2 <FatFs+0x1>

	i = dj->index + 1;
     94e:	fc 01       	movw	r30, r24
     950:	c0 81       	ld	r28, Z
     952:	d1 81       	ldd	r29, Z+1	; 0x01
     954:	21 96       	adiw	r28, 0x01	; 1
	if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
     956:	09 f4       	brne	.+2      	; 0x95a <dir_next+0x24>
     958:	5c c0       	rjmp	.+184    	; 0xa12 <dir_next+0xdc>
     95a:	44 85       	ldd	r20, Z+12	; 0x0c
     95c:	55 85       	ldd	r21, Z+13	; 0x0d
     95e:	66 85       	ldd	r22, Z+14	; 0x0e
     960:	77 85       	ldd	r23, Z+15	; 0x0f
     962:	41 15       	cp	r20, r1
     964:	51 05       	cpc	r21, r1
     966:	61 05       	cpc	r22, r1
     968:	71 05       	cpc	r23, r1
     96a:	09 f4       	brne	.+2      	; 0x96e <dir_next+0x38>
     96c:	54 c0       	rjmp	.+168    	; 0xa16 <dir_next+0xe0>
     96e:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % 16)) { /* Sector changed? */
     970:	ce 01       	movw	r24, r28
     972:	8f 70       	andi	r24, 0x0F	; 15
     974:	99 27       	eor	r25, r25
     976:	89 2b       	or	r24, r25
     978:	09 f0       	breq	.+2      	; 0x97c <dir_next+0x46>
     97a:	46 c0       	rjmp	.+140    	; 0xa08 <dir_next+0xd2>
		dj->sect++;  /* Next sector */
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	6f 4f       	sbci	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	44 87       	std	Z+12, r20	; 0x0c
     986:	55 87       	std	Z+13, r21	; 0x0d
     988:	66 87       	std	Z+14, r22	; 0x0e
     98a:	77 87       	std	Z+15, r23	; 0x0f

		if (dj->clust == 0) {       /* Static table */
     98c:	40 85       	ldd	r20, Z+8	; 0x08
     98e:	51 85       	ldd	r21, Z+9	; 0x09
     990:	62 85       	ldd	r22, Z+10	; 0x0a
     992:	73 85       	ldd	r23, Z+11	; 0x0b
     994:	41 15       	cp	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	61 05       	cpc	r22, r1
     99a:	71 05       	cpc	r23, r1
     99c:	39 f4       	brne	.+14     	; 0x9ac <dir_next+0x76>
			if (i >= fs->n_rootdir) /* Report EOT when end of table */
     99e:	f7 01       	movw	r30, r14
     9a0:	84 81       	ldd	r24, Z+4	; 0x04
     9a2:	95 81       	ldd	r25, Z+5	; 0x05
     9a4:	c8 17       	cp	r28, r24
     9a6:	d9 07       	cpc	r29, r25
     9a8:	c0 f5       	brcc	.+112    	; 0xa1a <dir_next+0xe4>
     9aa:	2e c0       	rjmp	.+92     	; 0xa08 <dir_next+0xd2>
				return FR_NO_FILE;
		} else {                                     /* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) { /* Cluster changed? */
     9ac:	f7 01       	movw	r30, r14
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	9e 01       	movw	r18, r28
     9b6:	32 95       	swap	r19
     9b8:	22 95       	swap	r18
     9ba:	2f 70       	andi	r18, 0x0F	; 15
     9bc:	23 27       	eor	r18, r19
     9be:	3f 70       	andi	r19, 0x0F	; 15
     9c0:	23 27       	eor	r18, r19
     9c2:	82 23       	and	r24, r18
     9c4:	93 23       	and	r25, r19
     9c6:	89 2b       	or	r24, r25
     9c8:	f9 f4       	brne	.+62     	; 0xa08 <dir_next+0xd2>
				clst = get_fat(dj->clust);           /* Get next cluster */
     9ca:	cb 01       	movw	r24, r22
     9cc:	ba 01       	movw	r22, r20
     9ce:	0e 94 2f 04 	call	0x85e	; 0x85e <get_fat>
				if (clst <= 1)
     9d2:	62 30       	cpi	r22, 0x02	; 2
     9d4:	71 05       	cpc	r23, r1
     9d6:	81 05       	cpc	r24, r1
     9d8:	91 05       	cpc	r25, r1
     9da:	08 f1       	brcs	.+66     	; 0xa1e <dir_next+0xe8>
					return FR_DISK_ERR;
				if (clst >= fs->n_fatent) /* When it reached end of dynamic table */
     9dc:	f7 01       	movw	r30, r14
     9de:	c6 80       	ldd	r12, Z+6	; 0x06
     9e0:	d7 80       	ldd	r13, Z+7	; 0x07
     9e2:	e0 84       	ldd	r14, Z+8	; 0x08
     9e4:	f1 84       	ldd	r15, Z+9	; 0x09
     9e6:	6c 15       	cp	r22, r12
     9e8:	7d 05       	cpc	r23, r13
     9ea:	8e 05       	cpc	r24, r14
     9ec:	9f 05       	cpc	r25, r15
     9ee:	c8 f4       	brcc	.+50     	; 0xa22 <dir_next+0xec>
					return FR_NO_FILE;    /* Report EOT */
				dj->clust = clst;         /* Initialize data for new cluster */
     9f0:	f8 01       	movw	r30, r16
     9f2:	60 87       	std	Z+8, r22	; 0x08
     9f4:	71 87       	std	Z+9, r23	; 0x09
     9f6:	82 87       	std	Z+10, r24	; 0x0a
     9f8:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect  = clust2sect(clst);
     9fa:	0e 94 27 03 	call	0x64e	; 0x64e <clust2sect>
     9fe:	f8 01       	movw	r30, r16
     a00:	64 87       	std	Z+12, r22	; 0x0c
     a02:	75 87       	std	Z+13, r23	; 0x0d
     a04:	86 87       	std	Z+14, r24	; 0x0e
     a06:	97 87       	std	Z+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     a08:	f8 01       	movw	r30, r16
     a0a:	d1 83       	std	Z+1, r29	; 0x01
     a0c:	c0 83       	st	Z, r28

	return FR_OK;
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	09 c0       	rjmp	.+18     	; 0xa24 <dir_next+0xee>
	WORD   i;
	FATFS *fs = FatFs;

	i = dj->index + 1;
	if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	07 c0       	rjmp	.+14     	; 0xa24 <dir_next+0xee>
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <dir_next+0xee>
	if (!(i % 16)) { /* Sector changed? */
		dj->sect++;  /* Next sector */

		if (dj->clust == 0) {       /* Static table */
			if (i >= fs->n_rootdir) /* Report EOT when end of table */
				return FR_NO_FILE;
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <dir_next+0xee>
		} else {                                     /* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) { /* Cluster changed? */
				clst = get_fat(dj->clust);           /* Get next cluster */
				if (clst <= 1)
					return FR_DISK_ERR;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <dir_next+0xee>
				if (clst >= fs->n_fatent) /* When it reached end of dynamic table */
					return FR_NO_FILE;    /* Report EOT */
     a22:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	df 90       	pop	r13
     a32:	cf 90       	pop	r12
     a34:	08 95       	ret

00000a36 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find(DIR * dj, /* Pointer to the directory object linked to the file name */
                        BYTE *dir /* 32-byte working buffer */
)
{
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	ec 01       	movw	r28, r24
     a46:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE    c;

	res = dir_rewind(dj); /* Rewind directory object */
     a48:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <dir_rewind>
	if (res != FR_OK)
     a4c:	81 11       	cpse	r24, r1
     a4e:	37 c0       	rjmp	.+110    	; 0xabe <dir_find+0x88>
		return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     a50:	28 81       	ld	r18, Y
     a52:	39 81       	ldd	r19, Y+1	; 0x01
     a54:	2f 70       	andi	r18, 0x0F	; 15
     a56:	33 27       	eor	r19, r19
     a58:	22 0f       	add	r18, r18
     a5a:	33 1f       	adc	r19, r19
     a5c:	22 95       	swap	r18
     a5e:	32 95       	swap	r19
     a60:	30 7f       	andi	r19, 0xF0	; 240
     a62:	32 27       	eor	r19, r18
     a64:	20 7f       	andi	r18, 0xF0	; 240
     a66:	32 27       	eor	r19, r18
     a68:	4c 85       	ldd	r20, Y+12	; 0x0c
     a6a:	5d 85       	ldd	r21, Y+13	; 0x0d
     a6c:	6e 85       	ldd	r22, Y+14	; 0x0e
     a6e:	7f 85       	ldd	r23, Y+15	; 0x0f
     a70:	00 e2       	ldi	r16, 0x20	; 32
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	c6 01       	movw	r24, r12
     a76:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
		          ? FR_DISK_ERR
		          : FR_OK;
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	81 11       	cpse	r24, r1
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <dir_find+0x4c>
     a80:	90 e0       	ldi	r25, 0x00	; 0
	res = dir_rewind(dj); /* Rewind directory object */
	if (res != FR_OK)
		return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     a82:	f9 2e       	mov	r15, r25
		          ? FR_DISK_ERR
		          : FR_OK;
		if (res != FR_OK)
     a84:	91 11       	cpse	r25, r1
     a86:	16 c0       	rjmp	.+44     	; 0xab4 <dir_find+0x7e>
			break;
		c = dir[DIR_Name]; /* First character */
     a88:	f6 01       	movw	r30, r12
     a8a:	80 81       	ld	r24, Z
		if (c == 0) { ///// hieerrr fout misschien
     a8c:	88 23       	and	r24, r24
     a8e:	a1 f0       	breq	.+40     	; 0xab8 <dir_find+0x82>
			res = FR_NO_FILE;
			break;
		}                                                           /* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     a90:	83 85       	ldd	r24, Z+11	; 0x0b
     a92:	83 fd       	sbrc	r24, 3
     a94:	09 c0       	rjmp	.+18     	; 0xaa8 <dir_find+0x72>
     a96:	6a 81       	ldd	r22, Y+2	; 0x02
     a98:	7b 81       	ldd	r23, Y+3	; 0x03
     a9a:	4b e0       	ldi	r20, 0x0B	; 11
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	c6 01       	movw	r24, r12
     aa0:	0e 94 0a 03 	call	0x614	; 0x614 <mem_cmp>
     aa4:	89 2b       	or	r24, r25
     aa6:	51 f0       	breq	.+20     	; 0xabc <dir_find+0x86>
			break;
		res = dir_next(dj); /* Next entry */
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 9b 04 	call	0x936	; 0x936 <dir_next>
	} while (res == FR_OK);
     aae:	88 23       	and	r24, r24
     ab0:	79 f2       	breq	.-98     	; 0xa50 <dir_find+0x1a>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <dir_find+0x88>
	res = dir_rewind(dj); /* Rewind directory object */
	if (res != FR_OK)
		return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     ab4:	89 2f       	mov	r24, r25
     ab6:	03 c0       	rjmp	.+6      	; 0xabe <dir_find+0x88>
		          : FR_OK;
		if (res != FR_OK)
			break;
		c = dir[DIR_Name]; /* First character */
		if (c == 0) { ///// hieerrr fout misschien
			res = FR_NO_FILE;
     ab8:	83 e0       	ldi	r24, 0x03	; 3
     aba:	01 c0       	rjmp	.+2      	; 0xabe <dir_find+0x88>
	res = dir_rewind(dj); /* Rewind directory object */
	if (res != FR_OK)
		return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     abc:	8f 2d       	mov	r24, r15
			break;
		res = dir_next(dj); /* Next entry */
	} while (res == FR_OK);

	return res;
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret

00000ace <follow_path>:
static FRESULT follow_path(                 /* FR_OK(0): successful, !=0: error code */
                           DIR *       dj,  /* Directory object to return last directory and found object */
                           BYTE *      dir, /* 32-byte working buffer */
                           const char *path /* Full-path string to find a file or directory */
)
{
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <follow_path+0xe>
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	8c 01       	movw	r16, r24
     ae2:	7b 01       	movw	r14, r22
     ae4:	5a 83       	std	Y+2, r21	; 0x02
     ae6:	49 83       	std	Y+1, r20	; 0x01
	FRESULT res;

	while (*path == ' ')
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <follow_path+0x22>
		path++; /* Strip leading spaces */
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	fa 83       	std	Y+2, r31	; 0x02
     aee:	e9 83       	std	Y+1, r30	; 0x01
                           const char *path /* Full-path string to find a file or directory */
)
{
	FRESULT res;

	while (*path == ' ')
     af0:	e9 81       	ldd	r30, Y+1	; 0x01
     af2:	fa 81       	ldd	r31, Y+2	; 0x02
     af4:	80 81       	ld	r24, Z
     af6:	80 32       	cpi	r24, 0x20	; 32
     af8:	c1 f3       	breq	.-16     	; 0xaea <follow_path+0x1c>
		path++; /* Strip leading spaces */
	if (*path == '/')
     afa:	8f 32       	cpi	r24, 0x2F	; 47
     afc:	19 f4       	brne	.+6      	; 0xb04 <follow_path+0x36>
		path++;     /* Strip heading separator if exist */
     afe:	31 96       	adiw	r30, 0x01	; 1
     b00:	fa 83       	std	Y+2, r31	; 0x02
     b02:	e9 83       	std	Y+1, r30	; 0x01
	dj->sclust = 0; /* Set start directory (always root dir) */
     b04:	d8 01       	movw	r26, r16
     b06:	14 96       	adiw	r26, 0x04	; 4
     b08:	1d 92       	st	X+, r1
     b0a:	1d 92       	st	X+, r1
     b0c:	1d 92       	st	X+, r1
     b0e:	1c 92       	st	X, r1
     b10:	17 97       	sbiw	r26, 0x07	; 7

	if ((BYTE)*path < ' ') { /* Null path means the root directory */
     b12:	e9 81       	ldd	r30, Y+1	; 0x01
     b14:	fa 81       	ldd	r31, Y+2	; 0x02
     b16:	80 81       	ld	r24, Z
     b18:	80 32       	cpi	r24, 0x20	; 32
     b1a:	30 f4       	brcc	.+12     	; 0xb28 <follow_path+0x5a>
		res    = dir_rewind(dj);
     b1c:	c8 01       	movw	r24, r16
     b1e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <dir_rewind>
		dir[0] = 0;
     b22:	f7 01       	movw	r30, r14
     b24:	10 82       	st	Z, r1
     b26:	26 c0       	rjmp	.+76     	; 0xb74 <follow_path+0xa6>

	} else { /* Follow path */
		for (;;) {
			res = create_name(dj, &path); /* Get a segment */
     b28:	be 01       	movw	r22, r28
     b2a:	6f 5f       	subi	r22, 0xFF	; 255
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	c8 01       	movw	r24, r16
     b30:	0e 94 ab 03 	call	0x756	; 0x756 <create_name>
			if (res != FR_OK)
     b34:	81 11       	cpse	r24, r1
     b36:	1e c0       	rjmp	.+60     	; 0xb74 <follow_path+0xa6>
				break;
			res = dir_find(dj, dir); /* Find it */ // het gaat denk ik hier fout
     b38:	b7 01       	movw	r22, r14
     b3a:	c8 01       	movw	r24, r16
     b3c:	0e 94 1b 05 	call	0xa36	; 0xa36 <dir_find>
			if (res != FR_OK)
     b40:	81 11       	cpse	r24, r1
     b42:	18 c0       	rjmp	.+48     	; 0xb74 <follow_path+0xa6>
				break; /* Could not find the object */
			if (dj->fn[11])
     b44:	d8 01       	movw	r26, r16
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	ed 91       	ld	r30, X+
     b4a:	fc 91       	ld	r31, X
     b4c:	13 97       	sbiw	r26, 0x03	; 3
     b4e:	93 85       	ldd	r25, Z+11	; 0x0b
     b50:	91 11       	cpse	r25, r1
     b52:	10 c0       	rjmp	.+32     	; 0xb74 <follow_path+0xa6>
				break;                       /* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
     b54:	f7 01       	movw	r30, r14
     b56:	83 85       	ldd	r24, Z+11	; 0x0b
     b58:	84 ff       	sbrs	r24, 4
     b5a:	0b c0       	rjmp	.+22     	; 0xb72 <follow_path+0xa4>
				res = FR_NO_FILE;
				break;
			}
			dj->sclust = get_clust(dir); /* Follow next */
     b5c:	c7 01       	movw	r24, r14
     b5e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <get_clust>
     b62:	d8 01       	movw	r26, r16
     b64:	14 96       	adiw	r26, 0x04	; 4
     b66:	6d 93       	st	X+, r22
     b68:	7d 93       	st	X+, r23
     b6a:	8d 93       	st	X+, r24
     b6c:	9c 93       	st	X, r25
     b6e:	17 97       	sbiw	r26, 0x07	; 7
		}
     b70:	db cf       	rjmp	.-74     	; 0xb28 <follow_path+0x5a>
			if (res != FR_OK)
				break; /* Could not find the object */
			if (dj->fn[11])
				break;                       /* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE;
     b72:	83 e0       	ldi	r24, 0x03	; 3
			dj->sclust = get_clust(dir); /* Follow next */
		}
	}

	return res;
}
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	08 95       	ret

00000b86 <pf_mount>:
/*-----------------------------------------------------------------------*/
/* Mount/Unmount a Locical Drive                                         */
/*-----------------------------------------------------------------------*/

FRESULT pf_mount(FATFS *fs /* Pointer to new file system object */)
{
     b86:	4f 92       	push	r4
     b88:	5f 92       	push	r5
     b8a:	6f 92       	push	r6
     b8c:	7f 92       	push	r7
     b8e:	8f 92       	push	r8
     b90:	9f 92       	push	r9
     b92:	af 92       	push	r10
     b94:	bf 92       	push	r11
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	a8 97       	sbiw	r28, 0x28	; 40
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	7c 01       	movw	r14, r24
	BYTE  fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;

	FatFs = 0;
     bb6:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <FatFs+0x1>
     bba:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <FatFs>

	if (disk_initialize() & STA_NOINIT)
     bbe:	0e 94 cb 00 	call	0x196	; 0x196 <disk_initialize>
     bc2:	80 fd       	sbrc	r24, 0
     bc4:	db c0       	rjmp	.+438    	; 0xd7c <pf_mount+0x1f6>
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt   = check_fs(buf, bsect); /* Check sector 0 as an SFD format */
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	ba 01       	movw	r22, r20
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <check_fs>
     bd4:	d8 2e       	mov	r13, r24
	if (fmt == 1) {               /* Not an FAT boot record, it may be FDISK format */
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	82 13       	cpse	r24, r18
     bda:	1c c0       	rjmp	.+56     	; 0xc14 <pf_mount+0x8e>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) { /* 1st partition entry */
     bdc:	00 e1       	ldi	r16, 0x10	; 16
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	2e eb       	ldi	r18, 0xBE	; 190
     be2:	31 e0       	ldi	r19, 0x01	; 1
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	ba 01       	movw	r22, r20
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     bf2:	81 11       	cpse	r24, r1
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <pf_mount+0x96>
			fmt = 3;
		} else {
			if (buf[4]) {                     /* Is the partition existing? */
     bf6:	8d 81       	ldd	r24, Y+5	; 0x05
     bf8:	88 23       	and	r24, r24
     bfa:	c1 f0       	breq	.+48     	; 0xc2c <pf_mount+0xa6>
				bsect = LD_DWORD(&buf[8]);    /* Partition offset in LBA */
     bfc:	89 84       	ldd	r8, Y+9	; 0x09
     bfe:	9a 84       	ldd	r9, Y+10	; 0x0a
     c00:	ab 84       	ldd	r10, Y+11	; 0x0b
     c02:	bc 84       	ldd	r11, Y+12	; 0x0c
				fmt   = check_fs(buf, bsect); /* Check the partition */
     c04:	b5 01       	movw	r22, r10
     c06:	a4 01       	movw	r20, r8
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <check_fs>
     c10:	d8 2e       	mov	r13, r24
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <pf_mount+0xac>
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
     c14:	81 2c       	mov	r8, r1
     c16:	91 2c       	mov	r9, r1
     c18:	54 01       	movw	r10, r8
     c1a:	0b c0       	rjmp	.+22     	; 0xc32 <pf_mount+0xac>
     c1c:	81 2c       	mov	r8, r1
     c1e:	91 2c       	mov	r9, r1
     c20:	54 01       	movw	r10, r8
	fmt   = check_fs(buf, bsect); /* Check sector 0 as an SFD format */
	if (fmt == 1) {               /* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) { /* 1st partition entry */
			fmt = 3;
     c22:	0f 2e       	mov	r0, r31
     c24:	f3 e0       	ldi	r31, 0x03	; 3
     c26:	df 2e       	mov	r13, r31
     c28:	f0 2d       	mov	r31, r0
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <pf_mount+0xac>
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
     c2c:	81 2c       	mov	r8, r1
     c2e:	91 2c       	mov	r9, r1
     c30:	54 01       	movw	r10, r8
				bsect = LD_DWORD(&buf[8]);    /* Partition offset in LBA */
				fmt   = check_fs(buf, bsect); /* Check the partition */
			}
		}
	}
	if (fmt == 3)
     c32:	43 e0       	ldi	r20, 0x03	; 3
     c34:	d4 16       	cp	r13, r20
     c36:	09 f4       	brne	.+2      	; 0xc3a <pf_mount+0xb4>
     c38:	a3 c0       	rjmp	.+326    	; 0xd80 <pf_mount+0x1fa>
		return FR_DISK_ERR;
	if (fmt)
     c3a:	d1 10       	cpse	r13, r1
     c3c:	a3 c0       	rjmp	.+326    	; 0xd84 <pf_mount+0x1fe>
		return FR_NO_FILESYSTEM; /* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf)))
     c3e:	04 e2       	ldi	r16, 0x24	; 36
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	2d e0       	ldi	r18, 0x0D	; 13
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	b5 01       	movw	r22, r10
     c48:	a4 01       	movw	r20, r8
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     c52:	81 11       	cpse	r24, r1
     c54:	99 c0       	rjmp	.+306    	; 0xd88 <pf_mount+0x202>
		return FR_DISK_ERR;

	fsize = LD_WORD(buf + BPB_FATSz16 - 13); /* Number of sectors per FAT */
     c56:	2a 85       	ldd	r18, Y+10	; 0x0a
     c58:	3b 85       	ldd	r19, Y+11	; 0x0b
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize)
     c5e:	21 15       	cp	r18, r1
     c60:	31 05       	cpc	r19, r1
     c62:	41 05       	cpc	r20, r1
     c64:	51 05       	cpc	r21, r1
     c66:	21 f4       	brne	.+8      	; 0xc70 <pf_mount+0xea>
		fsize = LD_DWORD(buf + BPB_FATSz32 - 13);
     c68:	28 8d       	ldd	r18, Y+24	; 0x18
     c6a:	39 8d       	ldd	r19, Y+25	; 0x19
     c6c:	4a 8d       	ldd	r20, Y+26	; 0x1a
     c6e:	5b 8d       	ldd	r21, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs - 13];                             /* Number of sectors in FAT area */
     c70:	ac 81       	ldd	r26, Y+4	; 0x04
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__muluhisi3>
     c78:	6d a3       	std	Y+37, r22	; 0x25
     c7a:	7e a3       	std	Y+38, r23	; 0x26
     c7c:	8f a3       	std	Y+39, r24	; 0x27
     c7e:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase   = bsect + LD_WORD(buf + BPB_RsvdSecCnt - 13); /* FAT start sector (lba) */
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	88 0e       	add	r8, r24
     c86:	99 1e       	adc	r9, r25
     c88:	a1 1c       	adc	r10, r1
     c8a:	b1 1c       	adc	r11, r1
     c8c:	d7 01       	movw	r26, r14
     c8e:	1a 96       	adiw	r26, 0x0a	; 10
     c90:	8d 92       	st	X+, r8
     c92:	9d 92       	st	X+, r9
     c94:	ad 92       	st	X+, r10
     c96:	bc 92       	st	X, r11
     c98:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize     = buf[BPB_SecPerClus - 13];                   /* Number of sectors per cluster */
     c9a:	e9 81       	ldd	r30, Y+1	; 0x01
     c9c:	12 96       	adiw	r26, 0x02	; 2
     c9e:	ec 93       	st	X, r30
     ca0:	12 97       	sbiw	r26, 0x02	; 2
	fs->n_rootdir = LD_WORD(buf + BPB_RootEntCnt - 13);         /* Nmuber of root directory entries */
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	9e 81       	ldd	r25, Y+6	; 0x06
     ca6:	15 96       	adiw	r26, 0x05	; 5
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	14 97       	sbiw	r26, 0x04	; 4
	tsect         = LD_WORD(buf + BPB_TotSec16 - 13);           /* Number of sectors on the file system */
     cae:	0f 81       	ldd	r16, Y+7	; 0x07
     cb0:	18 85       	ldd	r17, Y+8	; 0x08
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
	if (!tsect)
     cb6:	01 15       	cp	r16, r1
     cb8:	11 05       	cpc	r17, r1
     cba:	21 05       	cpc	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	21 f4       	brne	.+8      	; 0xcc8 <pf_mount+0x142>
		tsect = LD_DWORD(buf + BPB_TotSec32 - 13);
     cc0:	0c 89       	ldd	r16, Y+20	; 0x14
     cc2:	1d 89       	ldd	r17, Y+21	; 0x15
     cc4:	2e 89       	ldd	r18, Y+22	; 0x16
     cc6:	3f 89       	ldd	r19, Y+23	; 0x17
	mclst = (tsect /* Last cluster# + 1 */
	         - LD_WORD(buf + BPB_RsvdSecCnt - 13) - fsize - fs->n_rootdir / 16)
     cc8:	4a 81       	ldd	r20, Y+2	; 0x02
     cca:	5b 81       	ldd	r21, Y+3	; 0x03
     ccc:	04 1b       	sub	r16, r20
     cce:	15 0b       	sbc	r17, r21
     cd0:	21 09       	sbc	r18, r1
     cd2:	31 09       	sbc	r19, r1
     cd4:	4d a1       	ldd	r20, Y+37	; 0x25
     cd6:	5e a1       	ldd	r21, Y+38	; 0x26
     cd8:	6f a1       	ldd	r22, Y+39	; 0x27
     cda:	78 a5       	ldd	r23, Y+40	; 0x28
     cdc:	04 1b       	sub	r16, r20
     cde:	15 0b       	sbc	r17, r21
     ce0:	26 0b       	sbc	r18, r22
     ce2:	37 0b       	sbc	r19, r23
     ce4:	92 95       	swap	r25
     ce6:	82 95       	swap	r24
     ce8:	8f 70       	andi	r24, 0x0F	; 15
     cea:	89 27       	eor	r24, r25
     cec:	9f 70       	andi	r25, 0x0F	; 15
     cee:	89 27       	eor	r24, r25
     cf0:	2c 01       	movw	r4, r24
     cf2:	61 2c       	mov	r6, r1
     cf4:	71 2c       	mov	r7, r1
     cf6:	c9 01       	movw	r24, r18
     cf8:	b8 01       	movw	r22, r16
     cfa:	64 19       	sub	r22, r4
     cfc:	75 09       	sbc	r23, r5
     cfe:	86 09       	sbc	r24, r6
     d00:	97 09       	sbc	r25, r7
	            / fs->csize
     d02:	2e 2f       	mov	r18, r30
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__udivmodsi4>
	fs->csize     = buf[BPB_SecPerClus - 13];                   /* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf + BPB_RootEntCnt - 13);         /* Nmuber of root directory entries */
	tsect         = LD_WORD(buf + BPB_TotSec16 - 13);           /* Number of sectors on the file system */
	if (!tsect)
		tsect = LD_DWORD(buf + BPB_TotSec32 - 13);
	mclst = (tsect /* Last cluster# + 1 */
     d0e:	da 01       	movw	r26, r20
     d10:	c9 01       	movw	r24, r18
     d12:	02 96       	adiw	r24, 0x02	; 2
     d14:	a1 1d       	adc	r26, r1
     d16:	b1 1d       	adc	r27, r1
	         - LD_WORD(buf + BPB_RsvdSecCnt - 13) - fsize - fs->n_rootdir / 16)
	            / fs->csize
	        + 2;
	fs->n_fatent = (CLUST)mclst;
     d18:	f7 01       	movw	r30, r14
     d1a:	86 83       	std	Z+6, r24	; 0x06
     d1c:	97 83       	std	Z+7, r25	; 0x07
     d1e:	a0 87       	std	Z+8, r26	; 0x08
     d20:	b1 87       	std	Z+9, r27	; 0x09
	fmt = 0; /* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
     d22:	87 3f       	cpi	r24, 0xF7	; 247
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	a1 05       	cpc	r26, r1
     d28:	b1 05       	cpc	r27, r1
     d2a:	20 f0       	brcs	.+8      	; 0xd34 <pf_mount+0x1ae>
		fmt = FS_FAT32;
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f3 e0       	ldi	r31, 0x03	; 3
     d30:	df 2e       	mov	r13, r31
     d32:	f0 2d       	mov	r31, r0
	if (!fmt)
     d34:	dd 20       	and	r13, r13
     d36:	51 f1       	breq	.+84     	; 0xd8c <pf_mount+0x206>
		return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
     d38:	d7 01       	movw	r26, r14
     d3a:	dc 92       	st	X, r13

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf + (BPB_RootClus - 13)); /* Root directory start cluster */
     d3c:	88 a1       	ldd	r24, Y+32	; 0x20
     d3e:	99 a1       	ldd	r25, Y+33	; 0x21
     d40:	aa a1       	ldd	r26, Y+34	; 0x22
     d42:	bb a1       	ldd	r27, Y+35	; 0x23
     d44:	f7 01       	movw	r30, r14
     d46:	86 87       	std	Z+14, r24	; 0x0e
     d48:	97 87       	std	Z+15, r25	; 0x0f
     d4a:	a0 8b       	std	Z+16, r26	; 0x10
     d4c:	b1 8b       	std	Z+17, r27	; 0x11
	else
		fs->dirbase = fs->fatbase + fsize;                   /* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16; /* Data start sector (lba) */
     d4e:	4d a1       	ldd	r20, Y+37	; 0x25
     d50:	5e a1       	ldd	r21, Y+38	; 0x26
     d52:	6f a1       	ldd	r22, Y+39	; 0x27
     d54:	78 a5       	ldd	r23, Y+40	; 0x28
     d56:	84 0e       	add	r8, r20
     d58:	95 1e       	adc	r9, r21
     d5a:	a6 1e       	adc	r10, r22
     d5c:	b7 1e       	adc	r11, r23
     d5e:	84 0c       	add	r8, r4
     d60:	95 1c       	adc	r9, r5
     d62:	a6 1c       	adc	r10, r6
     d64:	b7 1c       	adc	r11, r7
     d66:	82 8a       	std	Z+18, r8	; 0x12
     d68:	93 8a       	std	Z+19, r9	; 0x13
     d6a:	a4 8a       	std	Z+20, r10	; 0x14
     d6c:	b5 8a       	std	Z+21, r11	; 0x15

	fs->flag = 0;
     d6e:	11 82       	std	Z+1, r1	; 0x01
	FatFs    = fs;
     d70:	f0 92 a2 01 	sts	0x01A2, r15	; 0x8001a2 <FatFs+0x1>
     d74:	e0 92 a1 01 	sts	0x01A1, r14	; 0x8001a1 <FatFs>

	return FR_OK;
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <pf_mount+0x208>
	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)
	{
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	07 c0       	rjmp	.+14     	; 0xd8e <pf_mount+0x208>
				fmt   = check_fs(buf, bsect); /* Check the partition */
			}
		}
	}
	if (fmt == 3)
		return FR_DISK_ERR;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <pf_mount+0x208>
	if (fmt)
		return FR_NO_FILESYSTEM; /* No valid FAT patition is found */
     d84:	86 e0       	ldi	r24, 0x06	; 6
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <pf_mount+0x208>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf)))
		return FR_DISK_ERR;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <pf_mount+0x208>
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt)
		return FR_NO_FILESYSTEM;
     d8c:	86 e0       	ldi	r24, 0x06	; 6

	fs->flag = 0;
	FatFs    = fs;

	return FR_OK;
}
     d8e:	a8 96       	adiw	r28, 0x28	; 40
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	bf 90       	pop	r11
     daa:	af 90       	pop	r10
     dac:	9f 90       	pop	r9
     dae:	8f 90       	pop	r8
     db0:	7f 90       	pop	r7
     db2:	6f 90       	pop	r6
     db4:	5f 90       	pop	r5
     db6:	4f 90       	pop	r4
     db8:	08 95       	ret

00000dba <pf_open>:
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT pf_open(const char *path /* Pointer to the file name */
)
{
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	ec 97       	sbiw	r28, 0x3c	; 60
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR     dj;
	BYTE    sp[12], dir[32];
	FATFS * fs = FatFs;
     dd2:	00 91 a1 01 	lds	r16, 0x01A1	; 0x8001a1 <FatFs>
     dd6:	10 91 a2 01 	lds	r17, 0x01A2	; 0x8001a2 <FatFs+0x1>

	if (!fs)
     dda:	01 15       	cp	r16, r1
     ddc:	11 05       	cpc	r17, r1
     dde:	71 f1       	breq	.+92     	; 0xe3c <pf_open+0x82>
     de0:	ac 01       	movw	r20, r24
		return FR_NOT_ENABLED; /* Check file system */

	fs->flag = 0;
     de2:	f8 01       	movw	r30, r16
     de4:	11 82       	std	Z+1, r1	; 0x01
	dj.fn    = sp;
     de6:	ce 01       	movw	r24, r28
     de8:	41 96       	adiw	r24, 0x11	; 17
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03
	res      = follow_path(&dj, dir, path); /* Follow the file path */
     dee:	be 01       	movw	r22, r28
     df0:	63 5e       	subi	r22, 0xE3	; 227
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	40 97       	sbiw	r24, 0x10	; 16
     df6:	0e 94 67 05 	call	0xace	; 0xace <follow_path>
	if (res != FR_OK)
     dfa:	81 11       	cpse	r24, r1
     dfc:	24 c0       	rjmp	.+72     	; 0xe46 <pf_open+0x8c>
		return res;                          /* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) /* It is a directory */ // hier gaat het fout
     dfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e00:	88 23       	and	r24, r24
     e02:	f1 f0       	breq	.+60     	; 0xe40 <pf_open+0x86>
     e04:	88 a5       	ldd	r24, Y+40	; 0x28
     e06:	84 fd       	sbrc	r24, 4
     e08:	1d c0       	rjmp	.+58     	; 0xe44 <pf_open+0x8a>
		return FR_NO_FILE;
	

	fs->org_clust = get_clust(dir);               /* File start cluster */
     e0a:	ce 01       	movw	r24, r28
     e0c:	4d 96       	adiw	r24, 0x1d	; 29
     e0e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <get_clust>
     e12:	f8 01       	movw	r30, r16
     e14:	66 8f       	std	Z+30, r22	; 0x1e
     e16:	77 8f       	std	Z+31, r23	; 0x1f
     e18:	80 a3       	std	Z+32, r24	; 0x20
     e1a:	91 a3       	std	Z+33, r25	; 0x21
	fs->fsize     = LD_DWORD(dir + DIR_FileSize); /* File size */
     e1c:	89 ad       	ldd	r24, Y+57	; 0x39
     e1e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e20:	ab ad       	ldd	r26, Y+59	; 0x3b
     e22:	bc ad       	ldd	r27, Y+60	; 0x3c
     e24:	82 8f       	std	Z+26, r24	; 0x1a
     e26:	93 8f       	std	Z+27, r25	; 0x1b
     e28:	a4 8f       	std	Z+28, r26	; 0x1c
     e2a:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr      = 0;                            /* File pointer */
     e2c:	16 8a       	std	Z+22, r1	; 0x16
     e2e:	17 8a       	std	Z+23, r1	; 0x17
     e30:	10 8e       	std	Z+24, r1	; 0x18
     e32:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag      = FA_OPENED;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <pf_open+0x8c>
	DIR     dj;
	BYTE    sp[12], dir[32];
	FATFS * fs = FatFs;

	if (!fs)
		return FR_NOT_ENABLED; /* Check file system */
     e3c:	85 e0       	ldi	r24, 0x05	; 5
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <pf_open+0x8c>
	dj.fn    = sp;
	res      = follow_path(&dj, dir, path); /* Follow the file path */
	if (res != FR_OK)
		return res;                          /* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) /* It is a directory */ // hier gaat het fout
		return FR_NO_FILE;
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <pf_open+0x8c>
     e44:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize     = LD_DWORD(dir + DIR_FileSize); /* File size */
	fs->fptr      = 0;                            /* File pointer */
	fs->flag      = FA_OPENED;

	return FR_OK;
}
     e46:	ec 96       	adiw	r28, 0x3c	; 60
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <pf_read>:

FRESULT pf_read(void *buff, /* Pointer to the read buffer (NULL:Forward data to the stream)*/
                UINT  btr,  /* Number of bytes to read */
                UINT *br    /* Pointer to number of bytes read */
)
{
     e5c:	6f 92       	push	r6
     e5e:	7f 92       	push	r7
     e60:	8f 92       	push	r8
     e62:	9f 92       	push	r9
     e64:	af 92       	push	r10
     e66:	bf 92       	push	r11
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	3c 01       	movw	r6, r24
     e7a:	6b 01       	movw	r12, r22
     e7c:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST   clst;
	DWORD   sect, remain;
	UINT    rcnt;
	BYTE    cs, *rbuff = buff;
	FATFS * fs = FatFs;
     e7e:	e0 90 a1 01 	lds	r14, 0x01A1	; 0x8001a1 <FatFs>
     e82:	f0 90 a2 01 	lds	r15, 0x01A2	; 0x8001a2 <FatFs+0x1>

	*br = 0;
     e86:	fa 01       	movw	r30, r20
     e88:	11 82       	std	Z+1, r1	; 0x01
     e8a:	10 82       	st	Z, r1
	if (!fs)
     e8c:	e1 14       	cp	r14, r1
     e8e:	f1 04       	cpc	r15, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <pf_read+0x38>
     e92:	b5 c0       	rjmp	.+362    	; 0xffe <pf_read+0x1a2>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
     e94:	f7 01       	movw	r30, r14
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	80 ff       	sbrs	r24, 0
     e9a:	b3 c0       	rjmp	.+358    	; 0x1002 <pf_read+0x1a6>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
     e9c:	82 8d       	ldd	r24, Z+26	; 0x1a
     e9e:	93 8d       	ldd	r25, Z+27	; 0x1b
     ea0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     ea2:	b5 8d       	ldd	r27, Z+29	; 0x1d
     ea4:	46 89       	ldd	r20, Z+22	; 0x16
     ea6:	57 89       	ldd	r21, Z+23	; 0x17
     ea8:	60 8d       	ldd	r22, Z+24	; 0x18
     eaa:	71 8d       	ldd	r23, Z+25	; 0x19
     eac:	84 1b       	sub	r24, r20
     eae:	95 0b       	sbc	r25, r21
     eb0:	a6 0b       	sbc	r26, r22
     eb2:	b7 0b       	sbc	r27, r23
	if (btr > remain)
     eb4:	a6 01       	movw	r20, r12
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	84 17       	cp	r24, r20
     ebc:	95 07       	cpc	r25, r21
     ebe:	a6 07       	cpc	r26, r22
     ec0:	b7 07       	cpc	r27, r23
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <pf_read+0x6a>
		btr = (UINT)remain; /* Truncate btr by remaining bytes */
     ec4:	6c 01       	movw	r12, r24
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512; /* Get partial sector data from sector buffer */
		if (rcnt > btr)
			rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
     ec6:	53 01       	movw	r10, r6
     ec8:	94 c0       	rjmp	.+296    	; 0xff2 <pf_read+0x196>
	remain = fs->fsize - fs->fptr;
	if (btr > remain)
		btr = (UINT)remain; /* Truncate btr by remaining bytes */

	while (btr) {                                          /* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {                       /* On the sector boundary? */
     eca:	f7 01       	movw	r30, r14
     ecc:	86 89       	ldd	r24, Z+22	; 0x16
     ece:	97 89       	ldd	r25, Z+23	; 0x17
     ed0:	a0 8d       	ldd	r26, Z+24	; 0x18
     ed2:	b1 8d       	ldd	r27, Z+25	; 0x19
     ed4:	ac 01       	movw	r20, r24
     ed6:	bd 01       	movw	r22, r26
     ed8:	51 70       	andi	r21, 0x01	; 1
     eda:	66 27       	eor	r22, r22
     edc:	77 27       	eor	r23, r23
     ede:	45 2b       	or	r20, r21
     ee0:	46 2b       	or	r20, r22
     ee2:	47 2b       	or	r20, r23
     ee4:	09 f0       	breq	.+2      	; 0xee8 <pf_read+0x8c>
     ee6:	48 c0       	rjmp	.+144    	; 0xf78 <pf_read+0x11c>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1)); /* Sector offset in the cluster */
     ee8:	c2 81       	ldd	r28, Z+2	; 0x02
     eea:	c1 50       	subi	r28, 0x01	; 1
     eec:	ac 01       	movw	r20, r24
     eee:	bd 01       	movw	r22, r26
     ef0:	03 2e       	mov	r0, r19
     ef2:	39 e0       	ldi	r19, 0x09	; 9
     ef4:	76 95       	lsr	r23
     ef6:	67 95       	ror	r22
     ef8:	57 95       	ror	r21
     efa:	47 95       	ror	r20
     efc:	3a 95       	dec	r19
     efe:	d1 f7       	brne	.-12     	; 0xef4 <pf_read+0x98>
     f00:	30 2d       	mov	r19, r0
     f02:	c4 23       	and	r28, r20
			if (!cs) {                                     /* On the cluster boundary? */
     f04:	f1 f4       	brne	.+60     	; 0xf42 <pf_read+0xe6>
				if (fs->fptr == 0)                         /* On the top of the file? */
     f06:	89 2b       	or	r24, r25
     f08:	8a 2b       	or	r24, r26
     f0a:	8b 2b       	or	r24, r27
     f0c:	29 f4       	brne	.+10     	; 0xf18 <pf_read+0xbc>
					clst = fs->org_clust;
     f0e:	66 8d       	ldd	r22, Z+30	; 0x1e
     f10:	77 8d       	ldd	r23, Z+31	; 0x1f
     f12:	80 a1       	ldd	r24, Z+32	; 0x20
     f14:	91 a1       	ldd	r25, Z+33	; 0x21
     f16:	07 c0       	rjmp	.+14     	; 0xf26 <pf_read+0xca>
				else
					clst = get_fat(fs->curr_clust);
     f18:	f7 01       	movw	r30, r14
     f1a:	62 a1       	ldd	r22, Z+34	; 0x22
     f1c:	73 a1       	ldd	r23, Z+35	; 0x23
     f1e:	84 a1       	ldd	r24, Z+36	; 0x24
     f20:	95 a1       	ldd	r25, Z+37	; 0x25
     f22:	0e 94 2f 04 	call	0x85e	; 0x85e <get_fat>
				if (clst <= 1)
     f26:	62 30       	cpi	r22, 0x02	; 2
     f28:	71 05       	cpc	r23, r1
     f2a:	81 05       	cpc	r24, r1
     f2c:	91 05       	cpc	r25, r1
     f2e:	20 f4       	brcc	.+8      	; 0xf38 <pf_read+0xdc>
					ABORT(FR_DISK_ERR);
     f30:	f7 01       	movw	r30, r14
     f32:	11 82       	std	Z+1, r1	; 0x01
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	66 c0       	rjmp	.+204    	; 0x1004 <pf_read+0x1a8>
				fs->curr_clust = clst; /* Update current cluster */
     f38:	f7 01       	movw	r30, r14
     f3a:	62 a3       	std	Z+34, r22	; 0x22
     f3c:	73 a3       	std	Z+35, r23	; 0x23
     f3e:	84 a3       	std	Z+36, r24	; 0x24
     f40:	95 a3       	std	Z+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust); /* Get current sector */
     f42:	f7 01       	movw	r30, r14
     f44:	62 a1       	ldd	r22, Z+34	; 0x22
     f46:	73 a1       	ldd	r23, Z+35	; 0x23
     f48:	84 a1       	ldd	r24, Z+36	; 0x24
     f4a:	95 a1       	ldd	r25, Z+37	; 0x25
     f4c:	0e 94 27 03 	call	0x64e	; 0x64e <clust2sect>
			if (!sect)
     f50:	61 15       	cp	r22, r1
     f52:	71 05       	cpc	r23, r1
     f54:	81 05       	cpc	r24, r1
     f56:	91 05       	cpc	r25, r1
     f58:	21 f4       	brne	.+8      	; 0xf62 <pf_read+0x106>
				ABORT(FR_DISK_ERR);
     f5a:	f7 01       	movw	r30, r14
     f5c:	11 82       	std	Z+1, r1	; 0x01
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	51 c0       	rjmp	.+162    	; 0x1004 <pf_read+0x1a8>
			fs->dsect = sect + cs;
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8c 0f       	add	r24, r28
     f68:	91 1d       	adc	r25, r1
     f6a:	a1 1d       	adc	r26, r1
     f6c:	b1 1d       	adc	r27, r1
     f6e:	f7 01       	movw	r30, r14
     f70:	86 a3       	std	Z+38, r24	; 0x26
     f72:	97 a3       	std	Z+39, r25	; 0x27
     f74:	a0 a7       	std	Z+40, r26	; 0x28
     f76:	b1 a7       	std	Z+41, r27	; 0x29
		}
		rcnt = 512 - (UINT)fs->fptr % 512; /* Get partial sector data from sector buffer */
     f78:	f7 01       	movw	r30, r14
     f7a:	86 89       	ldd	r24, Z+22	; 0x16
     f7c:	97 89       	ldd	r25, Z+23	; 0x17
     f7e:	a0 8d       	ldd	r26, Z+24	; 0x18
     f80:	b1 8d       	ldd	r27, Z+25	; 0x19
     f82:	9c 01       	movw	r18, r24
     f84:	31 70       	andi	r19, 0x01	; 1
     f86:	c0 e0       	ldi	r28, 0x00	; 0
     f88:	d2 e0       	ldi	r29, 0x02	; 2
     f8a:	c2 1b       	sub	r28, r18
     f8c:	d3 0b       	sbc	r29, r19
		if (rcnt > btr)
     f8e:	cc 16       	cp	r12, r28
     f90:	dd 06       	cpc	r13, r29
     f92:	08 f4       	brcc	.+2      	; 0xf96 <pf_read+0x13a>
			rcnt = btr;
     f94:	e6 01       	movw	r28, r12
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
     f96:	f7 01       	movw	r30, r14
     f98:	46 a1       	ldd	r20, Z+38	; 0x26
     f9a:	57 a1       	ldd	r21, Z+39	; 0x27
     f9c:	60 a5       	ldd	r22, Z+40	; 0x28
     f9e:	71 a5       	ldd	r23, Z+41	; 0x29
     fa0:	61 14       	cp	r6, r1
     fa2:	71 04       	cpc	r7, r1
     fa4:	19 f4       	brne	.+6      	; 0xfac <pf_read+0x150>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <pf_read+0x154>
     fac:	8a 2d       	mov	r24, r10
     fae:	9b 2d       	mov	r25, r11
     fb0:	8e 01       	movw	r16, r28
     fb2:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
		if (dr)
     fb6:	88 23       	and	r24, r24
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <pf_read+0x166>
			ABORT(FR_DISK_ERR);
     fba:	f7 01       	movw	r30, r14
     fbc:	11 82       	std	Z+1, r1	; 0x01
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	21 c0       	rjmp	.+66     	; 0x1004 <pf_read+0x1a8>
		fs->fptr += rcnt;
     fc2:	f7 01       	movw	r30, r14
     fc4:	86 89       	ldd	r24, Z+22	; 0x16
     fc6:	97 89       	ldd	r25, Z+23	; 0x17
     fc8:	a0 8d       	ldd	r26, Z+24	; 0x18
     fca:	b1 8d       	ldd	r27, Z+25	; 0x19
     fcc:	8c 0f       	add	r24, r28
     fce:	9d 1f       	adc	r25, r29
     fd0:	a1 1d       	adc	r26, r1
     fd2:	b1 1d       	adc	r27, r1
     fd4:	86 8b       	std	Z+22, r24	; 0x16
     fd6:	97 8b       	std	Z+23, r25	; 0x17
     fd8:	a0 8f       	std	Z+24, r26	; 0x18
     fda:	b1 8f       	std	Z+25, r27	; 0x19
		rbuff += rcnt; /* Update pointers and counters */
     fdc:	ac 0e       	add	r10, r28
     fde:	bd 1e       	adc	r11, r29
		btr -= rcnt;
     fe0:	cc 1a       	sub	r12, r28
     fe2:	dd 0a       	sbc	r13, r29
		*br += rcnt;
     fe4:	f4 01       	movw	r30, r8
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	c8 0f       	add	r28, r24
     fec:	d9 1f       	adc	r29, r25
     fee:	d1 83       	std	Z+1, r29	; 0x01
     ff0:	c0 83       	st	Z, r28

	remain = fs->fsize - fs->fptr;
	if (btr > remain)
		btr = (UINT)remain; /* Truncate btr by remaining bytes */

	while (btr) {                                          /* Repeat until all data transferred */
     ff2:	c1 14       	cp	r12, r1
     ff4:	d1 04       	cpc	r13, r1
     ff6:	09 f0       	breq	.+2      	; 0xffa <pf_read+0x19e>
     ff8:	68 cf       	rjmp	.-304    	; 0xeca <pf_read+0x6e>
		rbuff += rcnt; /* Update pointers and counters */
		btr -= rcnt;
		*br += rcnt;
	}

	return FR_OK;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <pf_read+0x1a8>
	BYTE    cs, *rbuff = buff;
	FATFS * fs = FatFs;

	*br = 0;
	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
     ffe:	85 e0       	ldi	r24, 0x05	; 5
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <pf_read+0x1a8>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    1002:	84 e0       	ldi	r24, 0x04	; 4
		btr -= rcnt;
		*br += rcnt;
	}

	return FR_OK;
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	7f 90       	pop	r7
    101e:	6f 90       	pop	r6
    1020:	08 95       	ret

00001022 <pf_write>:

FRESULT pf_write(const void *buff, /* Pointer to the data to be written */
                 UINT        btw,  /* Number of bytes to write (0:Finalize the current write operation) */
                 UINT *      bw    /* Pointer to number of bytes written */
)
{
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	7c 01       	movw	r14, r24
    1040:	5b 01       	movw	r10, r22
    1042:	6a 01       	movw	r12, r20
	CLUST       clst;
	DWORD       sect, remain;
	const BYTE *p = buff;
	BYTE        cs;
	UINT        wcnt;
	FATFS *     fs = FatFs;
    1044:	c0 91 a1 01 	lds	r28, 0x01A1	; 0x8001a1 <FatFs>
    1048:	d0 91 a2 01 	lds	r29, 0x01A2	; 0x8001a2 <FatFs+0x1>

	*bw = 0;
    104c:	fa 01       	movw	r30, r20
    104e:	11 82       	std	Z+1, r1	; 0x01
    1050:	10 82       	st	Z, r1
	if (!fs)
    1052:	20 97       	sbiw	r28, 0x00	; 0
    1054:	09 f4       	brne	.+2      	; 0x1058 <pf_write+0x36>
    1056:	df c0       	rjmp	.+446    	; 0x1216 <pf_write+0x1f4>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	80 ff       	sbrs	r24, 0
    105c:	de c0       	rjmp	.+444    	; 0x121a <pf_write+0x1f8>
		return FR_NOT_OPENED;

	if (!btw) { /* Finalize request */
    105e:	67 2b       	or	r22, r23
    1060:	99 f4       	brne	.+38     	; 0x1088 <pf_write+0x66>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0))
    1062:	86 ff       	sbrs	r24, 6
    1064:	0c c0       	rjmp	.+24     	; 0x107e <pf_write+0x5c>
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	ba 01       	movw	r22, r20
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <pf_write+0x5c>
			ABORT(FR_DISK_ERR);
    1078:	19 82       	std	Y+1, r1	; 0x01
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	cf c0       	rjmp	.+414    	; 0x121c <pf_write+0x1fa>
		fs->flag &= ~FA__WIP;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	8f 7b       	andi	r24, 0xBF	; 191
    1082:	89 83       	std	Y+1, r24	; 0x01
		return FR_OK;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	ca c0       	rjmp	.+404    	; 0x121c <pf_write+0x1fa>
	} else {                       /* Write data request */
		if (!(fs->flag & FA__WIP)) /* Round-down fptr to the sector boundary */
    1088:	86 fd       	sbrc	r24, 6
    108a:	0a c0       	rjmp	.+20     	; 0x10a0 <pf_write+0x7e>
			fs->fptr &= 0xFFFFFE00;
    108c:	8e 89       	ldd	r24, Y+22	; 0x16
    108e:	9f 89       	ldd	r25, Y+23	; 0x17
    1090:	a8 8d       	ldd	r26, Y+24	; 0x18
    1092:	b9 8d       	ldd	r27, Y+25	; 0x19
    1094:	88 27       	eor	r24, r24
    1096:	9e 7f       	andi	r25, 0xFE	; 254
    1098:	8e 8b       	std	Y+22, r24	; 0x16
    109a:	9f 8b       	std	Y+23, r25	; 0x17
    109c:	a8 8f       	std	Y+24, r26	; 0x18
    109e:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    10a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10a4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    10a6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    10a8:	4e 89       	ldd	r20, Y+22	; 0x16
    10aa:	5f 89       	ldd	r21, Y+23	; 0x17
    10ac:	68 8d       	ldd	r22, Y+24	; 0x18
    10ae:	79 8d       	ldd	r23, Y+25	; 0x19
    10b0:	84 1b       	sub	r24, r20
    10b2:	95 0b       	sbc	r25, r21
    10b4:	a6 0b       	sbc	r26, r22
    10b6:	b7 0b       	sbc	r27, r23
	if (btw > remain)
    10b8:	a5 01       	movw	r20, r10
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	84 17       	cp	r24, r20
    10c0:	95 07       	cpc	r25, r21
    10c2:	a6 07       	cpc	r26, r22
    10c4:	b7 07       	cpc	r27, r23
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <pf_write+0xa8>
    10c8:	a0 c0       	rjmp	.+320    	; 0x120a <pf_write+0x1e8>
		btw = (UINT)remain; /* Truncate btw by remaining bytes */
    10ca:	5c 01       	movw	r10, r24
    10cc:	9e c0       	rjmp	.+316    	; 0x120a <pf_write+0x1e8>

	while (btw) {                                          /* Repeat until all data transferred */
		if ((UINT)fs->fptr % 512 == 0) {                   /* On the sector boundary? */
    10ce:	8e 89       	ldd	r24, Y+22	; 0x16
    10d0:	9f 89       	ldd	r25, Y+23	; 0x17
    10d2:	a8 8d       	ldd	r26, Y+24	; 0x18
    10d4:	b9 8d       	ldd	r27, Y+25	; 0x19
    10d6:	9c 01       	movw	r18, r24
    10d8:	31 70       	andi	r19, 0x01	; 1
    10da:	23 2b       	or	r18, r19
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <pf_write+0xbe>
    10de:	4e c0       	rjmp	.+156    	; 0x117c <pf_write+0x15a>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1)); /* Sector offset in the cluster */
    10e0:	1a 81       	ldd	r17, Y+2	; 0x02
    10e2:	11 50       	subi	r17, 0x01	; 1
    10e4:	ac 01       	movw	r20, r24
    10e6:	bd 01       	movw	r22, r26
    10e8:	03 2e       	mov	r0, r19
    10ea:	39 e0       	ldi	r19, 0x09	; 9
    10ec:	76 95       	lsr	r23
    10ee:	67 95       	ror	r22
    10f0:	57 95       	ror	r21
    10f2:	47 95       	ror	r20
    10f4:	3a 95       	dec	r19
    10f6:	d1 f7       	brne	.-12     	; 0x10ec <pf_write+0xca>
    10f8:	30 2d       	mov	r19, r0
    10fa:	14 23       	and	r17, r20
			if (!cs) {                                     /* On the cluster boundary? */
    10fc:	d9 f4       	brne	.+54     	; 0x1134 <pf_write+0x112>
				if (fs->fptr == 0)                         /* On the top of the file? */
    10fe:	89 2b       	or	r24, r25
    1100:	8a 2b       	or	r24, r26
    1102:	8b 2b       	or	r24, r27
    1104:	29 f4       	brne	.+10     	; 0x1110 <pf_write+0xee>
					clst = fs->org_clust;
    1106:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1108:	7f 8d       	ldd	r23, Y+31	; 0x1f
    110a:	88 a1       	ldd	r24, Y+32	; 0x20
    110c:	99 a1       	ldd	r25, Y+33	; 0x21
    110e:	06 c0       	rjmp	.+12     	; 0x111c <pf_write+0xfa>
				else
					clst = get_fat(fs->curr_clust);
    1110:	6a a1       	ldd	r22, Y+34	; 0x22
    1112:	7b a1       	ldd	r23, Y+35	; 0x23
    1114:	8c a1       	ldd	r24, Y+36	; 0x24
    1116:	9d a1       	ldd	r25, Y+37	; 0x25
    1118:	0e 94 2f 04 	call	0x85e	; 0x85e <get_fat>
				if (clst <= 1)
    111c:	62 30       	cpi	r22, 0x02	; 2
    111e:	71 05       	cpc	r23, r1
    1120:	81 05       	cpc	r24, r1
    1122:	91 05       	cpc	r25, r1
    1124:	18 f4       	brcc	.+6      	; 0x112c <pf_write+0x10a>
					ABORT(FR_DISK_ERR);
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	78 c0       	rjmp	.+240    	; 0x121c <pf_write+0x1fa>
				fs->curr_clust = clst; /* Update current cluster */
    112c:	6a a3       	std	Y+34, r22	; 0x22
    112e:	7b a3       	std	Y+35, r23	; 0x23
    1130:	8c a3       	std	Y+36, r24	; 0x24
    1132:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust); /* Get current sector */
    1134:	6a a1       	ldd	r22, Y+34	; 0x22
    1136:	7b a1       	ldd	r23, Y+35	; 0x23
    1138:	8c a1       	ldd	r24, Y+36	; 0x24
    113a:	9d a1       	ldd	r25, Y+37	; 0x25
    113c:	0e 94 27 03 	call	0x64e	; 0x64e <clust2sect>
			if (!sect)
    1140:	61 15       	cp	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	81 05       	cpc	r24, r1
    1146:	91 05       	cpc	r25, r1
    1148:	19 f4       	brne	.+6      	; 0x1150 <pf_write+0x12e>
				ABORT(FR_DISK_ERR);
    114a:	19 82       	std	Y+1, r1	; 0x01
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	66 c0       	rjmp	.+204    	; 0x121c <pf_write+0x1fa>
			fs->dsect = sect + cs;
    1150:	ab 01       	movw	r20, r22
    1152:	bc 01       	movw	r22, r24
    1154:	41 0f       	add	r20, r17
    1156:	51 1d       	adc	r21, r1
    1158:	61 1d       	adc	r22, r1
    115a:	71 1d       	adc	r23, r1
    115c:	4e a3       	std	Y+38, r20	; 0x26
    115e:	5f a3       	std	Y+39, r21	; 0x27
    1160:	68 a7       	std	Y+40, r22	; 0x28
    1162:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect))
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    116c:	88 23       	and	r24, r24
    116e:	19 f0       	breq	.+6      	; 0x1176 <pf_write+0x154>
				ABORT(FR_DISK_ERR); /* Initiate a sector write operation */
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	53 c0       	rjmp	.+166    	; 0x121c <pf_write+0x1fa>
			fs->flag |= FA__WIP;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	80 64       	ori	r24, 0x40	; 64
    117a:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - (UINT)fs->fptr % 512; /* Number of bytes to write to the sector */
    117c:	8e 89       	ldd	r24, Y+22	; 0x16
    117e:	9f 89       	ldd	r25, Y+23	; 0x17
    1180:	a8 8d       	ldd	r26, Y+24	; 0x18
    1182:	b9 8d       	ldd	r27, Y+25	; 0x19
    1184:	91 70       	andi	r25, 0x01	; 1
    1186:	00 e0       	ldi	r16, 0x00	; 0
    1188:	12 e0       	ldi	r17, 0x02	; 2
    118a:	08 1b       	sub	r16, r24
    118c:	19 0b       	sbc	r17, r25
		if (wcnt > btw)
    118e:	a0 16       	cp	r10, r16
    1190:	b1 06       	cpc	r11, r17
    1192:	08 f4       	brcc	.+2      	; 0x1196 <pf_write+0x174>
			wcnt = btw;
    1194:	85 01       	movw	r16, r10
		if (disk_writep(p, wcnt))
    1196:	28 01       	movw	r4, r16
    1198:	61 2c       	mov	r6, r1
    119a:	71 2c       	mov	r7, r1
    119c:	b3 01       	movw	r22, r6
    119e:	a2 01       	movw	r20, r4
    11a0:	c7 01       	movw	r24, r14
    11a2:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    11a6:	88 23       	and	r24, r24
    11a8:	19 f0       	breq	.+6      	; 0x11b0 <pf_write+0x18e>
			ABORT(FR_DISK_ERR); /* Send data to the sector */
    11aa:	19 82       	std	Y+1, r1	; 0x01
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	36 c0       	rjmp	.+108    	; 0x121c <pf_write+0x1fa>
		fs->fptr += wcnt;
    11b0:	8e 89       	ldd	r24, Y+22	; 0x16
    11b2:	9f 89       	ldd	r25, Y+23	; 0x17
    11b4:	a8 8d       	ldd	r26, Y+24	; 0x18
    11b6:	b9 8d       	ldd	r27, Y+25	; 0x19
    11b8:	48 0e       	add	r4, r24
    11ba:	59 1e       	adc	r5, r25
    11bc:	6a 1e       	adc	r6, r26
    11be:	7b 1e       	adc	r7, r27
    11c0:	4e 8a       	std	Y+22, r4	; 0x16
    11c2:	5f 8a       	std	Y+23, r5	; 0x17
    11c4:	68 8e       	std	Y+24, r6	; 0x18
    11c6:	79 8e       	std	Y+25, r7	; 0x19
		p += wcnt; /* Update pointers and counters */
    11c8:	e0 0e       	add	r14, r16
    11ca:	f1 1e       	adc	r15, r17
		btw -= wcnt;
    11cc:	a0 1a       	sub	r10, r16
    11ce:	b1 0a       	sbc	r11, r17
		*bw += wcnt;
    11d0:	f6 01       	movw	r30, r12
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	08 0f       	add	r16, r24
    11d8:	19 1f       	adc	r17, r25
    11da:	11 83       	std	Z+1, r17	; 0x01
    11dc:	00 83       	st	Z, r16
		if ((UINT)fs->fptr % 512 == 0) {
    11de:	8e 89       	ldd	r24, Y+22	; 0x16
    11e0:	9f 89       	ldd	r25, Y+23	; 0x17
    11e2:	a8 8d       	ldd	r26, Y+24	; 0x18
    11e4:	b9 8d       	ldd	r27, Y+25	; 0x19
    11e6:	91 70       	andi	r25, 0x01	; 1
    11e8:	89 2b       	or	r24, r25
    11ea:	79 f4       	brne	.+30     	; 0x120a <pf_write+0x1e8>
			if (disk_writep(0, 0))
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	ba 01       	movw	r22, r20
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    11fa:	88 23       	and	r24, r24
    11fc:	19 f0       	breq	.+6      	; 0x1204 <pf_write+0x1e2>
				ABORT(FR_DISK_ERR); /* Finalize the current sector write operation */
    11fe:	19 82       	std	Y+1, r1	; 0x01
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	0c c0       	rjmp	.+24     	; 0x121c <pf_write+0x1fa>
			fs->flag &= ~FA__WIP;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	8f 7b       	andi	r24, 0xBF	; 191
    1208:	89 83       	std	Y+1, r24	; 0x01
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain)
		btw = (UINT)remain; /* Truncate btw by remaining bytes */

	while (btw) {                                          /* Repeat until all data transferred */
    120a:	a1 14       	cp	r10, r1
    120c:	b1 04       	cpc	r11, r1
    120e:	09 f0       	breq	.+2      	; 0x1212 <pf_write+0x1f0>
    1210:	5e cf       	rjmp	.-324    	; 0x10ce <pf_write+0xac>
				ABORT(FR_DISK_ERR); /* Finalize the current sector write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	03 c0       	rjmp	.+6      	; 0x121c <pf_write+0x1fa>
	UINT        wcnt;
	FATFS *     fs = FatFs;

	*bw = 0;
	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    1216:	85 e0       	ldi	r24, 0x05	; 5
    1218:	01 c0       	rjmp	.+2      	; 0x121c <pf_write+0x1fa>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    121a:	84 e0       	ldi	r24, 0x04	; 4
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	7f 90       	pop	r7
    1232:	6f 90       	pop	r6
    1234:	5f 90       	pop	r5
    1236:	4f 90       	pop	r4
    1238:	08 95       	ret

0000123a <pf_lseek>:
/*-----------------------------------------------------------------------*/
#if _USE_LSEEK

FRESULT pf_lseek(DWORD ofs /* File pointer from top of file */
)
{
    123a:	4f 92       	push	r4
    123c:	5f 92       	push	r5
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	00 d0       	rcall	.+0      	; 0x1258 <pf_lseek+0x1e>
    1258:	00 d0       	rcall	.+0      	; 0x125a <pf_lseek+0x20>
    125a:	00 d0       	rcall	.+0      	; 0x125c <pf_lseek+0x22>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	CLUST  clst;
	DWORD  bcs, sect, ifptr;
	FATFS *fs = FatFs;
    1260:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <FatFs>
    1264:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <FatFs+0x1>
    1268:	3e 83       	std	Y+6, r19	; 0x06
    126a:	2d 83       	std	Y+5, r18	; 0x05

	if (!fs)
    126c:	21 15       	cp	r18, r1
    126e:	31 05       	cpc	r19, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <pf_lseek+0x3a>
    1272:	f4 c0       	rjmp	.+488    	; 0x145c <pf_lseek+0x222>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    1274:	d9 01       	movw	r26, r18
    1276:	11 96       	adiw	r26, 0x01	; 1
    1278:	2c 91       	ld	r18, X
    127a:	11 97       	sbiw	r26, 0x01	; 1
    127c:	20 ff       	sbrs	r18, 0
    127e:	f0 c0       	rjmp	.+480    	; 0x1460 <pf_lseek+0x226>
		return FR_NOT_OPENED;

	if (ofs > fs->fsize)
    1280:	5a 96       	adiw	r26, 0x1a	; 26
    1282:	cd 90       	ld	r12, X+
    1284:	dd 90       	ld	r13, X+
    1286:	ed 90       	ld	r14, X+
    1288:	fc 90       	ld	r15, X
    128a:	5d 97       	sbiw	r26, 0x1d	; 29
    128c:	c6 16       	cp	r12, r22
    128e:	d7 06       	cpc	r13, r23
    1290:	e8 06       	cpc	r14, r24
    1292:	f9 06       	cpc	r15, r25
    1294:	10 f0       	brcs	.+4      	; 0x129a <pf_lseek+0x60>
    1296:	6b 01       	movw	r12, r22
    1298:	7c 01       	movw	r14, r24
		ofs = fs->fsize; /* Clip offset with the file size */
	ifptr    = fs->fptr;
    129a:	ed 81       	ldd	r30, Y+5	; 0x05
    129c:	fe 81       	ldd	r31, Y+6	; 0x06
    129e:	46 88       	ldd	r4, Z+22	; 0x16
    12a0:	57 88       	ldd	r5, Z+23	; 0x17
    12a2:	60 8c       	ldd	r6, Z+24	; 0x18
    12a4:	71 8c       	ldd	r7, Z+25	; 0x19
	fs->fptr = 0;
    12a6:	16 8a       	std	Z+22, r1	; 0x16
    12a8:	17 8a       	std	Z+23, r1	; 0x17
    12aa:	10 8e       	std	Z+24, r1	; 0x18
    12ac:	11 8e       	std	Z+25, r1	; 0x19
	if (ofs > 0) {
    12ae:	c1 14       	cp	r12, r1
    12b0:	d1 04       	cpc	r13, r1
    12b2:	e1 04       	cpc	r14, r1
    12b4:	f1 04       	cpc	r15, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <pf_lseek+0x80>
    12b8:	d5 c0       	rjmp	.+426    	; 0x1464 <pf_lseek+0x22a>
		bcs = (DWORD)fs->csize * 512;                            /* Cluster size (byte) */
    12ba:	82 80       	ldd	r8, Z+2	; 0x02
    12bc:	91 2c       	mov	r9, r1
    12be:	a1 2c       	mov	r10, r1
    12c0:	b1 2c       	mov	r11, r1
    12c2:	07 2e       	mov	r0, r23
    12c4:	79 e0       	ldi	r23, 0x09	; 9
    12c6:	88 0c       	add	r8, r8
    12c8:	99 1c       	adc	r9, r9
    12ca:	aa 1c       	adc	r10, r10
    12cc:	bb 1c       	adc	r11, r11
    12ce:	7a 95       	dec	r23
    12d0:	d1 f7       	brne	.-12     	; 0x12c6 <pf_lseek+0x8c>
    12d2:	70 2d       	mov	r23, r0
		if (ifptr > 0 && (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
    12d4:	41 14       	cp	r4, r1
    12d6:	51 04       	cpc	r5, r1
    12d8:	61 04       	cpc	r6, r1
    12da:	71 04       	cpc	r7, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <pf_lseek+0xa6>
    12de:	40 c0       	rjmp	.+128    	; 0x1360 <pf_lseek+0x126>
    12e0:	c7 01       	movw	r24, r14
    12e2:	b6 01       	movw	r22, r12
    12e4:	61 50       	subi	r22, 0x01	; 1
    12e6:	71 09       	sbc	r23, r1
    12e8:	81 09       	sbc	r24, r1
    12ea:	91 09       	sbc	r25, r1
    12ec:	a5 01       	movw	r20, r10
    12ee:	94 01       	movw	r18, r8
    12f0:	0e 94 48 0a 	call	0x1490	; 0x1490 <__udivmodsi4>
    12f4:	29 83       	std	Y+1, r18	; 0x01
    12f6:	3a 83       	std	Y+2, r19	; 0x02
    12f8:	4b 83       	std	Y+3, r20	; 0x03
    12fa:	5c 83       	std	Y+4, r21	; 0x04
    12fc:	b1 e0       	ldi	r27, 0x01	; 1
    12fe:	4b 1a       	sub	r4, r27
    1300:	51 08       	sbc	r5, r1
    1302:	61 08       	sbc	r6, r1
    1304:	71 08       	sbc	r7, r1
    1306:	c3 01       	movw	r24, r6
    1308:	b2 01       	movw	r22, r4
    130a:	a5 01       	movw	r20, r10
    130c:	94 01       	movw	r18, r8
    130e:	0e 94 48 0a 	call	0x1490	; 0x1490 <__udivmodsi4>
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	ab 81       	ldd	r26, Y+3	; 0x03
    1318:	bc 81       	ldd	r27, Y+4	; 0x04
    131a:	82 17       	cp	r24, r18
    131c:	93 07       	cpc	r25, r19
    131e:	a4 07       	cpc	r26, r20
    1320:	b5 07       	cpc	r27, r21
    1322:	f0 f0       	brcs	.+60     	; 0x1360 <pf_lseek+0x126>
			fs->fptr = (ifptr - 1) & ~(bcs - 1);                 /* start from the current cluster */
    1324:	88 27       	eor	r24, r24
    1326:	99 27       	eor	r25, r25
    1328:	dc 01       	movw	r26, r24
    132a:	88 19       	sub	r24, r8
    132c:	99 09       	sbc	r25, r9
    132e:	aa 09       	sbc	r26, r10
    1330:	bb 09       	sbc	r27, r11
    1332:	48 22       	and	r4, r24
    1334:	59 22       	and	r5, r25
    1336:	6a 22       	and	r6, r26
    1338:	7b 22       	and	r7, r27
    133a:	ad 81       	ldd	r26, Y+5	; 0x05
    133c:	be 81       	ldd	r27, Y+6	; 0x06
    133e:	56 96       	adiw	r26, 0x16	; 22
    1340:	4d 92       	st	X+, r4
    1342:	5d 92       	st	X+, r5
    1344:	6d 92       	st	X+, r6
    1346:	7c 92       	st	X, r7
    1348:	59 97       	sbiw	r26, 0x19	; 25
			ofs -= fs->fptr;
    134a:	c4 18       	sub	r12, r4
    134c:	d5 08       	sbc	r13, r5
    134e:	e6 08       	sbc	r14, r6
    1350:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
    1352:	92 96       	adiw	r26, 0x22	; 34
    1354:	6d 91       	ld	r22, X+
    1356:	7d 91       	ld	r23, X+
    1358:	8d 91       	ld	r24, X+
    135a:	9c 91       	ld	r25, X
    135c:	95 97       	sbiw	r26, 0x25	; 37
    135e:	39 c0       	rjmp	.+114    	; 0x13d2 <pf_lseek+0x198>
		} else {                            /* When seek to back cluster, */
			clst           = fs->org_clust; /* start from the first cluster */
    1360:	ed 81       	ldd	r30, Y+5	; 0x05
    1362:	fe 81       	ldd	r31, Y+6	; 0x06
    1364:	66 8d       	ldd	r22, Z+30	; 0x1e
    1366:	77 8d       	ldd	r23, Z+31	; 0x1f
    1368:	80 a1       	ldd	r24, Z+32	; 0x20
    136a:	91 a1       	ldd	r25, Z+33	; 0x21
			fs->curr_clust = clst;
    136c:	62 a3       	std	Z+34, r22	; 0x22
    136e:	73 a3       	std	Z+35, r23	; 0x23
    1370:	84 a3       	std	Z+36, r24	; 0x24
    1372:	95 a3       	std	Z+37, r25	; 0x25
    1374:	2e c0       	rjmp	.+92     	; 0x13d2 <pf_lseek+0x198>
		}
		while (ofs > bcs) {       /* Cluster following loop */
			clst = get_fat(clst); /* Follow cluster chain */
    1376:	0e 94 2f 04 	call	0x85e	; 0x85e <get_fat>
			if (clst <= 1 || clst >= fs->n_fatent)
    137a:	62 30       	cpi	r22, 0x02	; 2
    137c:	71 05       	cpc	r23, r1
    137e:	81 05       	cpc	r24, r1
    1380:	91 05       	cpc	r25, r1
    1382:	58 f0       	brcs	.+22     	; 0x139a <pf_lseek+0x160>
    1384:	ed 81       	ldd	r30, Y+5	; 0x05
    1386:	fe 81       	ldd	r31, Y+6	; 0x06
    1388:	46 80       	ldd	r4, Z+6	; 0x06
    138a:	57 80       	ldd	r5, Z+7	; 0x07
    138c:	60 84       	ldd	r6, Z+8	; 0x08
    138e:	71 84       	ldd	r7, Z+9	; 0x09
    1390:	64 15       	cp	r22, r4
    1392:	75 05       	cpc	r23, r5
    1394:	86 05       	cpc	r24, r6
    1396:	97 05       	cpc	r25, r7
    1398:	30 f0       	brcs	.+12     	; 0x13a6 <pf_lseek+0x16c>
				ABORT(FR_DISK_ERR);
    139a:	ad 81       	ldd	r26, Y+5	; 0x05
    139c:	be 81       	ldd	r27, Y+6	; 0x06
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	1c 92       	st	X, r1
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	60 c0       	rjmp	.+192    	; 0x1466 <pf_lseek+0x22c>
			fs->curr_clust = clst;
    13a6:	ed 81       	ldd	r30, Y+5	; 0x05
    13a8:	fe 81       	ldd	r31, Y+6	; 0x06
    13aa:	62 a3       	std	Z+34, r22	; 0x22
    13ac:	73 a3       	std	Z+35, r23	; 0x23
    13ae:	84 a3       	std	Z+36, r24	; 0x24
    13b0:	95 a3       	std	Z+37, r25	; 0x25
			fs->fptr += bcs;
    13b2:	46 88       	ldd	r4, Z+22	; 0x16
    13b4:	57 88       	ldd	r5, Z+23	; 0x17
    13b6:	60 8c       	ldd	r6, Z+24	; 0x18
    13b8:	71 8c       	ldd	r7, Z+25	; 0x19
    13ba:	48 0c       	add	r4, r8
    13bc:	59 1c       	adc	r5, r9
    13be:	6a 1c       	adc	r6, r10
    13c0:	7b 1c       	adc	r7, r11
    13c2:	46 8a       	std	Z+22, r4	; 0x16
    13c4:	57 8a       	std	Z+23, r5	; 0x17
    13c6:	60 8e       	std	Z+24, r6	; 0x18
    13c8:	71 8e       	std	Z+25, r7	; 0x19
			ofs -= bcs;
    13ca:	c8 18       	sub	r12, r8
    13cc:	d9 08       	sbc	r13, r9
    13ce:	ea 08       	sbc	r14, r10
    13d0:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {                            /* When seek to back cluster, */
			clst           = fs->org_clust; /* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {       /* Cluster following loop */
    13d2:	8c 14       	cp	r8, r12
    13d4:	9d 04       	cpc	r9, r13
    13d6:	ae 04       	cpc	r10, r14
    13d8:	bf 04       	cpc	r11, r15
    13da:	68 f2       	brcs	.-102    	; 0x1376 <pf_lseek+0x13c>
				ABORT(FR_DISK_ERR);
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    13dc:	ed 81       	ldd	r30, Y+5	; 0x05
    13de:	fe 81       	ldd	r31, Y+6	; 0x06
    13e0:	86 88       	ldd	r8, Z+22	; 0x16
    13e2:	97 88       	ldd	r9, Z+23	; 0x17
    13e4:	a0 8c       	ldd	r10, Z+24	; 0x18
    13e6:	b1 8c       	ldd	r11, Z+25	; 0x19
    13e8:	c8 0c       	add	r12, r8
    13ea:	d9 1c       	adc	r13, r9
    13ec:	ea 1c       	adc	r14, r10
    13ee:	fb 1c       	adc	r15, r11
    13f0:	c6 8a       	std	Z+22, r12	; 0x16
    13f2:	d7 8a       	std	Z+23, r13	; 0x17
    13f4:	e0 8e       	std	Z+24, r14	; 0x18
    13f6:	f1 8e       	std	Z+25, r15	; 0x19
		sect = clust2sect(clst); /* Current sector */
    13f8:	0e 94 27 03 	call	0x64e	; 0x64e <clust2sect>
		if (!sect)
    13fc:	61 15       	cp	r22, r1
    13fe:	71 05       	cpc	r23, r1
    1400:	81 05       	cpc	r24, r1
    1402:	91 05       	cpc	r25, r1
    1404:	29 f4       	brne	.+10     	; 0x1410 <pf_lseek+0x1d6>
			ABORT(FR_DISK_ERR);
    1406:	ed 81       	ldd	r30, Y+5	; 0x05
    1408:	fe 81       	ldd	r31, Y+6	; 0x06
    140a:	11 82       	std	Z+1, r1	; 0x01
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	2b c0       	rjmp	.+86     	; 0x1466 <pf_lseek+0x22c>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    1410:	0b 2e       	mov	r0, r27
    1412:	b9 e0       	ldi	r27, 0x09	; 9
    1414:	f6 94       	lsr	r15
    1416:	e7 94       	ror	r14
    1418:	d7 94       	ror	r13
    141a:	c7 94       	ror	r12
    141c:	ba 95       	dec	r27
    141e:	d1 f7       	brne	.-12     	; 0x1414 <pf_lseek+0x1da>
    1420:	b0 2d       	mov	r27, r0
    1422:	ad 81       	ldd	r26, Y+5	; 0x05
    1424:	be 81       	ldd	r27, Y+6	; 0x06
    1426:	12 96       	adiw	r26, 0x02	; 2
    1428:	2c 91       	ld	r18, X
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	21 50       	subi	r18, 0x01	; 1
    142e:	31 09       	sbc	r19, r1
    1430:	49 01       	movw	r8, r18
    1432:	33 0f       	add	r19, r19
    1434:	aa 08       	sbc	r10, r10
    1436:	bb 08       	sbc	r11, r11
    1438:	c8 20       	and	r12, r8
    143a:	d9 20       	and	r13, r9
    143c:	ea 20       	and	r14, r10
    143e:	fb 20       	and	r15, r11
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8c 0d       	add	r24, r12
    1446:	9d 1d       	adc	r25, r13
    1448:	ae 1d       	adc	r26, r14
    144a:	bf 1d       	adc	r27, r15
    144c:	ed 81       	ldd	r30, Y+5	; 0x05
    144e:	fe 81       	ldd	r31, Y+6	; 0x06
    1450:	86 a3       	std	Z+38, r24	; 0x26
    1452:	97 a3       	std	Z+39, r25	; 0x27
    1454:	a0 a7       	std	Z+40, r26	; 0x28
    1456:	b1 a7       	std	Z+41, r27	; 0x29
	}

	return FR_OK;
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	05 c0       	rjmp	.+10     	; 0x1466 <pf_lseek+0x22c>
	CLUST  clst;
	DWORD  bcs, sect, ifptr;
	FATFS *fs = FatFs;

	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    145c:	85 e0       	ldi	r24, 0x05	; 5
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <pf_lseek+0x22c>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <pf_lseek+0x22c>
		if (!sect)
			ABORT(FR_DISK_ERR);
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
    1464:	80 e0       	ldi	r24, 0x00	; 0
}
    1466:	26 96       	adiw	r28, 0x06	; 6
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	bf 90       	pop	r11
    1480:	af 90       	pop	r10
    1482:	9f 90       	pop	r9
    1484:	8f 90       	pop	r8
    1486:	7f 90       	pop	r7
    1488:	6f 90       	pop	r6
    148a:	5f 90       	pop	r5
    148c:	4f 90       	pop	r4
    148e:	08 95       	ret

00001490 <__udivmodsi4>:
    1490:	a1 e2       	ldi	r26, 0x21	; 33
    1492:	1a 2e       	mov	r1, r26
    1494:	aa 1b       	sub	r26, r26
    1496:	bb 1b       	sub	r27, r27
    1498:	fd 01       	movw	r30, r26
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <__udivmodsi4_ep>

0000149c <__udivmodsi4_loop>:
    149c:	aa 1f       	adc	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	ee 1f       	adc	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	a2 17       	cp	r26, r18
    14a6:	b3 07       	cpc	r27, r19
    14a8:	e4 07       	cpc	r30, r20
    14aa:	f5 07       	cpc	r31, r21
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <__udivmodsi4_ep>
    14ae:	a2 1b       	sub	r26, r18
    14b0:	b3 0b       	sbc	r27, r19
    14b2:	e4 0b       	sbc	r30, r20
    14b4:	f5 0b       	sbc	r31, r21

000014b6 <__udivmodsi4_ep>:
    14b6:	66 1f       	adc	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	1a 94       	dec	r1
    14c0:	69 f7       	brne	.-38     	; 0x149c <__udivmodsi4_loop>
    14c2:	60 95       	com	r22
    14c4:	70 95       	com	r23
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	bd 01       	movw	r22, r26
    14d0:	cf 01       	movw	r24, r30
    14d2:	08 95       	ret

000014d4 <__muluhisi3>:
    14d4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__umulhisi3>
    14d8:	a5 9f       	mul	r26, r21
    14da:	90 0d       	add	r25, r0
    14dc:	b4 9f       	mul	r27, r20
    14de:	90 0d       	add	r25, r0
    14e0:	a4 9f       	mul	r26, r20
    14e2:	80 0d       	add	r24, r0
    14e4:	91 1d       	adc	r25, r1
    14e6:	11 24       	eor	r1, r1
    14e8:	08 95       	ret

000014ea <__umulhisi3>:
    14ea:	a2 9f       	mul	r26, r18
    14ec:	b0 01       	movw	r22, r0
    14ee:	b3 9f       	mul	r27, r19
    14f0:	c0 01       	movw	r24, r0
    14f2:	a3 9f       	mul	r26, r19
    14f4:	70 0d       	add	r23, r0
    14f6:	81 1d       	adc	r24, r1
    14f8:	11 24       	eor	r1, r1
    14fa:	91 1d       	adc	r25, r1
    14fc:	b2 9f       	mul	r27, r18
    14fe:	70 0d       	add	r23, r0
    1500:	81 1d       	adc	r24, r1
    1502:	11 24       	eor	r1, r1
    1504:	91 1d       	adc	r25, r1
    1506:	08 95       	ret

00001508 <_exit>:
    1508:	f8 94       	cli

0000150a <__stop_program>:
    150a:	ff cf       	rjmp	.-2      	; 0x150a <__stop_program>
