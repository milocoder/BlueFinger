
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000680  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e62  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd6  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054a  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000632  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e5  00000000  00000000  00002d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000302b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_12>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 30       	cpi	r26, 0x04	; 4
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  b4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <writeFloatToEEPROM>:
    }	
}


void writeFloatToEEPROM(uint8_t value, int address)
{
  bc:	28 2f       	mov	r18, r24
  be:	cb 01       	movw	r24, r22
	uint8_t val1 = value; // pak getal voor de komma
	//int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
	eeprom_write_byte((uint8_t*)address, val1);
  c0:	62 2f       	mov	r22, r18
  c2:	0e 94 c1 02 	call	0x582	; 0x582 <eeprom_write_byte>
  c6:	08 95       	ret

000000c8 <main>:
void writeFloatToEEPROM(uint8_t value, int address);


int main(void)
{	
	init_millis(16000000UL);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	74 e2       	ldi	r23, 0x24	; 36
  cc:	84 ef       	ldi	r24, 0xF4	; 244
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init_millis>
	sei();  // Enable interrupts
  d4:	78 94       	sei
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
	
	DDRF = 1;		//output ledje
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 bb       	out	0x10, r24	; 16
	DDRC = 0;		//input hall sensor
  da:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
  dc:	18 b8       	out	0x08, r1	; 8
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
	
	int addressHall = 1;
  de:	01 e0       	ldi	r16, 0x01	; 1
  e0:	10 e0       	ldi	r17, 0x00	; 0
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
	unsigned long huidige_tijd_ms = 0; 
	unsigned long vorige_tijd_ms = 0; 	
  e2:	c1 2c       	mov	r12, r1
  e4:	d1 2c       	mov	r13, r1
  e6:	76 01       	movw	r14, r12
{	
	init_millis(16000000UL);
	sei();  // Enable interrupts
	
	int huidige_status_hall = 0; 
	int vorige_status_hall = 0; 
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <main+0x28>
  ee:	ce 01       	movw	r24, r28
		
	
	/* Replace with your application code */
    while (1) 
    {	
		huidige_status_hall = PINC & (1 << PC0); 
  f0:	26 b1       	in	r18, 0x06	; 6
  f2:	21 70       	andi	r18, 0x01	; 1
  f4:	c2 2f       	mov	r28, r18
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	d2 2f       	mov	r29, r18
		
		if (vorige_status_hall != huidige_status_hall && huidige_status_hall == 1) {
  fa:	8c 17       	cp	r24, r28
  fc:	9d 07       	cpc	r25, r29
  fe:	b9 f3       	breq	.-18     	; 0xee <main+0x26>
 100:	c1 30       	cpi	r28, 0x01	; 1
 102:	d1 05       	cpc	r29, r1
 104:	a1 f7       	brne	.-24     	; 0xee <main+0x26>
		
			huidige_tijd_ms = millis();
 106:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <millis>
 10a:	4b 01       	movw	r8, r22
 10c:	5c 01       	movw	r10, r24
			unsigned long verschil_tijd_ms = huidige_tijd_ms - vorige_tijd_ms; 
 10e:	6c 19       	sub	r22, r12
 110:	7d 09       	sbc	r23, r13
 112:	8e 09       	sbc	r24, r14
 114:	9f 09       	sbc	r25, r15
			unsigned long verschil_tijd_s = verschil_tijd_ms / 1000; 
 116:	28 ee       	ldi	r18, 0xE8	; 232
 118:	33 e0       	ldi	r19, 0x03	; 3
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	0e 94 9f 02 	call	0x53e	; 0x53e <__udivmodsi4>
	
					
			
			uint8_t snelheidms = OMTREK_WIEL / verschil_tijd_s;
 122:	ca 01       	movw	r24, r20
 124:	b9 01       	movw	r22, r18
 126:	0e 94 a4 01 	call	0x348	; 0x348 <__floatunsisf>
 12a:	9b 01       	movw	r18, r22
 12c:	ac 01       	movw	r20, r24
 12e:	6d ec       	ldi	r22, 0xCD	; 205
 130:	7c ec       	ldi	r23, 0xCC	; 204
 132:	8c ea       	ldi	r24, 0xAC	; 172
 134:	9f e3       	ldi	r25, 0x3F	; 63
 136:	0e 94 03 01 	call	0x206	; 0x206 <__divsf3>
 13a:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fixunssfsi>
			uint8_t snelheidKmH = snelheidms * 3.6;  		
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 a6 01 	call	0x34c	; 0x34c <__floatsisf>
 148:	26 e6       	ldi	r18, 0x66	; 102
 14a:	36 e6       	ldi	r19, 0x66	; 102
 14c:	46 e6       	ldi	r20, 0x66	; 102
 14e:	50 e4       	ldi	r21, 0x40	; 64
 150:	0e 94 32 02 	call	0x464	; 0x464 <__mulsf3>
 154:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fixunssfsi>
 158:	86 2f       	mov	r24, r22
			writeFloatToEEPROM(snelheidKmH, addressHall);
 15a:	b8 01       	movw	r22, r16
 15c:	0e 94 5e 00 	call	0xbc	; 0xbc <writeFloatToEEPROM>
			addressHall += 3;		
 160:	0d 5f       	subi	r16, 0xFD	; 253
 162:	1f 4f       	sbci	r17, 0xFF	; 255
			
			
			
			vorige_tijd_ms = huidige_tijd_ms; 
 164:	75 01       	movw	r14, r10
 166:	64 01       	movw	r12, r8
 168:	c2 cf       	rjmp	.-124    	; 0xee <main+0x26>

0000016a <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
  timer1_millis++;
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 184:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 188:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 1b4:	20 e4       	ldi	r18, 0x40	; 64
 1b6:	3f e1       	ldi	r19, 0x1F	; 31
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	0e 94 9f 02 	call	0x53e	; 0x53e <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 1c0:	e1 e8       	ldi	r30, 0x81	; 129
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8a 60       	ori	r24, 0x0A	; 10
 1c8:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 1ca:	bb 27       	eor	r27, r27
 1cc:	a5 2f       	mov	r26, r21
 1ce:	94 2f       	mov	r25, r20
 1d0:	83 2f       	mov	r24, r19
 1d2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 1d6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 1da:	ef e6       	ldi	r30, 0x6F	; 111
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1e6:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <millis+0x18>
    millis_return = timer1_millis;
 1ec:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	21 11       	cpse	r18, r1
 200:	f5 cf       	rjmp	.-22     	; 0x1ec <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 202:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 204:	08 95       	ret

00000206 <__divsf3>:
 206:	0e 94 17 01 	call	0x22e	; 0x22e <__divsf3x>
 20a:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_round>
 20e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__fp_pscB>
 212:	58 f0       	brcs	.+22     	; 0x22a <__divsf3+0x24>
 214:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_pscA>
 218:	40 f0       	brcs	.+16     	; 0x22a <__divsf3+0x24>
 21a:	29 f4       	brne	.+10     	; 0x226 <__divsf3+0x20>
 21c:	5f 3f       	cpi	r21, 0xFF	; 255
 21e:	29 f0       	breq	.+10     	; 0x22a <__divsf3+0x24>
 220:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_inf>
 224:	51 11       	cpse	r21, r1
 226:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>
 22a:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_nan>

0000022e <__divsf3x>:
 22e:	0e 94 09 02 	call	0x412	; 0x412 <__fp_split3>
 232:	68 f3       	brcs	.-38     	; 0x20e <__divsf3+0x8>

00000234 <__divsf3_pse>:
 234:	99 23       	and	r25, r25
 236:	b1 f3       	breq	.-20     	; 0x224 <__divsf3+0x1e>
 238:	55 23       	and	r21, r21
 23a:	91 f3       	breq	.-28     	; 0x220 <__divsf3+0x1a>
 23c:	95 1b       	sub	r25, r21
 23e:	55 0b       	sbc	r21, r21
 240:	bb 27       	eor	r27, r27
 242:	aa 27       	eor	r26, r26
 244:	62 17       	cp	r22, r18
 246:	73 07       	cpc	r23, r19
 248:	84 07       	cpc	r24, r20
 24a:	38 f0       	brcs	.+14     	; 0x25a <__divsf3_pse+0x26>
 24c:	9f 5f       	subi	r25, 0xFF	; 255
 24e:	5f 4f       	sbci	r21, 0xFF	; 255
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	44 1f       	adc	r20, r20
 256:	aa 1f       	adc	r26, r26
 258:	a9 f3       	breq	.-22     	; 0x244 <__divsf3_pse+0x10>
 25a:	35 d0       	rcall	.+106    	; 0x2c6 <__divsf3_pse+0x92>
 25c:	0e 2e       	mov	r0, r30
 25e:	3a f0       	brmi	.+14     	; 0x26e <__divsf3_pse+0x3a>
 260:	e0 e8       	ldi	r30, 0x80	; 128
 262:	32 d0       	rcall	.+100    	; 0x2c8 <__divsf3_pse+0x94>
 264:	91 50       	subi	r25, 0x01	; 1
 266:	50 40       	sbci	r21, 0x00	; 0
 268:	e6 95       	lsr	r30
 26a:	00 1c       	adc	r0, r0
 26c:	ca f7       	brpl	.-14     	; 0x260 <__divsf3_pse+0x2c>
 26e:	2b d0       	rcall	.+86     	; 0x2c6 <__divsf3_pse+0x92>
 270:	fe 2f       	mov	r31, r30
 272:	29 d0       	rcall	.+82     	; 0x2c6 <__divsf3_pse+0x92>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	88 1f       	adc	r24, r24
 27a:	bb 1f       	adc	r27, r27
 27c:	26 17       	cp	r18, r22
 27e:	37 07       	cpc	r19, r23
 280:	48 07       	cpc	r20, r24
 282:	ab 07       	cpc	r26, r27
 284:	b0 e8       	ldi	r27, 0x80	; 128
 286:	09 f0       	breq	.+2      	; 0x28a <__divsf3_pse+0x56>
 288:	bb 0b       	sbc	r27, r27
 28a:	80 2d       	mov	r24, r0
 28c:	bf 01       	movw	r22, r30
 28e:	ff 27       	eor	r31, r31
 290:	93 58       	subi	r25, 0x83	; 131
 292:	5f 4f       	sbci	r21, 0xFF	; 255
 294:	3a f0       	brmi	.+14     	; 0x2a4 <__divsf3_pse+0x70>
 296:	9e 3f       	cpi	r25, 0xFE	; 254
 298:	51 05       	cpc	r21, r1
 29a:	78 f0       	brcs	.+30     	; 0x2ba <__divsf3_pse+0x86>
 29c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_inf>
 2a0:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>
 2a4:	5f 3f       	cpi	r21, 0xFF	; 255
 2a6:	e4 f3       	brlt	.-8      	; 0x2a0 <__divsf3_pse+0x6c>
 2a8:	98 3e       	cpi	r25, 0xE8	; 232
 2aa:	d4 f3       	brlt	.-12     	; 0x2a0 <__divsf3_pse+0x6c>
 2ac:	86 95       	lsr	r24
 2ae:	77 95       	ror	r23
 2b0:	67 95       	ror	r22
 2b2:	b7 95       	ror	r27
 2b4:	f7 95       	ror	r31
 2b6:	9f 5f       	subi	r25, 0xFF	; 255
 2b8:	c9 f7       	brne	.-14     	; 0x2ac <__divsf3_pse+0x78>
 2ba:	88 0f       	add	r24, r24
 2bc:	91 1d       	adc	r25, r1
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	97 f9       	bld	r25, 7
 2c4:	08 95       	ret
 2c6:	e1 e0       	ldi	r30, 0x01	; 1
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	88 1f       	adc	r24, r24
 2ce:	bb 1f       	adc	r27, r27
 2d0:	62 17       	cp	r22, r18
 2d2:	73 07       	cpc	r23, r19
 2d4:	84 07       	cpc	r24, r20
 2d6:	ba 07       	cpc	r27, r26
 2d8:	20 f0       	brcs	.+8      	; 0x2e2 <__divsf3_pse+0xae>
 2da:	62 1b       	sub	r22, r18
 2dc:	73 0b       	sbc	r23, r19
 2de:	84 0b       	sbc	r24, r20
 2e0:	ba 0b       	sbc	r27, r26
 2e2:	ee 1f       	adc	r30, r30
 2e4:	88 f7       	brcc	.-30     	; 0x2c8 <__divsf3_pse+0x94>
 2e6:	e0 95       	com	r30
 2e8:	08 95       	ret

000002ea <__fixunssfsi>:
 2ea:	0e 94 11 02 	call	0x422	; 0x422 <__fp_splitA>
 2ee:	88 f0       	brcs	.+34     	; 0x312 <__fixunssfsi+0x28>
 2f0:	9f 57       	subi	r25, 0x7F	; 127
 2f2:	98 f0       	brcs	.+38     	; 0x31a <__fixunssfsi+0x30>
 2f4:	b9 2f       	mov	r27, r25
 2f6:	99 27       	eor	r25, r25
 2f8:	b7 51       	subi	r27, 0x17	; 23
 2fa:	b0 f0       	brcs	.+44     	; 0x328 <__fixunssfsi+0x3e>
 2fc:	e1 f0       	breq	.+56     	; 0x336 <__fixunssfsi+0x4c>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	1a f0       	brmi	.+6      	; 0x30e <__fixunssfsi+0x24>
 308:	ba 95       	dec	r27
 30a:	c9 f7       	brne	.-14     	; 0x2fe <__fixunssfsi+0x14>
 30c:	14 c0       	rjmp	.+40     	; 0x336 <__fixunssfsi+0x4c>
 30e:	b1 30       	cpi	r27, 0x01	; 1
 310:	91 f0       	breq	.+36     	; 0x336 <__fixunssfsi+0x4c>
 312:	0e 94 2b 02 	call	0x456	; 0x456 <__fp_zero>
 316:	b1 e0       	ldi	r27, 0x01	; 1
 318:	08 95       	ret
 31a:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_zero>
 31e:	67 2f       	mov	r22, r23
 320:	78 2f       	mov	r23, r24
 322:	88 27       	eor	r24, r24
 324:	b8 5f       	subi	r27, 0xF8	; 248
 326:	39 f0       	breq	.+14     	; 0x336 <__fixunssfsi+0x4c>
 328:	b9 3f       	cpi	r27, 0xF9	; 249
 32a:	cc f3       	brlt	.-14     	; 0x31e <__fixunssfsi+0x34>
 32c:	86 95       	lsr	r24
 32e:	77 95       	ror	r23
 330:	67 95       	ror	r22
 332:	b3 95       	inc	r27
 334:	d9 f7       	brne	.-10     	; 0x32c <__fixunssfsi+0x42>
 336:	3e f4       	brtc	.+14     	; 0x346 <__fixunssfsi+0x5c>
 338:	90 95       	com	r25
 33a:	80 95       	com	r24
 33c:	70 95       	com	r23
 33e:	61 95       	neg	r22
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	8f 4f       	sbci	r24, 0xFF	; 255
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	08 95       	ret

00000348 <__floatunsisf>:
 348:	e8 94       	clt
 34a:	09 c0       	rjmp	.+18     	; 0x35e <__floatsisf+0x12>

0000034c <__floatsisf>:
 34c:	97 fb       	bst	r25, 7
 34e:	3e f4       	brtc	.+14     	; 0x35e <__floatsisf+0x12>
 350:	90 95       	com	r25
 352:	80 95       	com	r24
 354:	70 95       	com	r23
 356:	61 95       	neg	r22
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	8f 4f       	sbci	r24, 0xFF	; 255
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	99 23       	and	r25, r25
 360:	a9 f0       	breq	.+42     	; 0x38c <__floatsisf+0x40>
 362:	f9 2f       	mov	r31, r25
 364:	96 e9       	ldi	r25, 0x96	; 150
 366:	bb 27       	eor	r27, r27
 368:	93 95       	inc	r25
 36a:	f6 95       	lsr	r31
 36c:	87 95       	ror	r24
 36e:	77 95       	ror	r23
 370:	67 95       	ror	r22
 372:	b7 95       	ror	r27
 374:	f1 11       	cpse	r31, r1
 376:	f8 cf       	rjmp	.-16     	; 0x368 <__floatsisf+0x1c>
 378:	fa f4       	brpl	.+62     	; 0x3b8 <__floatsisf+0x6c>
 37a:	bb 0f       	add	r27, r27
 37c:	11 f4       	brne	.+4      	; 0x382 <__floatsisf+0x36>
 37e:	60 ff       	sbrs	r22, 0
 380:	1b c0       	rjmp	.+54     	; 0x3b8 <__floatsisf+0x6c>
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	8f 4f       	sbci	r24, 0xFF	; 255
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	16 c0       	rjmp	.+44     	; 0x3b8 <__floatsisf+0x6c>
 38c:	88 23       	and	r24, r24
 38e:	11 f0       	breq	.+4      	; 0x394 <__floatsisf+0x48>
 390:	96 e9       	ldi	r25, 0x96	; 150
 392:	11 c0       	rjmp	.+34     	; 0x3b6 <__floatsisf+0x6a>
 394:	77 23       	and	r23, r23
 396:	21 f0       	breq	.+8      	; 0x3a0 <__floatsisf+0x54>
 398:	9e e8       	ldi	r25, 0x8E	; 142
 39a:	87 2f       	mov	r24, r23
 39c:	76 2f       	mov	r23, r22
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <__floatsisf+0x5e>
 3a0:	66 23       	and	r22, r22
 3a2:	71 f0       	breq	.+28     	; 0x3c0 <__floatsisf+0x74>
 3a4:	96 e8       	ldi	r25, 0x86	; 134
 3a6:	86 2f       	mov	r24, r22
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	2a f0       	brmi	.+10     	; 0x3b8 <__floatsisf+0x6c>
 3ae:	9a 95       	dec	r25
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	da f7       	brpl	.-10     	; 0x3ae <__floatsisf+0x62>
 3b8:	88 0f       	add	r24, r24
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	97 f9       	bld	r25, 7
 3c0:	08 95       	ret

000003c2 <__fp_inf>:
 3c2:	97 f9       	bld	r25, 7
 3c4:	9f 67       	ori	r25, 0x7F	; 127
 3c6:	80 e8       	ldi	r24, 0x80	; 128
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	08 95       	ret

000003ce <__fp_nan>:
 3ce:	9f ef       	ldi	r25, 0xFF	; 255
 3d0:	80 ec       	ldi	r24, 0xC0	; 192
 3d2:	08 95       	ret

000003d4 <__fp_pscA>:
 3d4:	00 24       	eor	r0, r0
 3d6:	0a 94       	dec	r0
 3d8:	16 16       	cp	r1, r22
 3da:	17 06       	cpc	r1, r23
 3dc:	18 06       	cpc	r1, r24
 3de:	09 06       	cpc	r0, r25
 3e0:	08 95       	ret

000003e2 <__fp_pscB>:
 3e2:	00 24       	eor	r0, r0
 3e4:	0a 94       	dec	r0
 3e6:	12 16       	cp	r1, r18
 3e8:	13 06       	cpc	r1, r19
 3ea:	14 06       	cpc	r1, r20
 3ec:	05 06       	cpc	r0, r21
 3ee:	08 95       	ret

000003f0 <__fp_round>:
 3f0:	09 2e       	mov	r0, r25
 3f2:	03 94       	inc	r0
 3f4:	00 0c       	add	r0, r0
 3f6:	11 f4       	brne	.+4      	; 0x3fc <__fp_round+0xc>
 3f8:	88 23       	and	r24, r24
 3fa:	52 f0       	brmi	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fc:	bb 0f       	add	r27, r27
 3fe:	40 f4       	brcc	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	bf 2b       	or	r27, r31
 402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	60 ff       	sbrs	r22, 0
 406:	04 c0       	rjmp	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	08 95       	ret

00000412 <__fp_split3>:
 412:	57 fd       	sbrc	r21, 7
 414:	90 58       	subi	r25, 0x80	; 128
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	59 f0       	breq	.+22     	; 0x432 <__fp_splitA+0x10>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	71 f0       	breq	.+28     	; 0x43c <__fp_splitA+0x1a>
 420:	47 95       	ror	r20

00000422 <__fp_splitA>:
 422:	88 0f       	add	r24, r24
 424:	97 fb       	bst	r25, 7
 426:	99 1f       	adc	r25, r25
 428:	61 f0       	breq	.+24     	; 0x442 <__fp_splitA+0x20>
 42a:	9f 3f       	cpi	r25, 0xFF	; 255
 42c:	79 f0       	breq	.+30     	; 0x44c <__fp_splitA+0x2a>
 42e:	87 95       	ror	r24
 430:	08 95       	ret
 432:	12 16       	cp	r1, r18
 434:	13 06       	cpc	r1, r19
 436:	14 06       	cpc	r1, r20
 438:	55 1f       	adc	r21, r21
 43a:	f2 cf       	rjmp	.-28     	; 0x420 <__fp_split3+0xe>
 43c:	46 95       	lsr	r20
 43e:	f1 df       	rcall	.-30     	; 0x422 <__fp_splitA>
 440:	08 c0       	rjmp	.+16     	; 0x452 <__fp_splitA+0x30>
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	99 1f       	adc	r25, r25
 44a:	f1 cf       	rjmp	.-30     	; 0x42e <__fp_splitA+0xc>
 44c:	86 95       	lsr	r24
 44e:	71 05       	cpc	r23, r1
 450:	61 05       	cpc	r22, r1
 452:	08 94       	sec
 454:	08 95       	ret

00000456 <__fp_zero>:
 456:	e8 94       	clt

00000458 <__fp_szero>:
 458:	bb 27       	eor	r27, r27
 45a:	66 27       	eor	r22, r22
 45c:	77 27       	eor	r23, r23
 45e:	cb 01       	movw	r24, r22
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__mulsf3>:
 464:	0e 94 45 02 	call	0x48a	; 0x48a <__mulsf3x>
 468:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_round>
 46c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_pscA>
 470:	38 f0       	brcs	.+14     	; 0x480 <__mulsf3+0x1c>
 472:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__fp_pscB>
 476:	20 f0       	brcs	.+8      	; 0x480 <__mulsf3+0x1c>
 478:	95 23       	and	r25, r21
 47a:	11 f0       	breq	.+4      	; 0x480 <__mulsf3+0x1c>
 47c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_inf>
 480:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_nan>
 484:	11 24       	eor	r1, r1
 486:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>

0000048a <__mulsf3x>:
 48a:	0e 94 09 02 	call	0x412	; 0x412 <__fp_split3>
 48e:	70 f3       	brcs	.-36     	; 0x46c <__mulsf3+0x8>

00000490 <__mulsf3_pse>:
 490:	95 9f       	mul	r25, r21
 492:	c1 f3       	breq	.-16     	; 0x484 <__mulsf3+0x20>
 494:	95 0f       	add	r25, r21
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	55 1f       	adc	r21, r21
 49a:	62 9f       	mul	r22, r18
 49c:	f0 01       	movw	r30, r0
 49e:	72 9f       	mul	r23, r18
 4a0:	bb 27       	eor	r27, r27
 4a2:	f0 0d       	add	r31, r0
 4a4:	b1 1d       	adc	r27, r1
 4a6:	63 9f       	mul	r22, r19
 4a8:	aa 27       	eor	r26, r26
 4aa:	f0 0d       	add	r31, r0
 4ac:	b1 1d       	adc	r27, r1
 4ae:	aa 1f       	adc	r26, r26
 4b0:	64 9f       	mul	r22, r20
 4b2:	66 27       	eor	r22, r22
 4b4:	b0 0d       	add	r27, r0
 4b6:	a1 1d       	adc	r26, r1
 4b8:	66 1f       	adc	r22, r22
 4ba:	82 9f       	mul	r24, r18
 4bc:	22 27       	eor	r18, r18
 4be:	b0 0d       	add	r27, r0
 4c0:	a1 1d       	adc	r26, r1
 4c2:	62 1f       	adc	r22, r18
 4c4:	73 9f       	mul	r23, r19
 4c6:	b0 0d       	add	r27, r0
 4c8:	a1 1d       	adc	r26, r1
 4ca:	62 1f       	adc	r22, r18
 4cc:	83 9f       	mul	r24, r19
 4ce:	a0 0d       	add	r26, r0
 4d0:	61 1d       	adc	r22, r1
 4d2:	22 1f       	adc	r18, r18
 4d4:	74 9f       	mul	r23, r20
 4d6:	33 27       	eor	r19, r19
 4d8:	a0 0d       	add	r26, r0
 4da:	61 1d       	adc	r22, r1
 4dc:	23 1f       	adc	r18, r19
 4de:	84 9f       	mul	r24, r20
 4e0:	60 0d       	add	r22, r0
 4e2:	21 1d       	adc	r18, r1
 4e4:	82 2f       	mov	r24, r18
 4e6:	76 2f       	mov	r23, r22
 4e8:	6a 2f       	mov	r22, r26
 4ea:	11 24       	eor	r1, r1
 4ec:	9f 57       	subi	r25, 0x7F	; 127
 4ee:	50 40       	sbci	r21, 0x00	; 0
 4f0:	9a f0       	brmi	.+38     	; 0x518 <__mulsf3_pse+0x88>
 4f2:	f1 f0       	breq	.+60     	; 0x530 <__mulsf3_pse+0xa0>
 4f4:	88 23       	and	r24, r24
 4f6:	4a f0       	brmi	.+18     	; 0x50a <__mulsf3_pse+0x7a>
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	bb 1f       	adc	r27, r27
 4fe:	66 1f       	adc	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	91 50       	subi	r25, 0x01	; 1
 506:	50 40       	sbci	r21, 0x00	; 0
 508:	a9 f7       	brne	.-22     	; 0x4f4 <__mulsf3_pse+0x64>
 50a:	9e 3f       	cpi	r25, 0xFE	; 254
 50c:	51 05       	cpc	r21, r1
 50e:	80 f0       	brcs	.+32     	; 0x530 <__mulsf3_pse+0xa0>
 510:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_inf>
 514:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>
 518:	5f 3f       	cpi	r21, 0xFF	; 255
 51a:	e4 f3       	brlt	.-8      	; 0x514 <__mulsf3_pse+0x84>
 51c:	98 3e       	cpi	r25, 0xE8	; 232
 51e:	d4 f3       	brlt	.-12     	; 0x514 <__mulsf3_pse+0x84>
 520:	86 95       	lsr	r24
 522:	77 95       	ror	r23
 524:	67 95       	ror	r22
 526:	b7 95       	ror	r27
 528:	f7 95       	ror	r31
 52a:	e7 95       	ror	r30
 52c:	9f 5f       	subi	r25, 0xFF	; 255
 52e:	c1 f7       	brne	.-16     	; 0x520 <__mulsf3_pse+0x90>
 530:	fe 2b       	or	r31, r30
 532:	88 0f       	add	r24, r24
 534:	91 1d       	adc	r25, r1
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	97 f9       	bld	r25, 7
 53c:	08 95       	ret

0000053e <__udivmodsi4>:
 53e:	a1 e2       	ldi	r26, 0x21	; 33
 540:	1a 2e       	mov	r1, r26
 542:	aa 1b       	sub	r26, r26
 544:	bb 1b       	sub	r27, r27
 546:	fd 01       	movw	r30, r26
 548:	0d c0       	rjmp	.+26     	; 0x564 <__udivmodsi4_ep>

0000054a <__udivmodsi4_loop>:
 54a:	aa 1f       	adc	r26, r26
 54c:	bb 1f       	adc	r27, r27
 54e:	ee 1f       	adc	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	a2 17       	cp	r26, r18
 554:	b3 07       	cpc	r27, r19
 556:	e4 07       	cpc	r30, r20
 558:	f5 07       	cpc	r31, r21
 55a:	20 f0       	brcs	.+8      	; 0x564 <__udivmodsi4_ep>
 55c:	a2 1b       	sub	r26, r18
 55e:	b3 0b       	sbc	r27, r19
 560:	e4 0b       	sbc	r30, r20
 562:	f5 0b       	sbc	r31, r21

00000564 <__udivmodsi4_ep>:
 564:	66 1f       	adc	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	1a 94       	dec	r1
 56e:	69 f7       	brne	.-38     	; 0x54a <__udivmodsi4_loop>
 570:	60 95       	com	r22
 572:	70 95       	com	r23
 574:	80 95       	com	r24
 576:	90 95       	com	r25
 578:	9b 01       	movw	r18, r22
 57a:	ac 01       	movw	r20, r24
 57c:	bd 01       	movw	r22, r26
 57e:	cf 01       	movw	r24, r30
 580:	08 95       	ret

00000582 <eeprom_write_byte>:
 582:	26 2f       	mov	r18, r22

00000584 <eeprom_write_r18>:
 584:	f9 99       	sbic	0x1f, 1	; 31
 586:	fe cf       	rjmp	.-4      	; 0x584 <eeprom_write_r18>
 588:	92 bd       	out	0x22, r25	; 34
 58a:	81 bd       	out	0x21, r24	; 33
 58c:	20 bd       	out	0x20, r18	; 32
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	fa 9a       	sbi	0x1f, 2	; 31
 594:	f9 9a       	sbi	0x1f, 1	; 31
 596:	0f be       	out	0x3f, r0	; 63
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	08 95       	ret

0000059c <_exit>:
 59c:	f8 94       	cli

0000059e <__stop_program>:
 59e:	ff cf       	rjmp	.-2      	; 0x59e <__stop_program>
