
SD_kaart4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000016e4  00001778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800188  00800188  00001800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002410  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f2f  00000000  00000000  00003d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122d  00000000  00000000  00004cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00005ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000830  00000000  00000000  000063b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ff3  00000000  00000000  00006be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00008bd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 ee       	ldi	r30, 0xE4	; 228
      a8:	f6 e1       	ldi	r31, 0x16	; 22
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a8 38       	cpi	r26, 0x88	; 136
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	21 e0       	ldi	r18, 0x01	; 1
      b8:	a8 e8       	ldi	r26, 0x88	; 136
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ae 3c       	cpi	r26, 0xCE	; 206
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 b9 02 	call	0x572	; 0x572 <main>
      ca:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_spi>:
//

static void init_spi(void)
{
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= ((1 << MOSI) | (1 << SCK) | (1 << CS));
      d2:	84 b1       	in	r24, 0x04	; 4
      d4:	87 60       	ori	r24, 0x07	; 7
      d6:	84 b9       	out	0x04, r24	; 4
	
	// enable pull up resistor in MISO
	PORTB |= (1 << MISO);
      d8:	85 b1       	in	r24, 0x05	; 5
      da:	88 60       	ori	r24, 0x08	; 8
      dc:	85 b9       	out	0x05, r24	; 5
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= ((1<<SPE) | (1<<MSTR) | (1<<SPR0));
      de:	8c b5       	in	r24, 0x2c	; 44
      e0:	81 65       	ori	r24, 0x51	; 81
      e2:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<CS); 				//hoog maken CS	
      e4:	85 b1       	in	r24, 0x05	; 5
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	85 b9       	out	0x05, r24	; 5
      ea:	08 95       	ret

000000ec <xmit_spi>:
}

static BYTE xmit_spi(BYTE data)
{
	PORTB &= ~(1<<CS); //laag maken
      ec:	95 b1       	in	r25, 0x05	; 5
      ee:	9e 7f       	andi	r25, 0xFE	; 254
      f0:	95 b9       	out	0x05, r25	; 5
	/* Start transmission */
	SPDR = data;
      f2:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <xmit_spi+0x8>
	PORTB |= (1<<CS);		//hoog maken CS
      fa:	85 b1       	in	r24, 0x05	; 5
      fc:	81 60       	ori	r24, 0x01	; 1
      fe:	85 b9       	out	0x05, r24	; 5
	
	return SPDR; 
     100:	8e b5       	in	r24, 0x2e	; 46
}
     102:	08 95       	ret

00000104 <rcv_spi>:

static BYTE rcv_spi(void)
{
	return xmit_spi(0xFF);
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
}
     10a:	08 95       	ret

0000010c <send_cmd>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static BYTE send_cmd(BYTE  cmd, /* 1st byte (Start + Index) */
                     DWORD arg ) /* Argument (32 bits) */
{
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	c8 2f       	mov	r28, r24
     118:	d4 2f       	mov	r29, r20
     11a:	15 2f       	mov	r17, r21
     11c:	06 2f       	mov	r16, r22
     11e:	f7 2e       	mov	r15, r23
	BYTE n, res;

	if (cmd & 0x80) { /* ACMD<n> is the command sequence of CMD55-CMD<n> */
     120:	88 23       	and	r24, r24
     122:	4c f4       	brge	.+18     	; 0x136 <send_cmd+0x2a>
		cmd &= 0x7F;
     124:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	ba 01       	movw	r22, r20
     12c:	87 e7       	ldi	r24, 0x77	; 119
     12e:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
		if (res > 1)
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	50 f5       	brcc	.+84     	; 0x18a <send_cmd+0x7e>
			return res;
	}

	/* Select the card */
	DESELECT();
     136:	85 b1       	in	r24, 0x05	; 5
     138:	81 60       	ori	r24, 0x01	; 1
     13a:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     13c:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	SELECT();
     140:	85 b1       	in	r24, 0x05	; 5
     142:	8e 7f       	andi	r24, 0xFE	; 254
     144:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     146:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);               /* Start + Command index */
     14a:	8c 2f       	mov	r24, r28
     14c:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
     150:	8f 2d       	mov	r24, r15
     152:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
     156:	80 2f       	mov	r24, r16
     158:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));  /* Argument[15..8] */
     15c:	81 2f       	mov	r24, r17
     15e:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)arg);         /* Argument[7..0] */
     162:	8d 2f       	mov	r24, r29
     164:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	n = 0x01;                    /* Dummy CRC + Stop */
	if (cmd == CMD0)
     168:	c0 34       	cpi	r28, 0x40	; 64
     16a:	11 f0       	breq	.+4      	; 0x170 <send_cmd+0x64>
	xmit_spi(cmd);               /* Start + Command index */
	xmit_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));  /* Argument[15..8] */
	xmit_spi((BYTE)arg);         /* Argument[7..0] */
	n = 0x01;                    /* Dummy CRC + Stop */
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	01 c0       	rjmp	.+2      	; 0x172 <send_cmd+0x66>
	if (cmd == CMD0)
		n = 0x95; /* Valid CRC for CMD0(0) */
     170:	85 e9       	ldi	r24, 0x95	; 149
	if (cmd == CMD8)
     172:	c8 34       	cpi	r28, 0x48	; 72
     174:	09 f4       	brne	.+2      	; 0x178 <send_cmd+0x6c>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
     176:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
     178:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>

	/* Receive a command response */
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
     17c:	ca e0       	ldi	r28, 0x0A	; 10
	do {
		res = rcv_spi();
     17e:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	} while ((res & 0x80) && --n);
     182:	88 23       	and	r24, r24
     184:	14 f4       	brge	.+4      	; 0x18a <send_cmd+0x7e>
     186:	c1 50       	subi	r28, 0x01	; 1
     188:	d1 f7       	brne	.-12     	; 0x17e <send_cmd+0x72>

	return res; /* Return with the response value */
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	08 95       	ret

00000196 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(void)
{
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <disk_initialize+0xe>
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <disk_initialize+0x10>
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && SELECTING)
     1aa:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <CardType>
     1ae:	81 11       	cpse	r24, r1
     1b0:	84 b1       	in	r24, 0x04	; 4
		disk_writep(0, 0); /* Finalize write process if it is in progress */
	
#endif

	init_spi(); /* Initialize ports to control MMC */ 
     1b2:	0e 94 69 00 	call	0xd2	; 0xd2 <init_spi>
	DESELECT();
     1b6:	85 b1       	in	r24, 0x05	; 5
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	85 b9       	out	0x05, r24	; 5
	for (n = 10; n; n--)
     1bc:	1a e0       	ldi	r17, 0x0A	; 10
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <disk_initialize+0x30>
		rcv_spi(); /* 80 dummy clocks with CS=H */
     1c0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	
#endif

	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
     1c4:	11 50       	subi	r17, 0x01	; 1
     1c6:	11 11       	cpse	r17, r1
     1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <disk_initialize+0x2a>
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) { 
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	ba 01       	movw	r22, r20
     1d0:	80 e4       	ldi	r24, 0x40	; 64
     1d2:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	09 f0       	breq	.+2      	; 0x1dc <disk_initialize+0x46>
     1da:	9b c0       	rjmp	.+310    	; 0x312 <disk_initialize+0x17c>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
     1dc:	4a ea       	ldi	r20, 0xAA	; 170
     1de:	51 e0       	ldi	r21, 0x01	; 1
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	88 e4       	ldi	r24, 0x48	; 72
     1e6:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <disk_initialize+0x5a>
     1ee:	59 c0       	rjmp	.+178    	; 0x2a2 <disk_initialize+0x10c>
     1f0:	0d c0       	rjmp	.+26     	; 0x20c <disk_initialize+0x76>
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
     1f2:	e0 2e       	mov	r14, r16
     1f4:	f1 2c       	mov	r15, r1
     1f6:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     1fa:	e1 e0       	ldi	r30, 0x01	; 1
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0d       	add	r30, r14
     204:	ff 1d       	adc	r31, r15
     206:	80 83       	st	Z, r24
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) { 
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
     208:	0f 5f       	subi	r16, 0xFF	; 255
     20a:	01 c0       	rjmp	.+2      	; 0x20e <disk_initialize+0x78>
     20c:	01 2f       	mov	r16, r17
     20e:	04 30       	cpi	r16, 0x04	; 4
     210:	80 f3       	brcs	.-32     	; 0x1f2 <disk_initialize+0x5c>
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	09 f0       	breq	.+2      	; 0x21a <disk_initialize+0x84>
     218:	7e c0       	rjmp	.+252    	; 0x316 <disk_initialize+0x180>
     21a:	8c 81       	ldd	r24, Y+4	; 0x04
     21c:	8a 3a       	cpi	r24, 0xAA	; 170
     21e:	61 f0       	breq	.+24     	; 0x238 <disk_initialize+0xa2>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     220:	f1 2c       	mov	r15, r1
     222:	84 c0       	rjmp	.+264    	; 0x32c <disk_initialize+0x196>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     224:	8f e8       	ldi	r24, 0x8F	; 143
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <disk_initialize+0x92>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <disk_initialize+0x98>
     22e:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) { 
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	e9 1a       	sub	r14, r25
     234:	f1 08       	sbc	r15, r1
     236:	06 c0       	rjmp	.+12     	; 0x244 <disk_initialize+0xae>
     238:	0f 2e       	mov	r0, r31
     23a:	f0 e1       	ldi	r31, 0x10	; 16
     23c:	ef 2e       	mov	r14, r31
     23e:	f7 e2       	ldi	r31, 0x27	; 39
     240:	ff 2e       	mov	r15, r31
     242:	f0 2d       	mov	r31, r0
     244:	e1 14       	cp	r14, r1
     246:	f1 04       	cpc	r15, r1
     248:	49 f0       	breq	.+18     	; 0x25c <disk_initialize+0xc6>
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e4       	ldi	r23, 0x40	; 64
     252:	89 ee       	ldi	r24, 0xE9	; 233
     254:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     258:	81 11       	cpse	r24, r1
     25a:	e4 cf       	rjmp	.-56     	; 0x224 <disk_initialize+0x8e>
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
     25c:	ef 28       	or	r14, r15
     25e:	09 f4       	brne	.+2      	; 0x262 <disk_initialize+0xcc>
     260:	5c c0       	rjmp	.+184    	; 0x31a <disk_initialize+0x184>
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	ba 01       	movw	r22, r20
     268:	8a e7       	ldi	r24, 0x7A	; 122
     26a:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     26e:	88 23       	and	r24, r24
     270:	71 f0       	breq	.+28     	; 0x28e <disk_initialize+0xf8>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     272:	f1 2c       	mov	r15, r1
     274:	5b c0       	rjmp	.+182    	; 0x32c <disk_initialize+0x196>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
     276:	e1 2e       	mov	r14, r17
     278:	f1 2c       	mov	r15, r1
     27a:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     27e:	e1 e0       	ldi	r30, 0x01	; 1
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ec 0f       	add	r30, r28
     284:	fd 1f       	adc	r31, r29
     286:	ee 0d       	add	r30, r14
     288:	ff 1d       	adc	r31, r15
     28a:	80 83       	st	Z, r24
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
     28c:	1f 5f       	subi	r17, 0xFF	; 255
     28e:	14 30       	cpi	r17, 0x04	; 4
     290:	90 f3       	brcs	.-28     	; 0x276 <disk_initialize+0xe0>
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	86 ff       	sbrs	r24, 6
     296:	43 c0       	rjmp	.+134    	; 0x31e <disk_initialize+0x188>
     298:	0f 2e       	mov	r0, r31
     29a:	fc e0       	ldi	r31, 0x0C	; 12
     29c:	ff 2e       	mov	r15, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	45 c0       	rjmp	.+138    	; 0x32c <disk_initialize+0x196>
				}
			}
		} else { /* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	ba 01       	movw	r22, r20
     2a8:	89 ee       	ldi	r24, 0xE9	; 233
     2aa:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	40 f4       	brcc	.+16     	; 0x2c2 <disk_initialize+0x12c>
				ty  = CT_SD1;
     2b2:	68 94       	set
     2b4:	ff 24       	eor	r15, r15
     2b6:	f1 f8       	bld	r15, 1
				cmd = ACMD41; /* SDv1 */
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f9 ee       	ldi	r31, 0xE9	; 233
     2bc:	ef 2e       	mov	r14, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	06 c0       	rjmp	.+12     	; 0x2ce <disk_initialize+0x138>
			} else {
				ty  = CT_MMC;
     2c2:	ff 24       	eor	r15, r15
     2c4:	f3 94       	inc	r15
				cmd = CMD1; /* MMCv3 */
     2c6:	0f 2e       	mov	r0, r31
     2c8:	f1 e4       	ldi	r31, 0x41	; 65
     2ca:	ef 2e       	mov	r14, r31
     2cc:	f0 2d       	mov	r31, r0
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
     2ce:	00 e1       	ldi	r16, 0x10	; 16
     2d0:	17 e2       	ldi	r17, 0x27	; 39
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <disk_initialize+0x14e>
     2d4:	8f e8       	ldi	r24, 0x8F	; 143
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <disk_initialize+0x142>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <disk_initialize+0x148>
     2de:	00 00       	nop
     2e0:	01 50       	subi	r16, 0x01	; 1
     2e2:	11 09       	sbc	r17, r1
     2e4:	01 15       	cp	r16, r1
     2e6:	11 05       	cpc	r17, r1
     2e8:	41 f0       	breq	.+16     	; 0x2fa <disk_initialize+0x164>
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	ba 01       	movw	r22, r20
     2f0:	8e 2d       	mov	r24, r14
     2f2:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     2f6:	81 11       	cpse	r24, r1
     2f8:	ed cf       	rjmp	.-38     	; 0x2d4 <disk_initialize+0x13e>
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
     2fa:	01 2b       	or	r16, r17
     2fc:	a1 f0       	breq	.+40     	; 0x326 <disk_initialize+0x190>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	52 e0       	ldi	r21, 0x02	; 2
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e5       	ldi	r24, 0x50	; 80
     308:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     30c:	81 11       	cpse	r24, r1
     30e:	0d c0       	rjmp	.+26     	; 0x32a <disk_initialize+0x194>
     310:	0d c0       	rjmp	.+26     	; 0x32c <disk_initialize+0x196>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     312:	f1 2c       	mov	r15, r1
     314:	0b c0       	rjmp	.+22     	; 0x32c <disk_initialize+0x196>
     316:	f1 2c       	mov	r15, r1
     318:	09 c0       	rjmp	.+18     	; 0x32c <disk_initialize+0x196>
     31a:	f1 2c       	mov	r15, r1
     31c:	07 c0       	rjmp	.+14     	; 0x32c <disk_initialize+0x196>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
     31e:	68 94       	set
     320:	ff 24       	eor	r15, r15
     322:	f2 f8       	bld	r15, 2
     324:	03 c0       	rjmp	.+6      	; 0x32c <disk_initialize+0x196>
				cmd = CMD1; /* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
				ty = 0;
     326:	f1 2c       	mov	r15, r1
     328:	01 c0       	rjmp	.+2      	; 0x32c <disk_initialize+0x196>
     32a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     32c:	f0 92 8a 01 	sts	0x018A, r15	; 0x80018a <CardType>
	DESELECT();
     330:	85 b1       	in	r24, 0x05	; 5
     332:	81 60       	ori	r24, 0x01	; 1
     334:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     336:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	return ty ? 0 : STA_NOINIT;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	f1 10       	cpse	r15, r1
     33e:	80 e0       	ldi	r24, 0x00	; 0
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	08 95       	ret

00000356 <disk_readp>:
DRESULT disk_readp(BYTE *buff,   /* Pointer to the read buffer (NULL:Forward to the stream) */
                   DWORD sector, /* Sector number (LBA) */
                   UINT  offset, /* Byte offset to read from (0..511) */
                   UINT  count   /* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	6c 01       	movw	r12, r24
     36c:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE    rc;
	UINT    bc;

	if (!(CardType & CT_BLOCK))
     36e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <CardType>
     372:	83 fd       	sbrc	r24, 3
     374:	09 c0       	rjmp	.+18     	; 0x388 <disk_readp+0x32>
		sector *= 512; /* Convert to byte address if needed */
     376:	03 2e       	mov	r0, r19
     378:	39 e0       	ldi	r19, 0x09	; 9
     37a:	44 0f       	add	r20, r20
     37c:	55 1f       	adc	r21, r21
     37e:	66 1f       	adc	r22, r22
     380:	77 1f       	adc	r23, r23
     382:	3a 95       	dec	r19
     384:	d1 f7       	brne	.-12     	; 0x37a <disk_readp+0x24>
     386:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) { /* READ_SINGLE_BLOCK */
     388:	81 e5       	ldi	r24, 0x51	; 81
     38a:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     38e:	81 11       	cpse	r24, r1
     390:	31 c0       	rjmp	.+98     	; 0x3f4 <disk_readp+0x9e>

		// bc = 40000;	/* Time counter */
		do { /* Wait for response */
			rc = rcv_spi();
     392:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
		} while (rc == 0xFF);
     396:	8f 3f       	cpi	r24, 0xFF	; 255
     398:	e1 f3       	breq	.-8      	; 0x392 <disk_readp+0x3c>

		if (rc == 0xFE) { /* A data packet arrived */
     39a:	8e 3f       	cpi	r24, 0xFE	; 254
     39c:	69 f5       	brne	.+90     	; 0x3f8 <disk_readp+0xa2>

			bc = 512 + 2 - offset - count; /* Number of trailing bytes to skip */
     39e:	cc 27       	eor	r28, r28
     3a0:	dd 27       	eor	r29, r29
     3a2:	ce 19       	sub	r28, r14
     3a4:	df 09       	sbc	r29, r15
     3a6:	c0 1b       	sub	r28, r16
     3a8:	d1 0b       	sbc	r29, r17
     3aa:	ce 5f       	subi	r28, 0xFE	; 254
     3ac:	dd 4f       	sbci	r29, 0xFD	; 253

			/* Skip leading bytes */
			while (offset--)
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <disk_readp+0x60>
				rcv_spi();
     3b0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
		if (rc == 0xFE) { /* A data packet arrived */

			bc = 512 + 2 - offset - count; /* Number of trailing bytes to skip */

			/* Skip leading bytes */
			while (offset--)
     3b4:	75 01       	movw	r14, r10
     3b6:	57 01       	movw	r10, r14
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	a8 1a       	sub	r10, r24
     3bc:	b1 08       	sbc	r11, r1
     3be:	ef 28       	or	r14, r15
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <disk_readp+0x5a>
				rcv_spi();

			/* Receive a part of the sector */
			if (buff) { /* Store data to the memory */
     3c2:	c1 14       	cp	r12, r1
     3c4:	d1 04       	cpc	r13, r1
     3c6:	69 f0       	breq	.+26     	; 0x3e2 <disk_readp+0x8c>
				do {
					*buff++ = rcv_spi();
     3c8:	76 01       	movw	r14, r12
     3ca:	ef ef       	ldi	r30, 0xFF	; 255
     3cc:	ee 1a       	sub	r14, r30
     3ce:	fe 0a       	sbc	r15, r30
     3d0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     3d4:	f6 01       	movw	r30, r12
     3d6:	80 83       	st	Z, r24
				} while (--count);
     3d8:	01 50       	subi	r16, 0x01	; 1
     3da:	11 09       	sbc	r17, r1
				rcv_spi();

			/* Receive a part of the sector */
			if (buff) { /* Store data to the memory */
				do {
					*buff++ = rcv_spi();
     3dc:	67 01       	movw	r12, r14
				} while (--count);
     3de:	a1 f7       	brne	.-24     	; 0x3c8 <disk_readp+0x72>
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <disk_readp+0x92>
			} else { /* Forward data to the outgoing stream */
				do {
					// FORWARD(rcv_spi());
				} while (--count);
     3e2:	01 50       	subi	r16, 0x01	; 1
     3e4:	11 09       	sbc	r17, r1
     3e6:	e9 f7       	brne	.-6      	; 0x3e2 <disk_readp+0x8c>
			}

			/* Skip trailing bytes and CRC */
			do
				rcv_spi();
     3e8:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
			while (--bc);
     3ec:	21 97       	sbiw	r28, 0x01	; 1
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <disk_readp+0x92>

			res = RES_OK;
     3f0:	c0 e0       	ldi	r28, 0x00	; 0
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <disk_readp+0xa4>
	UINT    bc;

	if (!(CardType & CT_BLOCK))
		sector *= 512; /* Convert to byte address if needed */

	res = RES_ERROR;
     3f4:	c1 e0       	ldi	r28, 0x01	; 1
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <disk_readp+0xa4>
     3f8:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
     3fa:	85 b1       	in	r24, 0x05	; 5
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     400:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	return res;
}
     404:	8c 2f       	mov	r24, r28
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	08 95       	ret

0000041c <disk_writep>:

#if _USE_WRITE
DRESULT disk_writep(const BYTE *buff, /* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
                    DWORD       sc    /* Number of bytes to send, Sector number (LBA) or zero */
)
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	fc 01       	movw	r30, r24
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
     426:	89 2b       	or	r24, r25
     428:	f1 f0       	breq	.+60     	; 0x466 <disk_writep+0x4a>
		bc = sc;
     42a:	ea 01       	movw	r28, r20
		while (bc && wc) { /* Send data bytes to the card */
     42c:	11 c0       	rjmp	.+34     	; 0x450 <disk_writep+0x34>
			xmit_spi(*buff++);
     42e:	8f 01       	movw	r16, r30
     430:	0f 5f       	subi	r16, 0xFF	; 255
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
			wc--;
     43a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     43e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__data_end+0x1>
     448:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
			bc--;
     44c:	21 97       	sbiw	r28, 0x01	; 1
	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
     44e:	f8 01       	movw	r30, r16

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
     450:	20 97       	sbiw	r28, 0x00	; 0
     452:	09 f4       	brne	.+2      	; 0x456 <disk_writep+0x3a>
     454:	5f c0       	rjmp	.+190    	; 0x514 <disk_writep+0xf8>
     456:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     45a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
     45e:	89 2b       	or	r24, r25
     460:	31 f7       	brne	.-52     	; 0x42e <disk_writep+0x12>
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
     462:	c0 e0       	ldi	r28, 0x00	; 0
     464:	5a c0       	rjmp	.+180    	; 0x51a <disk_writep+0xfe>
	} else {
		if (sc) { /* Initiate sector write process */
     466:	41 15       	cp	r20, r1
     468:	51 05       	cpc	r21, r1
     46a:	61 05       	cpc	r22, r1
     46c:	71 05       	cpc	r23, r1
     46e:	01 f1       	breq	.+64     	; 0x4b0 <disk_writep+0x94>
			if (!(CardType & CT_BLOCK))
     470:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <CardType>
     474:	83 fd       	sbrc	r24, 3
     476:	09 c0       	rjmp	.+18     	; 0x48a <disk_writep+0x6e>
				sc *= 512;                  /* Convert to byte address if needed */
     478:	03 2e       	mov	r0, r19
     47a:	39 e0       	ldi	r19, 0x09	; 9
     47c:	44 0f       	add	r20, r20
     47e:	55 1f       	adc	r21, r21
     480:	66 1f       	adc	r22, r22
     482:	77 1f       	adc	r23, r23
     484:	3a 95       	dec	r19
     486:	d1 f7       	brne	.-12     	; 0x47c <disk_writep+0x60>
     488:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sc) == 0) { /* WRITE_SINGLE_BLOCK */
     48a:	88 e5       	ldi	r24, 0x58	; 88
     48c:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     490:	81 11       	cpse	r24, r1
     492:	42 c0       	rjmp	.+132    	; 0x518 <disk_writep+0xfc>
				xmit_spi(0xFF);
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				xmit_spi(0xFE); /* Data block header */
     49a:	8e ef       	ldi	r24, 0xFE	; 254
     49c:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__data_end+0x1>
     4a8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
				res = RES_OK;
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
     4ae:	35 c0       	rjmp	.+106    	; 0x51a <disk_writep+0xfe>
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
     4b0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     4b4:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
     4b8:	02 96       	adiw	r24, 0x02	; 2
			while (bc--) {
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <disk_writep+0xa8>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
				res = RES_OK;
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
			while (bc--) {
     4c2:	ce 01       	movw	r24, r28
     4c4:	ec 01       	movw	r28, r24
     4c6:	21 97       	sbiw	r28, 0x01	; 1
     4c8:	89 2b       	or	r24, r25
     4ca:	c1 f7       	brne	.-16     	; 0x4bc <disk_writep+0xa0>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
			}
			do {
				res = rcv_spi();
     4cc:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     4d0:	c8 2f       	mov	r28, r24
			} while (res == 0xFF);
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	d9 f3       	breq	.-10     	; 0x4cc <disk_writep+0xb0>
			if ((res & 0x1F) == 0x05) { /* Receive data resp and wait for end of write process in timeout of 500ms */
     4d6:	8f 71       	andi	r24, 0x1F	; 31
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	b1 f4       	brne	.+44     	; 0x508 <disk_writep+0xec>
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <disk_writep+0xd4>
     4de:	8f e8       	ldi	r24, 0x8F	; 143
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <disk_writep+0xc6>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <disk_writep+0xcc>
     4e8:	00 00       	nop
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) /* Wait for ready */
     4ea:	01 50       	subi	r16, 0x01	; 1
     4ec:	11 09       	sbc	r17, r1
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <disk_writep+0xd8>
     4f0:	08 e8       	ldi	r16, 0x88	; 136
     4f2:	13 e1       	ldi	r17, 0x13	; 19
     4f4:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     4f8:	8f 3f       	cpi	r24, 0xFF	; 255
     4fa:	19 f0       	breq	.+6      	; 0x502 <disk_writep+0xe6>
     4fc:	01 15       	cp	r16, r1
     4fe:	11 05       	cpc	r17, r1
     500:	71 f7       	brne	.-36     	; 0x4de <disk_writep+0xc2>
					_delay_us(100);
				if (bc)
     502:	01 2b       	or	r16, r17
     504:	09 f0       	breq	.+2      	; 0x508 <disk_writep+0xec>
					res = RES_OK;
     506:	c0 e0       	ldi	r28, 0x00	; 0
			}
			DESELECT();
     508:	85 b1       	in	r24, 0x05	; 5
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	85 b9       	out	0x05, r24	; 5
			rcv_spi();
     50e:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     512:	03 c0       	rjmp	.+6      	; 0x51a <disk_writep+0xfe>
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
     514:	c0 e0       	ldi	r28, 0x00	; 0
     516:	01 c0       	rjmp	.+2      	; 0x51a <disk_writep+0xfe>
{
	DRESULT     res;
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;
     518:	c1 e0       	ldi	r28, 0x01	; 1
			rcv_spi();
		}
	}

	return res;
}
     51a:	8c 2f       	mov	r24, r28
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <fill_buffer>:
}

void fill_buffer(void)
{
	int grootte = 10;
	for(int i = 0; i < grootte; i++)
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	06 c0       	rjmp	.+12     	; 0x538 <fill_buffer+0x12>
	{
		write_buffer[i] = '5';
     52c:	fc 01       	movw	r30, r24
     52e:	e8 56       	subi	r30, 0x68	; 104
     530:	fe 4f       	sbci	r31, 0xFE	; 254
     532:	25 e3       	ldi	r18, 0x35	; 53
     534:	20 83       	st	Z, r18
}

void fill_buffer(void)
{
	int grootte = 10;
	for(int i = 0; i < grootte; i++)
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	8a 30       	cpi	r24, 0x0A	; 10
     53a:	91 05       	cpc	r25, r1
     53c:	bc f3       	brlt	.-18     	; 0x52c <fill_buffer+0x6>
	{
		write_buffer[i] = '5';
	}
}
     53e:	08 95       	ret

00000540 <init_sd_card>:
	int ERROR = 0;

	/* Initialize physical drive */
	do {
		
		status = disk_initialize();
     540:	0e 94 cb 00 	call	0x196	; 0x196 <disk_initialize>
		if (status != 0) {
     544:	81 11       	cpse	r24, r1
     546:	08 c0       	rjmp	.+16     	; 0x558 <init_sd_card+0x18>
			ERROR = 1; 
		} else {
			LED_OFF();
     548:	18 b8       	out	0x08, r1	; 8
			ERROR = 0;			
			/* Set SPI clock faster after initialization */
			SPCR = (1<<MSTR) | (0<<SPR1) | (0<<SPR0) | (1<<SPE);
     54a:	80 e5       	ldi	r24, 0x50	; 80
     54c:	8c bd       	out	0x2c, r24	; 44
			SPSR = (1<<SPI2X); 		
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	8d bd       	out	0x2d, r24	; 45
		status = disk_initialize();
		if (status != 0) {
			ERROR = 1; 
		} else {
			LED_OFF();
			ERROR = 0;			
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <init_sd_card+0x1c>
	/* Initialize physical drive */
	do {
		
		status = disk_initialize();
		if (status != 0) {
			ERROR = 1; 
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
			
			//hieronder de oude code
			//SPI0.CTRLA = (SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESC_DIV4_gc | SPI_ENABLE_bm);
			
		}
	} while (ERROR == 1);
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	81 f3       	breq	.-32     	; 0x540 <init_sd_card>

	/* Mount volume */
	result = pf_mount(&file_system);
     560:	84 ea       	ldi	r24, 0xA4	; 164
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 0b 06 	call	0xc16	; 0xc16 <pf_mount>
	if (result != FR_OK){ // 0
		
	}

	/* Open file */
	result = pf_open("LOG.txt");
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 ac 07 	call	0xf58	; 0xf58 <pf_open>
     570:	08 95       	ret

00000572 <main>:
void init_sd_card(void);
void fill_buffer(void);
	
int main(void)
{	
	LED_OFF();
     572:	18 b8       	out	0x08, r1	; 8
	_PROTECTED_WRITE(CLKPR, ( (1<<CLKPCE) | ((0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (0<<CLKPS0)))); 

	init_sd_card(); // initialize sd-card
     574:	0e 94 a0 02 	call	0x540	; 0x540 <init_sd_card>
	
	fill_buffer(); // fill buffer with 5's
     578:	0e 94 93 02 	call	0x526	; 0x526 <fill_buffer>

	/* Set file pointer to beginning of sector 1 */
	pf_lseek(0);
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	cb 01       	movw	r24, r22
     582:	0e 94 09 0a 	call	0x1412	; 0x1412 <pf_lseek>

	/* Write buffer */
	pf_write(write_buffer, BUFFER_SIZE, &byte_counter);
     586:	4c e8       	ldi	r20, 0x8C	; 140
     588:	51 e0       	ldi	r21, 0x01	; 1
     58a:	6a e0       	ldi	r22, 0x0A	; 10
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	88 e9       	ldi	r24, 0x98	; 152
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 fd 08 	call	0x11fa	; 0x11fa <pf_write>
	
	if (byte_counter < BUFFER_SIZE) {
     596:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <byte_counter>
     59a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <byte_counter+0x1>
     59e:	0a 97       	sbiw	r24, 0x0a	; 10
     5a0:	18 f4       	brcc	.+6      	; 0x5a8 <main+0x36>
		/* End of file */
		ding = true;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ding>
	}

	/* Finalize write */
	pf_write(0, 0, &byte_counter);
     5a8:	4c e8       	ldi	r20, 0x8C	; 140
     5aa:	51 e0       	ldi	r21, 0x01	; 1
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <pf_write>

	/* Reset file pointer to beginning of sector 1 */
	pf_lseek(0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	cb 01       	movw	r24, r22
     5be:	0e 94 09 0a 	call	0x1412	; 0x1412 <pf_lseek>

	/* Read back the same bytes */
	pf_read(read_buffer, BUFFER_SIZE, &byte_counter);
     5c2:	4c e8       	ldi	r20, 0x8C	; 140
     5c4:	51 e0       	ldi	r21, 0x01	; 1
     5c6:	6a e0       	ldi	r22, 0x0A	; 10
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	8e e8       	ldi	r24, 0x8E	; 142
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 1a 08 	call	0x1034	; 0x1034 <pf_read>

	/* Check they're the same */
	while (byte_counter) 
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <main+0x86>
	{
		if (write_buffer[byte_counter] != read_buffer[byte_counter]) {
     5d4:	fc 01       	movw	r30, r24
     5d6:	e8 56       	subi	r30, 0x68	; 104
     5d8:	fe 4f       	sbci	r31, 0xFE	; 254
     5da:	30 81       	ld	r19, Z
     5dc:	fc 01       	movw	r30, r24
     5de:	e2 57       	subi	r30, 0x72	; 114
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	32 17       	cp	r19, r18
     5e6:	19 f0       	breq	.+6      	; 0x5ee <main+0x7c>
			while(1)
			{
				LED_ON(); // Error
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	88 b9       	out	0x08, r24	; 8
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <main+0x76>
			}
		}
		byte_counter--;
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <byte_counter+0x1>
     5f4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <byte_counter>

	/* Read back the same bytes */
	pf_read(read_buffer, BUFFER_SIZE, &byte_counter);

	/* Check they're the same */
	while (byte_counter) 
     5f8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <byte_counter>
     5fc:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <byte_counter+0x1>
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	41 f7       	brne	.-48     	; 0x5d4 <main+0x62>
		byte_counter--;
	}
	/* SUCCESS! */
	while (1) 
	{
		PORTC = (1 << PC0);
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     608:	2f ef       	ldi	r18, 0xFF	; 255
     60a:	8d e3       	ldi	r24, 0x3D	; 61
     60c:	99 e4       	ldi	r25, 0x49	; 73
     60e:	21 50       	subi	r18, 0x01	; 1
     610:	80 40       	sbci	r24, 0x00	; 0
     612:	90 40       	sbci	r25, 0x00	; 0
     614:	e1 f7       	brne	.-8      	; 0x60e <main+0x9c>
     616:	00 c0       	rjmp	.+0      	; 0x618 <main+0xa6>
     618:	00 00       	nop
		_delay_ms(1500);
		PORTC = (0 << PC0);
     61a:	18 b8       	out	0x08, r1	; 8
     61c:	2f ef       	ldi	r18, 0xFF	; 255
     61e:	8d e3       	ldi	r24, 0x3D	; 61
     620:	99 e4       	ldi	r25, 0x49	; 73
     622:	21 50       	subi	r18, 0x01	; 1
     624:	80 40       	sbci	r24, 0x00	; 0
     626:	90 40       	sbci	r25, 0x00	; 0
     628:	e1 f7       	brne	.-8      	; 0x622 <main+0xb0>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <main+0xba>
     62c:	00 00       	nop
     62e:	ea cf       	rjmp	.-44     	; 0x604 <main+0x92>

00000630 <mem_set>:

static FATFS *FatFs; /* Pointer to the file system object (logical drive) */

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
     630:	fc 01       	movw	r30, r24
	char *d = (char *)dst;
	while (cnt--)
     632:	03 c0       	rjmp	.+6      	; 0x63a <mem_set+0xa>
		*d++ = (char)val;
     634:	60 83       	st	Z, r22

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
	char *d = (char *)dst;
	while (cnt--)
     636:	ac 01       	movw	r20, r24
		*d++ = (char)val;
     638:	31 96       	adiw	r30, 0x01	; 1

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
	char *d = (char *)dst;
	while (cnt--)
     63a:	ca 01       	movw	r24, r20
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	45 2b       	or	r20, r21
     640:	c9 f7       	brne	.-14     	; 0x634 <mem_set+0x4>
		*d++ = (char)val;
}
     642:	08 95       	ret

00000644 <mem_cmp>:

/* Compare memory to memory */
static int mem_cmp(const void *dst, const void *src, int cnt)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	dc 01       	movw	r26, r24
     64a:	fb 01       	movw	r30, r22
	const char *d = (const char *)dst, *s = (const char *)src;
	int         r = 0;
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
	while (cnt-- && (r = *d++ - *s++) == 0)
     650:	02 c0       	rjmp	.+4      	; 0x656 <mem_cmp+0x12>
     652:	fb 01       	movw	r30, r22
     654:	de 01       	movw	r26, r28
     656:	9a 01       	movw	r18, r20
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	31 09       	sbc	r19, r1
     65c:	45 2b       	or	r20, r21
     65e:	61 f0       	breq	.+24     	; 0x678 <mem_cmp+0x34>
     660:	ed 01       	movw	r28, r26
     662:	21 96       	adiw	r28, 0x01	; 1
     664:	8c 91       	ld	r24, X
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	bf 01       	movw	r22, r30
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	40 81       	ld	r20, Z
     670:	84 1b       	sub	r24, r20
     672:	91 09       	sbc	r25, r1
     674:	a9 01       	movw	r20, r18
     676:	69 f3       	breq	.-38     	; 0x652 <mem_cmp+0xe>
		;
	return r;
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect(           /* !=0: Sector number, 0: Failed - invalid cluster# */
                        CLUST clst /* Cluster# to be converted */
)
{
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
	FATFS *fs = FatFs;
     682:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <FatFs>
     686:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <FatFs+0x1>

	clst -= 2;
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	22 50       	subi	r18, 0x02	; 2
     690:	31 09       	sbc	r19, r1
     692:	41 09       	sbc	r20, r1
     694:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2))
     696:	86 81       	ldd	r24, Z+6	; 0x06
     698:	97 81       	ldd	r25, Z+7	; 0x07
     69a:	a0 85       	ldd	r26, Z+8	; 0x08
     69c:	b1 85       	ldd	r27, Z+9	; 0x09
     69e:	02 97       	sbiw	r24, 0x02	; 2
     6a0:	a1 09       	sbc	r26, r1
     6a2:	b1 09       	sbc	r27, r1
     6a4:	28 17       	cp	r18, r24
     6a6:	39 07       	cpc	r19, r25
     6a8:	4a 07       	cpc	r20, r26
     6aa:	5b 07       	cpc	r21, r27
     6ac:	68 f4       	brcc	.+26     	; 0x6c8 <clust2sect+0x4a>
		return 0; /* Invalid cluster# */
	return (DWORD)clst * fs->csize + fs->database;
     6ae:	a2 81       	ldd	r26, Z+2	; 0x02
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__muluhisi3>
     6b6:	02 89       	ldd	r16, Z+18	; 0x12
     6b8:	13 89       	ldd	r17, Z+19	; 0x13
     6ba:	24 89       	ldd	r18, Z+20	; 0x14
     6bc:	35 89       	ldd	r19, Z+21	; 0x15
     6be:	60 0f       	add	r22, r16
     6c0:	71 1f       	adc	r23, r17
     6c2:	82 1f       	adc	r24, r18
     6c4:	93 1f       	adc	r25, r19
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <clust2sect+0x50>
{
	FATFS *fs = FatFs;

	clst -= 2;
	if (clst >= (fs->n_fatent - 2))
		return 0; /* Invalid cluster# */
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <get_clust>:

static CLUST get_clust(BYTE *dir /* Pointer to directory entry */
)
{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	fc 01       	movw	r30, r24
	FATFS *fs   = FatFs;
	CLUST  clst = 0;

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir + DIR_FstClusHI);
     6da:	65 89       	ldd	r22, Z+21	; 0x15
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	76 2f       	mov	r23, r22
     6e0:	66 27       	eor	r22, r22
     6e2:	84 89       	ldd	r24, Z+20	; 0x14
     6e4:	68 2b       	or	r22, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	a0 e0       	ldi	r26, 0x00	; 0
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
		clst <<= 16;
     6ec:	bc 01       	movw	r22, r24
     6ee:	55 27       	eor	r21, r21
     6f0:	44 27       	eor	r20, r20
	}
	clst |= LD_WORD(dir + DIR_FstClusLO);
     6f2:	83 8d       	ldd	r24, Z+27	; 0x1b
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	98 2f       	mov	r25, r24
     6f8:	88 27       	eor	r24, r24
     6fa:	22 8d       	ldd	r18, Z+26	; 0x1a
     6fc:	82 2b       	or	r24, r18
     6fe:	a0 e0       	ldi	r26, 0x00	; 0
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	8c 01       	movw	r16, r24
     704:	9d 01       	movw	r18, r26
     706:	04 2b       	or	r16, r20
     708:	15 2b       	or	r17, r21
     70a:	26 2b       	or	r18, r22
     70c:	37 2b       	or	r19, r23
     70e:	c9 01       	movw	r24, r18
     710:	b8 01       	movw	r22, r16

	return clst;
}
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <dir_rewind>:
/* Directory handling - Rewind directory index                           */
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind(DIR *dj /* Pointer to directory object */
)
{
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	fc 01       	movw	r30, r24
	CLUST  clst;
	FATFS *fs = FatFs;
     722:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <FatFs>
     726:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <FatFs+0x1>

	dj->index = 0;
     72a:	11 82       	std	Z+1, r1	; 0x01
     72c:	10 82       	st	Z, r1
	clst      = dj->sclust;
     72e:	64 81       	ldd	r22, Z+4	; 0x04
     730:	75 81       	ldd	r23, Z+5	; 0x05
     732:	86 81       	ldd	r24, Z+6	; 0x06
     734:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent) /* Check start cluster range */
     736:	61 30       	cpi	r22, 0x01	; 1
     738:	71 05       	cpc	r23, r1
     73a:	81 05       	cpc	r24, r1
     73c:	91 05       	cpc	r25, r1
     73e:	19 f1       	breq	.+70     	; 0x786 <dir_rewind+0x6e>
     740:	16 96       	adiw	r26, 0x06	; 6
     742:	0d 91       	ld	r16, X+
     744:	1d 91       	ld	r17, X+
     746:	2d 91       	ld	r18, X+
     748:	3c 91       	ld	r19, X
     74a:	19 97       	sbiw	r26, 0x09	; 9
     74c:	60 17       	cp	r22, r16
     74e:	71 07       	cpc	r23, r17
     750:	82 07       	cpc	r24, r18
     752:	93 07       	cpc	r25, r19
     754:	d0 f4       	brcc	.+52     	; 0x78a <dir_rewind+0x72>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst
     756:	61 15       	cp	r22, r1
     758:	71 05       	cpc	r23, r1
     75a:	81 05       	cpc	r24, r1
     75c:	91 05       	cpc	r25, r1
     75e:	31 f4       	brne	.+12     	; 0x76c <dir_rewind+0x54>
	    && (_FS_32ONLY || fs->fs_type == FS_FAT32)) /* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
     760:	1e 96       	adiw	r26, 0x0e	; 14
     762:	6d 91       	ld	r22, X+
     764:	7d 91       	ld	r23, X+
     766:	8d 91       	ld	r24, X+
     768:	9c 91       	ld	r25, X
     76a:	51 97       	sbiw	r26, 0x11	; 17
     76c:	ef 01       	movw	r28, r30
	dj->clust = clst;                                                  /* Current cluster */
     76e:	60 87       	std	Z+8, r22	; 0x08
     770:	71 87       	std	Z+9, r23	; 0x09
     772:	82 87       	std	Z+10, r24	; 0x0a
     774:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect  = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase; /* Current sector */
     776:	0e 94 3f 03 	call	0x67e	; 0x67e <clust2sect>
     77a:	6c 87       	std	Y+12, r22	; 0x0c
     77c:	7d 87       	std	Y+13, r23	; 0x0d
     77e:	8e 87       	std	Y+14, r24	; 0x0e
     780:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK; /* Seek succeeded */
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	03 c0       	rjmp	.+6      	; 0x78c <dir_rewind+0x74>
	FATFS *fs = FatFs;

	dj->index = 0;
	clst      = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent) /* Check start cluster range */
		return FR_DISK_ERR;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	01 c0       	rjmp	.+2      	; 0x78c <dir_rewind+0x74>
     78a:	81 e0       	ldi	r24, 0x01	; 1
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;                                                  /* Current cluster */
	dj->sect  = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase; /* Current sector */

	return FR_OK; /* Seek succeeded */
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	08 95       	ret

00000796 <create_name>:
/*-----------------------------------------------------------------------*/

static FRESULT create_name(DIR *        dj,  /* Pointer to the directory object */
                           const char **path /* Pointer to pointer to the segment in the path string */
)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	eb 01       	movw	r28, r22
	static const BYTE cvt[] = _EXCVT;
#endif
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
     7a0:	fc 01       	movw	r30, r24
     7a2:	02 81       	ldd	r16, Z+2	; 0x02
     7a4:	13 81       	ldd	r17, Z+3	; 0x03
	mem_set(sfn, ' ', 11);
     7a6:	4b e0       	ldi	r20, 0x0B	; 11
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	60 e2       	ldi	r22, 0x20	; 32
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	c8 01       	movw	r24, r16
     7b0:	0e 94 18 03 	call	0x630	; 0x630 <mem_set>
	si = i = 0;
	ni     = 8;
	p      = *path;
     7b4:	28 81       	ld	r18, Y
     7b6:	39 81       	ldd	r19, Y+1	; 0x01
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0;
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
	ni     = 8;
     7bc:	58 e0       	ldi	r21, 0x08	; 8
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <create_name+0x2c>
     7c0:	84 2f       	mov	r24, r20
	p      = *path;
	for (;;) {
		c = p[si++];
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	48 0f       	add	r20, r24
     7c6:	f9 01       	movw	r30, r18
     7c8:	e8 0f       	add	r30, r24
     7ca:	f1 1d       	adc	r31, r1
     7cc:	e0 81       	ld	r30, Z
		if (c <= ' ' || c == '/')
     7ce:	e1 32       	cpi	r30, 0x21	; 33
     7d0:	f0 f0       	brcs	.+60     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7d2:	ef 32       	cpi	r30, 0x2F	; 47
     7d4:	e1 f0       	breq	.+56     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
			break; /* Break on end of segment */
		if (c == '.' || i >= ni) {
     7d6:	ee 32       	cpi	r30, 0x2E	; 46
     7d8:	11 f0       	breq	.+4      	; 0x7de <create_name+0x48>
     7da:	95 17       	cp	r25, r21
     7dc:	38 f0       	brcs	.+14     	; 0x7ec <create_name+0x56>
			if (ni != 8 || c != '.')
     7de:	58 30       	cpi	r21, 0x08	; 8
     7e0:	b1 f4       	brne	.+44     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7e2:	ee 32       	cpi	r30, 0x2E	; 46
     7e4:	a1 f4       	brne	.+40     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				break;
			i  = 8;
     7e6:	98 e0       	ldi	r25, 0x08	; 8
			ni = 11;
     7e8:	5b e0       	ldi	r21, 0x0B	; 11
     7ea:	ea cf       	rjmp	.-44     	; 0x7c0 <create_name+0x2a>
			continue;
		}
#if _USE_LCC
#ifdef _EXCVT
		if (c >= 0x80) /* To upper extended char (SBCS) */
     7ec:	ee 23       	and	r30, r30
     7ee:	24 f4       	brge	.+8      	; 0x7f8 <create_name+0x62>
			c = cvt[c - 0x80];
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	e8 57       	subi	r30, 0x78	; 120
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	e0 81       	ld	r30, Z
			sfn[i++] = c;
			sfn[i++] = d;
		} else
#endif
		{ /* Single byte code */
			if (_USE_LCC && IsLower(c))
     7f8:	8f e9       	ldi	r24, 0x9F	; 159
     7fa:	8e 0f       	add	r24, r30
     7fc:	8a 31       	cpi	r24, 0x1A	; 26
     7fe:	08 f4       	brcc	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
				c -= 0x20; /* toupper */
     800:	e0 52       	subi	r30, 0x20	; 32
			sfn[i++] = c;
     802:	d8 01       	movw	r26, r16
     804:	a9 0f       	add	r26, r25
     806:	b1 1d       	adc	r27, r1
     808:	ec 93       	st	X, r30
     80a:	9f 5f       	subi	r25, 0xFF	; 255
     80c:	d9 cf       	rjmp	.-78     	; 0x7c0 <create_name+0x2a>
		}
	}
	*path = &p[si]; /* Rerurn pointer to the next segment */
     80e:	24 0f       	add	r18, r20
     810:	31 1d       	adc	r19, r1
     812:	39 83       	std	Y+1, r19	; 0x01
     814:	28 83       	st	Y, r18

	sfn[11] = (c <= ' ') ? 1 : 0; /* Set last segment flag if end of path */
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	e1 32       	cpi	r30, 0x21	; 33
     81a:	08 f0       	brcs	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	f8 01       	movw	r30, r16
     820:	83 87       	std	Z+11, r24	; 0x0b

	return FR_OK;
}
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <check_fs>:

static BYTE check_fs(/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
                     BYTE *buf, /* Working buffer */
                     DWORD sect /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	ec 01       	movw	r28, r24
     840:	6a 01       	movw	r12, r20
     842:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2)) /* Read the boot record */
     844:	02 e0       	ldi	r16, 0x02	; 2
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	2e ef       	ldi	r18, 0xFE	; 254
     84a:	31 e0       	ldi	r19, 0x01	; 1
     84c:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     850:	81 11       	cpse	r24, r1
     852:	1d c0       	rjmp	.+58     	; 0x88e <check_fs+0x60>
		return 3;
	if (LD_WORD(buf) != 0xAA55) /* Check record signature */
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	98 2f       	mov	r25, r24
     85a:	88 27       	eor	r24, r24
     85c:	28 81       	ld	r18, Y
     85e:	82 2b       	or	r24, r18
     860:	85 35       	cpi	r24, 0x55	; 85
     862:	9a 4a       	sbci	r25, 0xAA	; 170
     864:	b1 f4       	brne	.+44     	; 0x892 <check_fs+0x64>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
     866:	22 e5       	ldi	r18, 0x52	; 82
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	b7 01       	movw	r22, r14
     86c:	a6 01       	movw	r20, r12
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     874:	81 11       	cpse	r24, r1
     876:	0f c0       	rjmp	.+30     	; 0x896 <check_fs+0x68>
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	98 2f       	mov	r25, r24
     87e:	88 27       	eor	r24, r24
     880:	28 81       	ld	r18, Y
     882:	82 2b       	or	r24, r18
     884:	86 34       	cpi	r24, 0x46	; 70
     886:	91 44       	sbci	r25, 0x41	; 65
     888:	41 f0       	breq	.+16     	; 0x89a <check_fs+0x6c>
		return 0;
	return 1;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	07 c0       	rjmp	.+14     	; 0x89c <check_fs+0x6e>
                     BYTE *buf, /* Working buffer */
                     DWORD sect /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2)) /* Read the boot record */
		return 3;
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	05 c0       	rjmp	.+10     	; 0x89c <check_fs+0x6e>
	if (LD_WORD(buf) != 0xAA55) /* Check record signature */
		return 2;
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	03 c0       	rjmp	.+6      	; 0x89c <check_fs+0x6e>

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
		return 0;
	return 1;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	01 c0       	rjmp	.+2      	; 0x89c <check_fs+0x6e>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
		return 0;
     89a:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	08 95       	ret

000008ae <get_fat>:
/*-----------------------------------------------------------------------*/

static CLUST get_fat(           /* 1:IO error, Else:Cluster status */
                     CLUST clst /* Cluster# to get the link information */
)
{
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <get_fat+0x12>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <get_fat+0x14>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	BYTE   buf[4];
	FATFS *fs = FatFs;
     8c6:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <FatFs>
     8ca:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <FatFs+0x1>

	if (clst < 2 || clst >= fs->n_fatent) /* Range check */
     8ce:	62 30       	cpi	r22, 0x02	; 2
     8d0:	71 05       	cpc	r23, r1
     8d2:	81 05       	cpc	r24, r1
     8d4:	91 05       	cpc	r25, r1
     8d6:	08 f4       	brcc	.+2      	; 0x8da <get_fat+0x2c>
     8d8:	56 c0       	rjmp	.+172    	; 0x986 <__stack+0x87>
     8da:	06 81       	ldd	r16, Z+6	; 0x06
     8dc:	17 81       	ldd	r17, Z+7	; 0x07
     8de:	20 85       	ldd	r18, Z+8	; 0x08
     8e0:	31 85       	ldd	r19, Z+9	; 0x09
     8e2:	60 17       	cp	r22, r16
     8e4:	71 07       	cpc	r23, r17
     8e6:	82 07       	cpc	r24, r18
     8e8:	93 07       	cpc	r25, r19
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <get_fat+0x40>
     8ec:	51 c0       	rjmp	.+162    	; 0x990 <__stack+0x91>
		return 1;

	switch (fs->fs_type) {
     8ee:	20 81       	ld	r18, Z
     8f0:	23 30       	cpi	r18, 0x03	; 3
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <get_fat+0x48>
     8f4:	52 c0       	rjmp	.+164    	; 0x99a <__stack+0x9b>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
			break;
		return LD_WORD(buf);
#endif
#if _FS_FAT32
	case FS_FAT32:
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4))
     8fa:	9c 01       	movw	r18, r24
     8fc:	2f 77       	andi	r18, 0x7F	; 127
     8fe:	33 27       	eor	r19, r19
     900:	c2 84       	ldd	r12, Z+10	; 0x0a
     902:	d3 84       	ldd	r13, Z+11	; 0x0b
     904:	e4 84       	ldd	r14, Z+12	; 0x0c
     906:	f5 84       	ldd	r15, Z+13	; 0x0d
     908:	68 94       	set
     90a:	16 f8       	bld	r1, 6
     90c:	b6 95       	lsr	r27
     90e:	a7 95       	ror	r26
     910:	97 95       	ror	r25
     912:	87 95       	ror	r24
     914:	16 94       	lsr	r1
     916:	d1 f7       	brne	.-12     	; 0x90c <__stack+0xd>
     918:	22 0f       	add	r18, r18
     91a:	33 1f       	adc	r19, r19
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	b7 01       	movw	r22, r14
     922:	a6 01       	movw	r20, r12
     924:	48 0f       	add	r20, r24
     926:	59 1f       	adc	r21, r25
     928:	6a 1f       	adc	r22, r26
     92a:	7b 1f       	adc	r23, r27
     92c:	04 e0       	ldi	r16, 0x04	; 4
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     938:	81 11       	cpse	r24, r1
     93a:	34 c0       	rjmp	.+104    	; 0x9a4 <__stack+0xa5>
			break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
     93c:	8c 81       	ldd	r24, Y+4	; 0x04
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	78 2f       	mov	r23, r24
     946:	66 27       	eor	r22, r22
     948:	55 27       	eor	r21, r21
     94a:	44 27       	eor	r20, r20
     94c:	9b 81       	ldd	r25, Y+3	; 0x03
     94e:	89 2f       	mov	r24, r25
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a0 e0       	ldi	r26, 0x00	; 0
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	dc 01       	movw	r26, r24
     958:	99 27       	eor	r25, r25
     95a:	88 27       	eor	r24, r24
     95c:	84 2b       	or	r24, r20
     95e:	95 2b       	or	r25, r21
     960:	a6 2b       	or	r26, r22
     962:	b7 2b       	or	r27, r23
     964:	6a 81       	ldd	r22, Y+2	; 0x02
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	76 2f       	mov	r23, r22
     96a:	66 27       	eor	r22, r22
     96c:	ab 01       	movw	r20, r22
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	84 2b       	or	r24, r20
     974:	95 2b       	or	r25, r21
     976:	a6 2b       	or	r26, r22
     978:	b7 2b       	or	r27, r23
     97a:	29 81       	ldd	r18, Y+1	; 0x01
     97c:	82 2b       	or	r24, r18
     97e:	bc 01       	movw	r22, r24
     980:	cd 01       	movw	r24, r26
     982:	9f 70       	andi	r25, 0x0F	; 15
     984:	13 c0       	rjmp	.+38     	; 0x9ac <__stack+0xad>
{
	BYTE   buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent) /* Range check */
		return 1;
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e c0       	rjmp	.+28     	; 0x9ac <__stack+0xad>
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	09 c0       	rjmp	.+18     	; 0x9ac <__stack+0xad>
			break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1; /* An error occured at the disk I/O layer */
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__stack+0xad>
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
}
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	08 95       	ret

000009c6 <dir_next>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_next(        /* FR_OK:Succeeded, FR_NO_FILE:End of table */
                        DIR *dj /* Pointer to directory object */
)
{
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
	CLUST  clst;
	WORD   i;
	FATFS *fs = FatFs;
     9d6:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <FatFs>
     9da:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <FatFs+0x1>

	i = dj->index + 1;
     9de:	fc 01       	movw	r30, r24
     9e0:	c0 81       	ld	r28, Z
     9e2:	d1 81       	ldd	r29, Z+1	; 0x01
     9e4:	21 96       	adiw	r28, 0x01	; 1
	if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
     9e6:	09 f4       	brne	.+2      	; 0x9ea <dir_next+0x24>
     9e8:	5c c0       	rjmp	.+184    	; 0xaa2 <dir_next+0xdc>
     9ea:	44 85       	ldd	r20, Z+12	; 0x0c
     9ec:	55 85       	ldd	r21, Z+13	; 0x0d
     9ee:	66 85       	ldd	r22, Z+14	; 0x0e
     9f0:	77 85       	ldd	r23, Z+15	; 0x0f
     9f2:	41 15       	cp	r20, r1
     9f4:	51 05       	cpc	r21, r1
     9f6:	61 05       	cpc	r22, r1
     9f8:	71 05       	cpc	r23, r1
     9fa:	09 f4       	brne	.+2      	; 0x9fe <dir_next+0x38>
     9fc:	54 c0       	rjmp	.+168    	; 0xaa6 <dir_next+0xe0>
     9fe:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % 16)) { /* Sector changed? */
     a00:	ce 01       	movw	r24, r28
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	99 27       	eor	r25, r25
     a06:	89 2b       	or	r24, r25
     a08:	09 f0       	breq	.+2      	; 0xa0c <dir_next+0x46>
     a0a:	46 c0       	rjmp	.+140    	; 0xa98 <dir_next+0xd2>
		dj->sect++;  /* Next sector */
     a0c:	4f 5f       	subi	r20, 0xFF	; 255
     a0e:	5f 4f       	sbci	r21, 0xFF	; 255
     a10:	6f 4f       	sbci	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	44 87       	std	Z+12, r20	; 0x0c
     a16:	55 87       	std	Z+13, r21	; 0x0d
     a18:	66 87       	std	Z+14, r22	; 0x0e
     a1a:	77 87       	std	Z+15, r23	; 0x0f

		if (dj->clust == 0) {       /* Static table */
     a1c:	40 85       	ldd	r20, Z+8	; 0x08
     a1e:	51 85       	ldd	r21, Z+9	; 0x09
     a20:	62 85       	ldd	r22, Z+10	; 0x0a
     a22:	73 85       	ldd	r23, Z+11	; 0x0b
     a24:	41 15       	cp	r20, r1
     a26:	51 05       	cpc	r21, r1
     a28:	61 05       	cpc	r22, r1
     a2a:	71 05       	cpc	r23, r1
     a2c:	39 f4       	brne	.+14     	; 0xa3c <dir_next+0x76>
			if (i >= fs->n_rootdir) /* Report EOT when end of table */
     a2e:	f7 01       	movw	r30, r14
     a30:	84 81       	ldd	r24, Z+4	; 0x04
     a32:	95 81       	ldd	r25, Z+5	; 0x05
     a34:	c8 17       	cp	r28, r24
     a36:	d9 07       	cpc	r29, r25
     a38:	c0 f5       	brcc	.+112    	; 0xaaa <dir_next+0xe4>
     a3a:	2e c0       	rjmp	.+92     	; 0xa98 <dir_next+0xd2>
				return FR_NO_FILE;
		} else {                                     /* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) { /* Cluster changed? */
     a3c:	f7 01       	movw	r30, r14
     a3e:	82 81       	ldd	r24, Z+2	; 0x02
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	9e 01       	movw	r18, r28
     a46:	32 95       	swap	r19
     a48:	22 95       	swap	r18
     a4a:	2f 70       	andi	r18, 0x0F	; 15
     a4c:	23 27       	eor	r18, r19
     a4e:	3f 70       	andi	r19, 0x0F	; 15
     a50:	23 27       	eor	r18, r19
     a52:	82 23       	and	r24, r18
     a54:	93 23       	and	r25, r19
     a56:	89 2b       	or	r24, r25
     a58:	f9 f4       	brne	.+62     	; 0xa98 <dir_next+0xd2>
				clst = get_fat(dj->clust);           /* Get next cluster */
     a5a:	cb 01       	movw	r24, r22
     a5c:	ba 01       	movw	r22, r20
     a5e:	0e 94 57 04 	call	0x8ae	; 0x8ae <get_fat>
				if (clst <= 1)
     a62:	62 30       	cpi	r22, 0x02	; 2
     a64:	71 05       	cpc	r23, r1
     a66:	81 05       	cpc	r24, r1
     a68:	91 05       	cpc	r25, r1
     a6a:	08 f1       	brcs	.+66     	; 0xaae <dir_next+0xe8>
					return FR_DISK_ERR;
				if (clst >= fs->n_fatent) /* When it reached end of dynamic table */
     a6c:	f7 01       	movw	r30, r14
     a6e:	c6 80       	ldd	r12, Z+6	; 0x06
     a70:	d7 80       	ldd	r13, Z+7	; 0x07
     a72:	e0 84       	ldd	r14, Z+8	; 0x08
     a74:	f1 84       	ldd	r15, Z+9	; 0x09
     a76:	6c 15       	cp	r22, r12
     a78:	7d 05       	cpc	r23, r13
     a7a:	8e 05       	cpc	r24, r14
     a7c:	9f 05       	cpc	r25, r15
     a7e:	c8 f4       	brcc	.+50     	; 0xab2 <dir_next+0xec>
					return FR_NO_FILE;    /* Report EOT */
				dj->clust = clst;         /* Initialize data for new cluster */
     a80:	f8 01       	movw	r30, r16
     a82:	60 87       	std	Z+8, r22	; 0x08
     a84:	71 87       	std	Z+9, r23	; 0x09
     a86:	82 87       	std	Z+10, r24	; 0x0a
     a88:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect  = clust2sect(clst);
     a8a:	0e 94 3f 03 	call	0x67e	; 0x67e <clust2sect>
     a8e:	f8 01       	movw	r30, r16
     a90:	64 87       	std	Z+12, r22	; 0x0c
     a92:	75 87       	std	Z+13, r23	; 0x0d
     a94:	86 87       	std	Z+14, r24	; 0x0e
     a96:	97 87       	std	Z+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     a98:	f8 01       	movw	r30, r16
     a9a:	d1 83       	std	Z+1, r29	; 0x01
     a9c:	c0 83       	st	Z, r28

	return FR_OK;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	09 c0       	rjmp	.+18     	; 0xab4 <dir_next+0xee>
	WORD   i;
	FATFS *fs = FatFs;

	i = dj->index + 1;
	if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     aa2:	83 e0       	ldi	r24, 0x03	; 3
     aa4:	07 c0       	rjmp	.+14     	; 0xab4 <dir_next+0xee>
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <dir_next+0xee>
	if (!(i % 16)) { /* Sector changed? */
		dj->sect++;  /* Next sector */

		if (dj->clust == 0) {       /* Static table */
			if (i >= fs->n_rootdir) /* Report EOT when end of table */
				return FR_NO_FILE;
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <dir_next+0xee>
		} else {                                     /* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) { /* Cluster changed? */
				clst = get_fat(dj->clust);           /* Get next cluster */
				if (clst <= 1)
					return FR_DISK_ERR;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <dir_next+0xee>
				if (clst >= fs->n_fatent) /* When it reached end of dynamic table */
					return FR_NO_FILE;    /* Report EOT */
     ab2:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <dir_find>:
/*-----------------------------------------------------------------------*/

	static FRESULT dir_find(DIR * dj, /* Pointer to the directory object linked to the file name */
							BYTE *dir /* 32-byte working buffer */
	)
	{
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
     ad6:	6b 01       	movw	r12, r22
		FRESULT res;
		BYTE    c;

		res = dir_rewind(dj); /* Rewind directory object */
     ad8:	0e 94 8c 03 	call	0x718	; 0x718 <dir_rewind>
		if (res != FR_OK)
     adc:	81 11       	cpse	r24, r1
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <dir_find+0x88>
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     ae0:	28 81       	ld	r18, Y
     ae2:	39 81       	ldd	r19, Y+1	; 0x01
     ae4:	2f 70       	andi	r18, 0x0F	; 15
     ae6:	33 27       	eor	r19, r19
     ae8:	22 0f       	add	r18, r18
     aea:	33 1f       	adc	r19, r19
     aec:	22 95       	swap	r18
     aee:	32 95       	swap	r19
     af0:	30 7f       	andi	r19, 0xF0	; 240
     af2:	32 27       	eor	r19, r18
     af4:	20 7f       	andi	r18, 0xF0	; 240
     af6:	32 27       	eor	r19, r18
     af8:	4c 85       	ldd	r20, Y+12	; 0x0c
     afa:	5d 85       	ldd	r21, Y+13	; 0x0d
     afc:	6e 85       	ldd	r22, Y+14	; 0x0e
     afe:	7f 85       	ldd	r23, Y+15	; 0x0f
     b00:	00 e2       	ldi	r16, 0x20	; 32
     b02:	10 e0       	ldi	r17, 0x00	; 0
     b04:	c6 01       	movw	r24, r12
     b06:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
					  ? FR_DISK_ERR
					  : FR_OK;
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	81 11       	cpse	r24, r1
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <dir_find+0x4c>
     b10:	90 e0       	ldi	r25, 0x00	; 0
		res = dir_rewind(dj); /* Rewind directory object */
		if (res != FR_OK)
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     b12:	f9 2e       	mov	r15, r25
					  ? FR_DISK_ERR
					  : FR_OK;
			if (res != FR_OK)
     b14:	91 11       	cpse	r25, r1
     b16:	16 c0       	rjmp	.+44     	; 0xb44 <dir_find+0x7e>
				break;
			c = dir[DIR_Name]; /* First character */
     b18:	f6 01       	movw	r30, r12
     b1a:	80 81       	ld	r24, Z
			if (c == 0) { ///// hieerrr fout misschien
     b1c:	88 23       	and	r24, r24
     b1e:	a1 f0       	breq	.+40     	; 0xb48 <dir_find+0x82>
				res = FR_NO_FILE;
				break;
			}                                                           /* Reached to end of table */
			if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     b20:	83 85       	ldd	r24, Z+11	; 0x0b
     b22:	83 fd       	sbrc	r24, 3
     b24:	09 c0       	rjmp	.+18     	; 0xb38 <dir_find+0x72>
     b26:	6a 81       	ldd	r22, Y+2	; 0x02
     b28:	7b 81       	ldd	r23, Y+3	; 0x03
     b2a:	4b e0       	ldi	r20, 0x0B	; 11
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	c6 01       	movw	r24, r12
     b30:	0e 94 22 03 	call	0x644	; 0x644 <mem_cmp>
     b34:	89 2b       	or	r24, r25
     b36:	51 f0       	breq	.+20     	; 0xb4c <dir_find+0x86>
				break;
			res = dir_next(dj); /* Next entry */
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dir_next>
		} while (res == FR_OK);
     b3e:	88 23       	and	r24, r24
     b40:	79 f2       	breq	.-98     	; 0xae0 <dir_find+0x1a>
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <dir_find+0x88>
		res = dir_rewind(dj); /* Rewind directory object */
		if (res != FR_OK)
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     b44:	89 2f       	mov	r24, r25
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <dir_find+0x88>
					  : FR_OK;
			if (res != FR_OK)
				break;
			c = dir[DIR_Name]; /* First character */
			if (c == 0) { ///// hieerrr fout misschien
				res = FR_NO_FILE;
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <dir_find+0x88>
		res = dir_rewind(dj); /* Rewind directory object */
		if (res != FR_OK)
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     b4c:	8f 2d       	mov	r24, r15
				break;
			res = dir_next(dj); /* Next entry */
		} while (res == FR_OK);

		return res;
	}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	08 95       	ret

00000b5e <follow_path>:
static FRESULT follow_path(                 /* FR_OK(0): successful, !=0: error code */
                           DIR *       dj,  /* Directory object to return last directory and found object */
                           BYTE *      dir, /* 32-byte working buffer */
                           const char *path /* Full-path string to find a file or directory */
)
{
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <follow_path+0xe>
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	8c 01       	movw	r16, r24
     b72:	7b 01       	movw	r14, r22
     b74:	5a 83       	std	Y+2, r21	; 0x02
     b76:	49 83       	std	Y+1, r20	; 0x01
	FRESULT res;

	while (*path == ' ')
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <follow_path+0x22>
		path++; /* Strip leading spaces */
     b7a:	31 96       	adiw	r30, 0x01	; 1
     b7c:	fa 83       	std	Y+2, r31	; 0x02
     b7e:	e9 83       	std	Y+1, r30	; 0x01
                           const char *path /* Full-path string to find a file or directory */
)
{
	FRESULT res;

	while (*path == ' ')
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	80 81       	ld	r24, Z
     b86:	80 32       	cpi	r24, 0x20	; 32
     b88:	c1 f3       	breq	.-16     	; 0xb7a <follow_path+0x1c>
		path++; /* Strip leading spaces */
	if (*path == '/')
     b8a:	8f 32       	cpi	r24, 0x2F	; 47
     b8c:	19 f4       	brne	.+6      	; 0xb94 <follow_path+0x36>
		path++;     /* Strip heading separator if exist */
     b8e:	31 96       	adiw	r30, 0x01	; 1
     b90:	fa 83       	std	Y+2, r31	; 0x02
     b92:	e9 83       	std	Y+1, r30	; 0x01
	dj->sclust = 0; /* Set start directory (always root dir) */
     b94:	d8 01       	movw	r26, r16
     b96:	14 96       	adiw	r26, 0x04	; 4
     b98:	1d 92       	st	X+, r1
     b9a:	1d 92       	st	X+, r1
     b9c:	1d 92       	st	X+, r1
     b9e:	1c 92       	st	X, r1
     ba0:	17 97       	sbiw	r26, 0x07	; 7

	if ((BYTE)*path < ' ') { /* Null path means the root directory */
     ba2:	e9 81       	ldd	r30, Y+1	; 0x01
     ba4:	fa 81       	ldd	r31, Y+2	; 0x02
     ba6:	80 81       	ld	r24, Z
     ba8:	80 32       	cpi	r24, 0x20	; 32
     baa:	30 f4       	brcc	.+12     	; 0xbb8 <follow_path+0x5a>
		res    = dir_rewind(dj);
     bac:	c8 01       	movw	r24, r16
     bae:	0e 94 8c 03 	call	0x718	; 0x718 <dir_rewind>
		dir[0] = 0;
     bb2:	f7 01       	movw	r30, r14
     bb4:	10 82       	st	Z, r1
     bb6:	26 c0       	rjmp	.+76     	; 0xc04 <follow_path+0xa6>

	} else { /* Follow path */
		for (;;) {
			res = create_name(dj, &path); /* Get a segment */
     bb8:	be 01       	movw	r22, r28
     bba:	6f 5f       	subi	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 cb 03 	call	0x796	; 0x796 <create_name>
			if (res != FR_OK)
     bc4:	81 11       	cpse	r24, r1
     bc6:	1e c0       	rjmp	.+60     	; 0xc04 <follow_path+0xa6>
				break;
			res = dir_find(dj, dir); /* Find it */ // het gaat denk ik hier fout
     bc8:	b7 01       	movw	r22, r14
     bca:	c8 01       	movw	r24, r16
     bcc:	0e 94 63 05 	call	0xac6	; 0xac6 <dir_find>
			if (res != FR_OK)
     bd0:	81 11       	cpse	r24, r1
     bd2:	18 c0       	rjmp	.+48     	; 0xc04 <follow_path+0xa6>
				break; /* Could not find the object */
			if (dj->fn[11])
     bd4:	d8 01       	movw	r26, r16
     bd6:	12 96       	adiw	r26, 0x02	; 2
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	13 97       	sbiw	r26, 0x03	; 3
     bde:	93 85       	ldd	r25, Z+11	; 0x0b
     be0:	91 11       	cpse	r25, r1
     be2:	10 c0       	rjmp	.+32     	; 0xc04 <follow_path+0xa6>
				break;                       /* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
     be4:	f7 01       	movw	r30, r14
     be6:	83 85       	ldd	r24, Z+11	; 0x0b
     be8:	84 ff       	sbrs	r24, 4
     bea:	0b c0       	rjmp	.+22     	; 0xc02 <follow_path+0xa4>
				res = FR_NO_FILE;
				break;
			}
			dj->sclust = get_clust(dir); /* Follow next */
     bec:	c7 01       	movw	r24, r14
     bee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <get_clust>
     bf2:	d8 01       	movw	r26, r16
     bf4:	14 96       	adiw	r26, 0x04	; 4
     bf6:	6d 93       	st	X+, r22
     bf8:	7d 93       	st	X+, r23
     bfa:	8d 93       	st	X+, r24
     bfc:	9c 93       	st	X, r25
     bfe:	17 97       	sbiw	r26, 0x07	; 7
		}
     c00:	db cf       	rjmp	.-74     	; 0xbb8 <follow_path+0x5a>
			if (res != FR_OK)
				break; /* Could not find the object */
			if (dj->fn[11])
				break;                       /* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE;
     c02:	83 e0       	ldi	r24, 0x03	; 3
			dj->sclust = get_clust(dir); /* Follow next */
		}
	}

	return res;
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	08 95       	ret

00000c16 <pf_mount>:
/*-----------------------------------------------------------------------*/
/* Mount/Unmount a Locical Drive                                         */
/*-----------------------------------------------------------------------*/

FRESULT pf_mount(FATFS *fs /* Pointer to new file system object */)
{
     c16:	4f 92       	push	r4
     c18:	5f 92       	push	r5
     c1a:	6f 92       	push	r6
     c1c:	7f 92       	push	r7
     c1e:	8f 92       	push	r8
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	a8 97       	sbiw	r28, 0x28	; 40
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	7c 01       	movw	r14, r24
	BYTE  fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;

	FatFs = 0;
     c46:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <FatFs+0x1>
     c4a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <FatFs>

	if (disk_initialize() & STA_NOINIT)
     c4e:	0e 94 cb 00 	call	0x196	; 0x196 <disk_initialize>
     c52:	80 fd       	sbrc	r24, 0
     c54:	62 c1       	rjmp	.+708    	; 0xf1a <pf_mount+0x304>
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt   = check_fs(buf, bsect); /* Check sector 0 as an SFD format */
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	ba 01       	movw	r22, r20
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	0e 94 17 04 	call	0x82e	; 0x82e <check_fs>
     c64:	d8 2e       	mov	r13, r24
	if (fmt == 1) {               /* Not an FAT boot record, it may be FDISK format */
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	82 13       	cpse	r24, r18
     c6a:	38 c0       	rjmp	.+112    	; 0xcdc <pf_mount+0xc6>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) { /* 1st partition entry */
     c6c:	00 e1       	ldi	r16, 0x10	; 16
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	2e eb       	ldi	r18, 0xBE	; 190
     c72:	31 e0       	ldi	r19, 0x01	; 1
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	ba 01       	movw	r22, r20
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     c82:	81 11       	cpse	r24, r1
     c84:	2f c0       	rjmp	.+94     	; 0xce4 <pf_mount+0xce>
			fmt = 3;
		} else {
			if (buf[4]) {                     /* Is the partition existing? */
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	88 23       	and	r24, r24
     c8a:	a1 f1       	breq	.+104    	; 0xcf4 <pf_mount+0xde>
				bsect = LD_DWORD(&buf[8]);    /* Partition offset in LBA */
     c8c:	8c 84       	ldd	r8, Y+12	; 0x0c
     c8e:	91 2c       	mov	r9, r1
     c90:	a1 2c       	mov	r10, r1
     c92:	b1 2c       	mov	r11, r1
     c94:	b8 2c       	mov	r11, r8
     c96:	aa 24       	eor	r10, r10
     c98:	99 24       	eor	r9, r9
     c9a:	88 24       	eor	r8, r8
     c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c9e:	89 2f       	mov	r24, r25
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	dc 01       	movw	r26, r24
     ca8:	99 27       	eor	r25, r25
     caa:	88 27       	eor	r24, r24
     cac:	88 29       	or	r24, r8
     cae:	99 29       	or	r25, r9
     cb0:	aa 29       	or	r26, r10
     cb2:	bb 29       	or	r27, r11
     cb4:	8a 84       	ldd	r8, Y+10	; 0x0a
     cb6:	91 2c       	mov	r9, r1
     cb8:	98 2c       	mov	r9, r8
     cba:	88 24       	eor	r8, r8
     cbc:	a1 2c       	mov	r10, r1
     cbe:	b1 2c       	mov	r11, r1
     cc0:	88 2a       	or	r8, r24
     cc2:	99 2a       	or	r9, r25
     cc4:	aa 2a       	or	r10, r26
     cc6:	bb 2a       	or	r11, r27
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	88 2a       	or	r8, r24
				fmt   = check_fs(buf, bsect); /* Check the partition */
     ccc:	b5 01       	movw	r22, r10
     cce:	a4 01       	movw	r20, r8
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 17 04 	call	0x82e	; 0x82e <check_fs>
     cd8:	d8 2e       	mov	r13, r24
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <pf_mount+0xe4>
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
     cdc:	81 2c       	mov	r8, r1
     cde:	91 2c       	mov	r9, r1
     ce0:	54 01       	movw	r10, r8
     ce2:	0b c0       	rjmp	.+22     	; 0xcfa <pf_mount+0xe4>
     ce4:	81 2c       	mov	r8, r1
     ce6:	91 2c       	mov	r9, r1
     ce8:	54 01       	movw	r10, r8
	fmt   = check_fs(buf, bsect); /* Check sector 0 as an SFD format */
	if (fmt == 1) {               /* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) { /* 1st partition entry */
			fmt = 3;
     cea:	0f 2e       	mov	r0, r31
     cec:	f3 e0       	ldi	r31, 0x03	; 3
     cee:	df 2e       	mov	r13, r31
     cf0:	f0 2d       	mov	r31, r0
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <pf_mount+0xe4>
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
     cf4:	81 2c       	mov	r8, r1
     cf6:	91 2c       	mov	r9, r1
     cf8:	54 01       	movw	r10, r8
				bsect = LD_DWORD(&buf[8]);    /* Partition offset in LBA */
				fmt   = check_fs(buf, bsect); /* Check the partition */
			}
		}
	}
	if (fmt == 3)
     cfa:	43 e0       	ldi	r20, 0x03	; 3
     cfc:	d4 16       	cp	r13, r20
     cfe:	09 f4       	brne	.+2      	; 0xd02 <pf_mount+0xec>
     d00:	0e c1       	rjmp	.+540    	; 0xf1e <pf_mount+0x308>
		return FR_DISK_ERR;
	if (fmt)
     d02:	d1 10       	cpse	r13, r1
     d04:	0e c1       	rjmp	.+540    	; 0xf22 <pf_mount+0x30c>
		return FR_NO_FILESYSTEM; /* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf)))
     d06:	04 e2       	ldi	r16, 0x24	; 36
     d08:	10 e0       	ldi	r17, 0x00	; 0
     d0a:	2d e0       	ldi	r18, 0x0D	; 13
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	b5 01       	movw	r22, r10
     d10:	a4 01       	movw	r20, r8
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     d1a:	81 11       	cpse	r24, r1
     d1c:	04 c1       	rjmp	.+520    	; 0xf26 <pf_mount+0x310>
		return FR_DISK_ERR;

	fsize = LD_WORD(buf + BPB_FATSz16 - 13); /* Number of sectors per FAT */
     d1e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	32 2f       	mov	r19, r18
     d24:	22 27       	eor	r18, r18
     d26:	8a 85       	ldd	r24, Y+10	; 0x0a
     d28:	28 2b       	or	r18, r24
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize)
     d2e:	21 15       	cp	r18, r1
     d30:	31 05       	cpc	r19, r1
     d32:	41 05       	cpc	r20, r1
     d34:	51 05       	cpc	r21, r1
     d36:	21 f5       	brne	.+72     	; 0xd80 <pf_mount+0x16a>
		fsize = LD_DWORD(buf + BPB_FATSz32 - 13);
     d38:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d3a:	82 2f       	mov	r24, r18
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	78 2f       	mov	r23, r24
     d44:	66 27       	eor	r22, r22
     d46:	55 27       	eor	r21, r21
     d48:	44 27       	eor	r20, r20
     d4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d4c:	89 2f       	mov	r24, r25
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	a0 e0       	ldi	r26, 0x00	; 0
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	dc 01       	movw	r26, r24
     d56:	99 27       	eor	r25, r25
     d58:	88 27       	eor	r24, r24
     d5a:	84 2b       	or	r24, r20
     d5c:	95 2b       	or	r25, r21
     d5e:	a6 2b       	or	r26, r22
     d60:	b7 2b       	or	r27, r23
     d62:	29 8d       	ldd	r18, Y+25	; 0x19
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	32 2f       	mov	r19, r18
     d68:	22 27       	eor	r18, r18
     d6a:	a9 01       	movw	r20, r18
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	48 2b       	or	r20, r24
     d72:	59 2b       	or	r21, r25
     d74:	6a 2b       	or	r22, r26
     d76:	7b 2b       	or	r23, r27
     d78:	88 8d       	ldd	r24, Y+24	; 0x18
     d7a:	9a 01       	movw	r18, r20
     d7c:	ab 01       	movw	r20, r22
     d7e:	28 2b       	or	r18, r24

	fsize *= buf[BPB_NumFATs - 13];                             /* Number of sectors in FAT area */
     d80:	ac 81       	ldd	r26, Y+4	; 0x04
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__muluhisi3>
     d88:	6d a3       	std	Y+37, r22	; 0x25
     d8a:	7e a3       	std	Y+38, r23	; 0x26
     d8c:	8f a3       	std	Y+39, r24	; 0x27
     d8e:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase   = bsect + LD_WORD(buf + BPB_RsvdSecCnt - 13); /* FAT start sector (lba) */
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 2f       	mov	r25, r24
     d96:	88 27       	eor	r24, r24
     d98:	4a 81       	ldd	r20, Y+2	; 0x02
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	84 2b       	or	r24, r20
     d9e:	95 2b       	or	r25, r21
     da0:	88 0e       	add	r8, r24
     da2:	99 1e       	adc	r9, r25
     da4:	a1 1c       	adc	r10, r1
     da6:	b1 1c       	adc	r11, r1
     da8:	d7 01       	movw	r26, r14
     daa:	1a 96       	adiw	r26, 0x0a	; 10
     dac:	8d 92       	st	X+, r8
     dae:	9d 92       	st	X+, r9
     db0:	ad 92       	st	X+, r10
     db2:	bc 92       	st	X, r11
     db4:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize     = buf[BPB_SecPerClus - 13];                   /* Number of sectors per cluster */
     db6:	a9 81       	ldd	r26, Y+1	; 0x01
     db8:	f7 01       	movw	r30, r14
     dba:	a2 83       	std	Z+2, r26	; 0x02
	fs->n_rootdir = LD_WORD(buf + BPB_RootEntCnt - 13);         /* Nmuber of root directory entries */
     dbc:	8e 81       	ldd	r24, Y+6	; 0x06
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	98 2f       	mov	r25, r24
     dc2:	88 27       	eor	r24, r24
     dc4:	2d 81       	ldd	r18, Y+5	; 0x05
     dc6:	82 2b       	or	r24, r18
     dc8:	95 83       	std	Z+5, r25	; 0x05
     dca:	84 83       	std	Z+4, r24	; 0x04
	tsect         = LD_WORD(buf + BPB_TotSec16 - 13);           /* Number of sectors on the file system */
     dcc:	08 85       	ldd	r16, Y+8	; 0x08
     dce:	10 e0       	ldi	r17, 0x00	; 0
     dd0:	10 2f       	mov	r17, r16
     dd2:	00 27       	eor	r16, r16
     dd4:	2f 81       	ldd	r18, Y+7	; 0x07
     dd6:	02 2b       	or	r16, r18
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
	if (!tsect)
     ddc:	01 15       	cp	r16, r1
     dde:	11 05       	cpc	r17, r1
     de0:	21 05       	cpc	r18, r1
     de2:	31 05       	cpc	r19, r1
     de4:	01 f5       	brne	.+64     	; 0xe26 <pf_mount+0x210>
		tsect = LD_DWORD(buf + BPB_TotSec32 - 13);
     de6:	0f 89       	ldd	r16, Y+23	; 0x17
     de8:	10 e0       	ldi	r17, 0x00	; 0
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	70 2e       	mov	r7, r16
     df0:	66 24       	eor	r6, r6
     df2:	55 24       	eor	r5, r5
     df4:	44 24       	eor	r4, r4
     df6:	0e 89       	ldd	r16, Y+22	; 0x16
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	98 01       	movw	r18, r16
     e00:	11 27       	eor	r17, r17
     e02:	00 27       	eor	r16, r16
     e04:	40 2a       	or	r4, r16
     e06:	51 2a       	or	r5, r17
     e08:	62 2a       	or	r6, r18
     e0a:	73 2a       	or	r7, r19
     e0c:	2d 89       	ldd	r18, Y+21	; 0x15
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	32 2f       	mov	r19, r18
     e12:	22 27       	eor	r18, r18
     e14:	89 01       	movw	r16, r18
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	04 29       	or	r16, r4
     e1c:	15 29       	or	r17, r5
     e1e:	26 29       	or	r18, r6
     e20:	37 29       	or	r19, r7
     e22:	6c 89       	ldd	r22, Y+20	; 0x14
     e24:	06 2b       	or	r16, r22
	mclst = (tsect /* Last cluster# + 1 */
	         - LD_WORD(buf + BPB_RsvdSecCnt - 13) - fsize - fs->n_rootdir / 16)
     e26:	eb 81       	ldd	r30, Y+3	; 0x03
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	fe 2f       	mov	r31, r30
     e2c:	ee 27       	eor	r30, r30
     e2e:	4e 2b       	or	r20, r30
     e30:	5f 2b       	or	r21, r31
     e32:	04 1b       	sub	r16, r20
     e34:	15 0b       	sbc	r17, r21
     e36:	21 09       	sbc	r18, r1
     e38:	31 09       	sbc	r19, r1
     e3a:	4d a1       	ldd	r20, Y+37	; 0x25
     e3c:	5e a1       	ldd	r21, Y+38	; 0x26
     e3e:	6f a1       	ldd	r22, Y+39	; 0x27
     e40:	78 a5       	ldd	r23, Y+40	; 0x28
     e42:	04 1b       	sub	r16, r20
     e44:	15 0b       	sbc	r17, r21
     e46:	26 0b       	sbc	r18, r22
     e48:	37 0b       	sbc	r19, r23
     e4a:	92 95       	swap	r25
     e4c:	82 95       	swap	r24
     e4e:	8f 70       	andi	r24, 0x0F	; 15
     e50:	89 27       	eor	r24, r25
     e52:	9f 70       	andi	r25, 0x0F	; 15
     e54:	89 27       	eor	r24, r25
     e56:	2c 01       	movw	r4, r24
     e58:	61 2c       	mov	r6, r1
     e5a:	71 2c       	mov	r7, r1
     e5c:	c9 01       	movw	r24, r18
     e5e:	b8 01       	movw	r22, r16
     e60:	64 19       	sub	r22, r4
     e62:	75 09       	sbc	r23, r5
     e64:	86 09       	sbc	r24, r6
     e66:	97 09       	sbc	r25, r7
	            / fs->csize
     e68:	2a 2f       	mov	r18, r26
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodsi4>
	fs->csize     = buf[BPB_SecPerClus - 13];                   /* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf + BPB_RootEntCnt - 13);         /* Nmuber of root directory entries */
	tsect         = LD_WORD(buf + BPB_TotSec16 - 13);           /* Number of sectors on the file system */
	if (!tsect)
		tsect = LD_DWORD(buf + BPB_TotSec32 - 13);
	mclst = (tsect /* Last cluster# + 1 */
     e74:	da 01       	movw	r26, r20
     e76:	c9 01       	movw	r24, r18
     e78:	02 96       	adiw	r24, 0x02	; 2
     e7a:	a1 1d       	adc	r26, r1
     e7c:	b1 1d       	adc	r27, r1
	         - LD_WORD(buf + BPB_RsvdSecCnt - 13) - fsize - fs->n_rootdir / 16)
	            / fs->csize
	        + 2;
	fs->n_fatent = (CLUST)mclst;
     e7e:	f7 01       	movw	r30, r14
     e80:	86 83       	std	Z+6, r24	; 0x06
     e82:	97 83       	std	Z+7, r25	; 0x07
     e84:	a0 87       	std	Z+8, r26	; 0x08
     e86:	b1 87       	std	Z+9, r27	; 0x09
	fmt = 0; /* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
     e88:	87 3f       	cpi	r24, 0xF7	; 247
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	a1 05       	cpc	r26, r1
     e8e:	b1 05       	cpc	r27, r1
     e90:	20 f0       	brcs	.+8      	; 0xe9a <pf_mount+0x284>
		fmt = FS_FAT32;
     e92:	0f 2e       	mov	r0, r31
     e94:	f3 e0       	ldi	r31, 0x03	; 3
     e96:	df 2e       	mov	r13, r31
     e98:	f0 2d       	mov	r31, r0
	if (!fmt)
     e9a:	dd 20       	and	r13, r13
     e9c:	09 f4       	brne	.+2      	; 0xea0 <pf_mount+0x28a>
     e9e:	45 c0       	rjmp	.+138    	; 0xf2a <pf_mount+0x314>
		return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
     ea0:	d7 01       	movw	r26, r14
     ea2:	dc 92       	st	X, r13

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf + (BPB_RootClus - 13)); /* Root directory start cluster */
     ea4:	8b a1       	ldd	r24, Y+35	; 0x23
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	78 2f       	mov	r23, r24
     eae:	66 27       	eor	r22, r22
     eb0:	55 27       	eor	r21, r21
     eb2:	44 27       	eor	r20, r20
     eb4:	8a a1       	ldd	r24, Y+34	; 0x22
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	a0 e0       	ldi	r26, 0x00	; 0
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	dc 01       	movw	r26, r24
     ebe:	99 27       	eor	r25, r25
     ec0:	88 27       	eor	r24, r24
     ec2:	84 2b       	or	r24, r20
     ec4:	95 2b       	or	r25, r21
     ec6:	a6 2b       	or	r26, r22
     ec8:	b7 2b       	or	r27, r23
     eca:	49 a1       	ldd	r20, Y+33	; 0x21
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	54 2f       	mov	r21, r20
     ed0:	44 27       	eor	r20, r20
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	84 2b       	or	r24, r20
     ed8:	95 2b       	or	r25, r21
     eda:	a6 2b       	or	r26, r22
     edc:	b7 2b       	or	r27, r23
     ede:	28 a1       	ldd	r18, Y+32	; 0x20
     ee0:	82 2b       	or	r24, r18
     ee2:	f7 01       	movw	r30, r14
     ee4:	86 87       	std	Z+14, r24	; 0x0e
     ee6:	97 87       	std	Z+15, r25	; 0x0f
     ee8:	a0 8b       	std	Z+16, r26	; 0x10
     eea:	b1 8b       	std	Z+17, r27	; 0x11
	else
		fs->dirbase = fs->fatbase + fsize;                   /* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16; /* Data start sector (lba) */
     eec:	4d a1       	ldd	r20, Y+37	; 0x25
     eee:	5e a1       	ldd	r21, Y+38	; 0x26
     ef0:	6f a1       	ldd	r22, Y+39	; 0x27
     ef2:	78 a5       	ldd	r23, Y+40	; 0x28
     ef4:	84 0e       	add	r8, r20
     ef6:	95 1e       	adc	r9, r21
     ef8:	a6 1e       	adc	r10, r22
     efa:	b7 1e       	adc	r11, r23
     efc:	84 0c       	add	r8, r4
     efe:	95 1c       	adc	r9, r5
     f00:	a6 1c       	adc	r10, r6
     f02:	b7 1c       	adc	r11, r7
     f04:	82 8a       	std	Z+18, r8	; 0x12
     f06:	93 8a       	std	Z+19, r9	; 0x13
     f08:	a4 8a       	std	Z+20, r10	; 0x14
     f0a:	b5 8a       	std	Z+21, r11	; 0x15

	fs->flag = 0;
     f0c:	11 82       	std	Z+1, r1	; 0x01
	FatFs    = fs;
     f0e:	f0 92 a3 01 	sts	0x01A3, r15	; 0x8001a3 <FatFs+0x1>
     f12:	e0 92 a2 01 	sts	0x01A2, r14	; 0x8001a2 <FatFs>

	return FR_OK;
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <pf_mount+0x316>
	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)
	{
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <pf_mount+0x316>
				fmt   = check_fs(buf, bsect); /* Check the partition */
			}
		}
	}
	if (fmt == 3)
		return FR_DISK_ERR;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <pf_mount+0x316>
	if (fmt)
		return FR_NO_FILESYSTEM; /* No valid FAT patition is found */
     f22:	86 e0       	ldi	r24, 0x06	; 6
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <pf_mount+0x316>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf)))
		return FR_DISK_ERR;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <pf_mount+0x316>
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt)
		return FR_NO_FILESYSTEM;
     f2a:	86 e0       	ldi	r24, 0x06	; 6

	fs->flag = 0;
	FatFs    = fs;

	return FR_OK;
}
     f2c:	a8 96       	adiw	r28, 0x28	; 40
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	7f 90       	pop	r7
     f50:	6f 90       	pop	r6
     f52:	5f 90       	pop	r5
     f54:	4f 90       	pop	r4
     f56:	08 95       	ret

00000f58 <pf_open>:
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT pf_open(const char *path /* Pointer to the file name */
)
 {
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	ec 97       	sbiw	r28, 0x3c	; 60
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR     dj;
	BYTE    sp[12], dir[32];
	FATFS * fs = FatFs;
     f70:	00 91 a2 01 	lds	r16, 0x01A2	; 0x8001a2 <FatFs>
     f74:	10 91 a3 01 	lds	r17, 0x01A3	; 0x8001a3 <FatFs+0x1>

	if (!fs)
     f78:	01 15       	cp	r16, r1
     f7a:	11 05       	cpc	r17, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <pf_open+0x28>
     f7e:	4a c0       	rjmp	.+148    	; 0x1014 <pf_open+0xbc>
     f80:	ac 01       	movw	r20, r24
		return FR_NOT_ENABLED; /* Check file system */

	fs->flag = 0;
     f82:	f8 01       	movw	r30, r16
     f84:	11 82       	std	Z+1, r1	; 0x01
	dj.fn    = sp;
     f86:	ce 01       	movw	r24, r28
     f88:	41 96       	adiw	r24, 0x11	; 17
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
	res      = follow_path(&dj, dir, path); /* Follow the file path */
     f8e:	be 01       	movw	r22, r28
     f90:	63 5e       	subi	r22, 0xE3	; 227
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	40 97       	sbiw	r24, 0x10	; 16
     f96:	0e 94 af 05 	call	0xb5e	; 0xb5e <follow_path>
	if (res != FR_OK)
     f9a:	81 11       	cpse	r24, r1
     f9c:	40 c0       	rjmp	.+128    	; 0x101e <pf_open+0xc6>
		return res;                          /* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) /* It is a directory */ // hier gaat het fout
     f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa0:	88 23       	and	r24, r24
     fa2:	d1 f1       	breq	.+116    	; 0x1018 <pf_open+0xc0>
     fa4:	88 a5       	ldd	r24, Y+40	; 0x28
     fa6:	84 fd       	sbrc	r24, 4
     fa8:	39 c0       	rjmp	.+114    	; 0x101c <pf_open+0xc4>
		return FR_NO_FILE;
	

	fs->org_clust = get_clust(dir);               /* File start cluster */
     faa:	ce 01       	movw	r24, r28
     fac:	4d 96       	adiw	r24, 0x1d	; 29
     fae:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <get_clust>
     fb2:	f8 01       	movw	r30, r16
     fb4:	66 8f       	std	Z+30, r22	; 0x1e
     fb6:	77 8f       	std	Z+31, r23	; 0x1f
     fb8:	80 a3       	std	Z+32, r24	; 0x20
     fba:	91 a3       	std	Z+33, r25	; 0x21
	fs->fsize     = LD_DWORD(dir + DIR_FileSize); /* File size */
     fbc:	8c ad       	ldd	r24, Y+60	; 0x3c
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	78 2f       	mov	r23, r24
     fc6:	66 27       	eor	r22, r22
     fc8:	55 27       	eor	r21, r21
     fca:	44 27       	eor	r20, r20
     fcc:	9b ad       	ldd	r25, Y+59	; 0x3b
     fce:	89 2f       	mov	r24, r25
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	dc 01       	movw	r26, r24
     fd8:	99 27       	eor	r25, r25
     fda:	88 27       	eor	r24, r24
     fdc:	84 2b       	or	r24, r20
     fde:	95 2b       	or	r25, r21
     fe0:	a6 2b       	or	r26, r22
     fe2:	b7 2b       	or	r27, r23
     fe4:	4a ad       	ldd	r20, Y+58	; 0x3a
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	54 2f       	mov	r21, r20
     fea:	44 27       	eor	r20, r20
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	84 2b       	or	r24, r20
     ff2:	95 2b       	or	r25, r21
     ff4:	a6 2b       	or	r26, r22
     ff6:	b7 2b       	or	r27, r23
     ff8:	29 ad       	ldd	r18, Y+57	; 0x39
     ffa:	82 2b       	or	r24, r18
     ffc:	82 8f       	std	Z+26, r24	; 0x1a
     ffe:	93 8f       	std	Z+27, r25	; 0x1b
    1000:	a4 8f       	std	Z+28, r26	; 0x1c
    1002:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr      = 0;                            /* File pointer */
    1004:	16 8a       	std	Z+22, r1	; 0x16
    1006:	17 8a       	std	Z+23, r1	; 0x17
    1008:	10 8e       	std	Z+24, r1	; 0x18
    100a:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag      = FA_OPENED;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	05 c0       	rjmp	.+10     	; 0x101e <pf_open+0xc6>
	DIR     dj;
	BYTE    sp[12], dir[32];
	FATFS * fs = FatFs;

	if (!fs)
		return FR_NOT_ENABLED; /* Check file system */
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	03 c0       	rjmp	.+6      	; 0x101e <pf_open+0xc6>
	dj.fn    = sp;
	res      = follow_path(&dj, dir, path); /* Follow the file path */
	if (res != FR_OK)
		return res;                          /* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) /* It is a directory */ // hier gaat het fout
		return FR_NO_FILE;
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	01 c0       	rjmp	.+2      	; 0x101e <pf_open+0xc6>
    101c:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize     = LD_DWORD(dir + DIR_FileSize); /* File size */
	fs->fptr      = 0;                            /* File pointer */
	fs->flag      = FA_OPENED;

	return FR_OK;
}
    101e:	ec 96       	adiw	r28, 0x3c	; 60
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <pf_read>:

FRESULT pf_read(void *buff, /* Pointer to the read buffer (NULL:Forward data to the stream)*/
                UINT  btr,  /* Number of bytes to read */
                UINT *br    /* Pointer to number of bytes read */
)
{
    1034:	6f 92       	push	r6
    1036:	7f 92       	push	r7
    1038:	8f 92       	push	r8
    103a:	9f 92       	push	r9
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	3c 01       	movw	r6, r24
    1052:	6b 01       	movw	r12, r22
    1054:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST   clst;
	DWORD   sect, remain;
	UINT    rcnt;
	BYTE    cs, *rbuff = buff;
	FATFS * fs = FatFs;
    1056:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <FatFs>
    105a:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <FatFs+0x1>

	*br = 0;
    105e:	fa 01       	movw	r30, r20
    1060:	11 82       	std	Z+1, r1	; 0x01
    1062:	10 82       	st	Z, r1
	if (!fs)
    1064:	e1 14       	cp	r14, r1
    1066:	f1 04       	cpc	r15, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <pf_read+0x38>
    106a:	b5 c0       	rjmp	.+362    	; 0x11d6 <pf_read+0x1a2>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    106c:	f7 01       	movw	r30, r14
    106e:	81 81       	ldd	r24, Z+1	; 0x01
    1070:	80 ff       	sbrs	r24, 0
    1072:	b3 c0       	rjmp	.+358    	; 0x11da <pf_read+0x1a6>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    1074:	82 8d       	ldd	r24, Z+26	; 0x1a
    1076:	93 8d       	ldd	r25, Z+27	; 0x1b
    1078:	a4 8d       	ldd	r26, Z+28	; 0x1c
    107a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    107c:	46 89       	ldd	r20, Z+22	; 0x16
    107e:	57 89       	ldd	r21, Z+23	; 0x17
    1080:	60 8d       	ldd	r22, Z+24	; 0x18
    1082:	71 8d       	ldd	r23, Z+25	; 0x19
    1084:	84 1b       	sub	r24, r20
    1086:	95 0b       	sbc	r25, r21
    1088:	a6 0b       	sbc	r26, r22
    108a:	b7 0b       	sbc	r27, r23
	if (btr > remain)
    108c:	a6 01       	movw	r20, r12
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	84 17       	cp	r24, r20
    1094:	95 07       	cpc	r25, r21
    1096:	a6 07       	cpc	r26, r22
    1098:	b7 07       	cpc	r27, r23
    109a:	08 f4       	brcc	.+2      	; 0x109e <pf_read+0x6a>
		btr = (UINT)remain; /* Truncate btr by remaining bytes */
    109c:	6c 01       	movw	r12, r24
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512; /* Get partial sector data from sector buffer */
		if (rcnt > btr)
			rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    109e:	53 01       	movw	r10, r6
    10a0:	94 c0       	rjmp	.+296    	; 0x11ca <pf_read+0x196>
	remain = fs->fsize - fs->fptr;
	if (btr > remain)
		btr = (UINT)remain; /* Truncate btr by remaining bytes */

	while (btr) {                                          /* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {                       /* On the sector boundary? */
    10a2:	f7 01       	movw	r30, r14
    10a4:	86 89       	ldd	r24, Z+22	; 0x16
    10a6:	97 89       	ldd	r25, Z+23	; 0x17
    10a8:	a0 8d       	ldd	r26, Z+24	; 0x18
    10aa:	b1 8d       	ldd	r27, Z+25	; 0x19
    10ac:	ac 01       	movw	r20, r24
    10ae:	bd 01       	movw	r22, r26
    10b0:	51 70       	andi	r21, 0x01	; 1
    10b2:	66 27       	eor	r22, r22
    10b4:	77 27       	eor	r23, r23
    10b6:	45 2b       	or	r20, r21
    10b8:	46 2b       	or	r20, r22
    10ba:	47 2b       	or	r20, r23
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <pf_read+0x8c>
    10be:	48 c0       	rjmp	.+144    	; 0x1150 <pf_read+0x11c>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1)); /* Sector offset in the cluster */
    10c0:	c2 81       	ldd	r28, Z+2	; 0x02
    10c2:	c1 50       	subi	r28, 0x01	; 1
    10c4:	ac 01       	movw	r20, r24
    10c6:	bd 01       	movw	r22, r26
    10c8:	03 2e       	mov	r0, r19
    10ca:	39 e0       	ldi	r19, 0x09	; 9
    10cc:	76 95       	lsr	r23
    10ce:	67 95       	ror	r22
    10d0:	57 95       	ror	r21
    10d2:	47 95       	ror	r20
    10d4:	3a 95       	dec	r19
    10d6:	d1 f7       	brne	.-12     	; 0x10cc <pf_read+0x98>
    10d8:	30 2d       	mov	r19, r0
    10da:	c4 23       	and	r28, r20
			if (!cs) {                                     /* On the cluster boundary? */
    10dc:	f1 f4       	brne	.+60     	; 0x111a <pf_read+0xe6>
				if (fs->fptr == 0)                         /* On the top of the file? */
    10de:	89 2b       	or	r24, r25
    10e0:	8a 2b       	or	r24, r26
    10e2:	8b 2b       	or	r24, r27
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <pf_read+0xbc>
					clst = fs->org_clust;
    10e6:	66 8d       	ldd	r22, Z+30	; 0x1e
    10e8:	77 8d       	ldd	r23, Z+31	; 0x1f
    10ea:	80 a1       	ldd	r24, Z+32	; 0x20
    10ec:	91 a1       	ldd	r25, Z+33	; 0x21
    10ee:	07 c0       	rjmp	.+14     	; 0x10fe <pf_read+0xca>
				else
					clst = get_fat(fs->curr_clust);
    10f0:	f7 01       	movw	r30, r14
    10f2:	62 a1       	ldd	r22, Z+34	; 0x22
    10f4:	73 a1       	ldd	r23, Z+35	; 0x23
    10f6:	84 a1       	ldd	r24, Z+36	; 0x24
    10f8:	95 a1       	ldd	r25, Z+37	; 0x25
    10fa:	0e 94 57 04 	call	0x8ae	; 0x8ae <get_fat>
				if (clst <= 1)
    10fe:	62 30       	cpi	r22, 0x02	; 2
    1100:	71 05       	cpc	r23, r1
    1102:	81 05       	cpc	r24, r1
    1104:	91 05       	cpc	r25, r1
    1106:	20 f4       	brcc	.+8      	; 0x1110 <pf_read+0xdc>
					ABORT(FR_DISK_ERR);
    1108:	f7 01       	movw	r30, r14
    110a:	11 82       	std	Z+1, r1	; 0x01
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	66 c0       	rjmp	.+204    	; 0x11dc <pf_read+0x1a8>
				fs->curr_clust = clst; /* Update current cluster */
    1110:	f7 01       	movw	r30, r14
    1112:	62 a3       	std	Z+34, r22	; 0x22
    1114:	73 a3       	std	Z+35, r23	; 0x23
    1116:	84 a3       	std	Z+36, r24	; 0x24
    1118:	95 a3       	std	Z+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust); /* Get current sector */
    111a:	f7 01       	movw	r30, r14
    111c:	62 a1       	ldd	r22, Z+34	; 0x22
    111e:	73 a1       	ldd	r23, Z+35	; 0x23
    1120:	84 a1       	ldd	r24, Z+36	; 0x24
    1122:	95 a1       	ldd	r25, Z+37	; 0x25
    1124:	0e 94 3f 03 	call	0x67e	; 0x67e <clust2sect>
			if (!sect)
    1128:	61 15       	cp	r22, r1
    112a:	71 05       	cpc	r23, r1
    112c:	81 05       	cpc	r24, r1
    112e:	91 05       	cpc	r25, r1
    1130:	21 f4       	brne	.+8      	; 0x113a <pf_read+0x106>
				ABORT(FR_DISK_ERR);
    1132:	f7 01       	movw	r30, r14
    1134:	11 82       	std	Z+1, r1	; 0x01
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	51 c0       	rjmp	.+162    	; 0x11dc <pf_read+0x1a8>
			fs->dsect = sect + cs;
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	8c 0f       	add	r24, r28
    1140:	91 1d       	adc	r25, r1
    1142:	a1 1d       	adc	r26, r1
    1144:	b1 1d       	adc	r27, r1
    1146:	f7 01       	movw	r30, r14
    1148:	86 a3       	std	Z+38, r24	; 0x26
    114a:	97 a3       	std	Z+39, r25	; 0x27
    114c:	a0 a7       	std	Z+40, r26	; 0x28
    114e:	b1 a7       	std	Z+41, r27	; 0x29
		}
		rcnt = 512 - (UINT)fs->fptr % 512; /* Get partial sector data from sector buffer */
    1150:	f7 01       	movw	r30, r14
    1152:	86 89       	ldd	r24, Z+22	; 0x16
    1154:	97 89       	ldd	r25, Z+23	; 0x17
    1156:	a0 8d       	ldd	r26, Z+24	; 0x18
    1158:	b1 8d       	ldd	r27, Z+25	; 0x19
    115a:	9c 01       	movw	r18, r24
    115c:	31 70       	andi	r19, 0x01	; 1
    115e:	c0 e0       	ldi	r28, 0x00	; 0
    1160:	d2 e0       	ldi	r29, 0x02	; 2
    1162:	c2 1b       	sub	r28, r18
    1164:	d3 0b       	sbc	r29, r19
		if (rcnt > btr)
    1166:	cc 16       	cp	r12, r28
    1168:	dd 06       	cpc	r13, r29
    116a:	08 f4       	brcc	.+2      	; 0x116e <pf_read+0x13a>
			rcnt = btr;
    116c:	e6 01       	movw	r28, r12
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    116e:	f7 01       	movw	r30, r14
    1170:	46 a1       	ldd	r20, Z+38	; 0x26
    1172:	57 a1       	ldd	r21, Z+39	; 0x27
    1174:	60 a5       	ldd	r22, Z+40	; 0x28
    1176:	71 a5       	ldd	r23, Z+41	; 0x29
    1178:	61 14       	cp	r6, r1
    117a:	71 04       	cpc	r7, r1
    117c:	19 f4       	brne	.+6      	; 0x1184 <pf_read+0x150>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <pf_read+0x154>
    1184:	8a 2d       	mov	r24, r10
    1186:	9b 2d       	mov	r25, r11
    1188:	8e 01       	movw	r16, r28
    118a:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
		if (dr)
    118e:	88 23       	and	r24, r24
    1190:	21 f0       	breq	.+8      	; 0x119a <pf_read+0x166>
			ABORT(FR_DISK_ERR);
    1192:	f7 01       	movw	r30, r14
    1194:	11 82       	std	Z+1, r1	; 0x01
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	21 c0       	rjmp	.+66     	; 0x11dc <pf_read+0x1a8>
		fs->fptr += rcnt;
    119a:	f7 01       	movw	r30, r14
    119c:	86 89       	ldd	r24, Z+22	; 0x16
    119e:	97 89       	ldd	r25, Z+23	; 0x17
    11a0:	a0 8d       	ldd	r26, Z+24	; 0x18
    11a2:	b1 8d       	ldd	r27, Z+25	; 0x19
    11a4:	8c 0f       	add	r24, r28
    11a6:	9d 1f       	adc	r25, r29
    11a8:	a1 1d       	adc	r26, r1
    11aa:	b1 1d       	adc	r27, r1
    11ac:	86 8b       	std	Z+22, r24	; 0x16
    11ae:	97 8b       	std	Z+23, r25	; 0x17
    11b0:	a0 8f       	std	Z+24, r26	; 0x18
    11b2:	b1 8f       	std	Z+25, r27	; 0x19
		rbuff += rcnt; /* Update pointers and counters */
    11b4:	ac 0e       	add	r10, r28
    11b6:	bd 1e       	adc	r11, r29
		btr -= rcnt;
    11b8:	cc 1a       	sub	r12, r28
    11ba:	dd 0a       	sbc	r13, r29
		*br += rcnt;
    11bc:	f4 01       	movw	r30, r8
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	c8 0f       	add	r28, r24
    11c4:	d9 1f       	adc	r29, r25
    11c6:	d1 83       	std	Z+1, r29	; 0x01
    11c8:	c0 83       	st	Z, r28

	remain = fs->fsize - fs->fptr;
	if (btr > remain)
		btr = (UINT)remain; /* Truncate btr by remaining bytes */

	while (btr) {                                          /* Repeat until all data transferred */
    11ca:	c1 14       	cp	r12, r1
    11cc:	d1 04       	cpc	r13, r1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <pf_read+0x19e>
    11d0:	68 cf       	rjmp	.-304    	; 0x10a2 <pf_read+0x6e>
		rbuff += rcnt; /* Update pointers and counters */
		btr -= rcnt;
		*br += rcnt;
	}

	return FR_OK;
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <pf_read+0x1a8>
	BYTE    cs, *rbuff = buff;
	FATFS * fs = FatFs;

	*br = 0;
	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <pf_read+0x1a8>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    11da:	84 e0       	ldi	r24, 0x04	; 4
		btr -= rcnt;
		*br += rcnt;
	}

	return FR_OK;
}
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	bf 90       	pop	r11
    11ee:	af 90       	pop	r10
    11f0:	9f 90       	pop	r9
    11f2:	8f 90       	pop	r8
    11f4:	7f 90       	pop	r7
    11f6:	6f 90       	pop	r6
    11f8:	08 95       	ret

000011fa <pf_write>:

FRESULT pf_write(const void *buff, /* Pointer to the data to be written */
                 UINT        btw,  /* Number of bytes to write (0:Finalize the current write operation) */
                 UINT *      bw    /* Pointer to number of bytes written */
)
{
    11fa:	4f 92       	push	r4
    11fc:	5f 92       	push	r5
    11fe:	6f 92       	push	r6
    1200:	7f 92       	push	r7
    1202:	af 92       	push	r10
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	7c 01       	movw	r14, r24
    1218:	5b 01       	movw	r10, r22
    121a:	6a 01       	movw	r12, r20
	CLUST       clst;
	DWORD       sect, remain;
	const BYTE *p = buff;
	BYTE        cs;
	UINT        wcnt;
	FATFS *     fs = FatFs;
    121c:	c0 91 a2 01 	lds	r28, 0x01A2	; 0x8001a2 <FatFs>
    1220:	d0 91 a3 01 	lds	r29, 0x01A3	; 0x8001a3 <FatFs+0x1>

	*bw = 0;
    1224:	fa 01       	movw	r30, r20
    1226:	11 82       	std	Z+1, r1	; 0x01
    1228:	10 82       	st	Z, r1
	if (!fs)
    122a:	20 97       	sbiw	r28, 0x00	; 0
    122c:	09 f4       	brne	.+2      	; 0x1230 <pf_write+0x36>
    122e:	df c0       	rjmp	.+446    	; 0x13ee <pf_write+0x1f4>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	80 ff       	sbrs	r24, 0
    1234:	de c0       	rjmp	.+444    	; 0x13f2 <pf_write+0x1f8>
		return FR_NOT_OPENED;

	if (!btw) { /* Finalize request */
    1236:	67 2b       	or	r22, r23
    1238:	99 f4       	brne	.+38     	; 0x1260 <pf_write+0x66>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0))
    123a:	86 ff       	sbrs	r24, 6
    123c:	0c c0       	rjmp	.+24     	; 0x1256 <pf_write+0x5c>
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	ba 01       	movw	r22, r20
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    124c:	88 23       	and	r24, r24
    124e:	19 f0       	breq	.+6      	; 0x1256 <pf_write+0x5c>
			ABORT(FR_DISK_ERR);
    1250:	19 82       	std	Y+1, r1	; 0x01
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	cf c0       	rjmp	.+414    	; 0x13f4 <pf_write+0x1fa>
		fs->flag &= ~FA__WIP;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	8f 7b       	andi	r24, 0xBF	; 191
    125a:	89 83       	std	Y+1, r24	; 0x01
		return FR_OK;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	ca c0       	rjmp	.+404    	; 0x13f4 <pf_write+0x1fa>
	} else {                       /* Write data request */
		if (!(fs->flag & FA__WIP)) /* Round-down fptr to the sector boundary */
    1260:	86 fd       	sbrc	r24, 6
    1262:	0a c0       	rjmp	.+20     	; 0x1278 <pf_write+0x7e>
			fs->fptr &= 0xFFFFFE00;
    1264:	8e 89       	ldd	r24, Y+22	; 0x16
    1266:	9f 89       	ldd	r25, Y+23	; 0x17
    1268:	a8 8d       	ldd	r26, Y+24	; 0x18
    126a:	b9 8d       	ldd	r27, Y+25	; 0x19
    126c:	88 27       	eor	r24, r24
    126e:	9e 7f       	andi	r25, 0xFE	; 254
    1270:	8e 8b       	std	Y+22, r24	; 0x16
    1272:	9f 8b       	std	Y+23, r25	; 0x17
    1274:	a8 8f       	std	Y+24, r26	; 0x18
    1276:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    1278:	8a 8d       	ldd	r24, Y+26	; 0x1a
    127a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    127c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    127e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1280:	4e 89       	ldd	r20, Y+22	; 0x16
    1282:	5f 89       	ldd	r21, Y+23	; 0x17
    1284:	68 8d       	ldd	r22, Y+24	; 0x18
    1286:	79 8d       	ldd	r23, Y+25	; 0x19
    1288:	84 1b       	sub	r24, r20
    128a:	95 0b       	sbc	r25, r21
    128c:	a6 0b       	sbc	r26, r22
    128e:	b7 0b       	sbc	r27, r23
	if (btw > remain)
    1290:	a5 01       	movw	r20, r10
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	84 17       	cp	r24, r20
    1298:	95 07       	cpc	r25, r21
    129a:	a6 07       	cpc	r26, r22
    129c:	b7 07       	cpc	r27, r23
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <pf_write+0xa8>
    12a0:	a0 c0       	rjmp	.+320    	; 0x13e2 <pf_write+0x1e8>
		btw = (UINT)remain; /* Truncate btw by remaining bytes */
    12a2:	5c 01       	movw	r10, r24
    12a4:	9e c0       	rjmp	.+316    	; 0x13e2 <pf_write+0x1e8>

	while (btw) {                                          /* Repeat until all data transferred */
		if ((UINT)fs->fptr % 512 == 0) {                   /* On the sector boundary? */
    12a6:	8e 89       	ldd	r24, Y+22	; 0x16
    12a8:	9f 89       	ldd	r25, Y+23	; 0x17
    12aa:	a8 8d       	ldd	r26, Y+24	; 0x18
    12ac:	b9 8d       	ldd	r27, Y+25	; 0x19
    12ae:	9c 01       	movw	r18, r24
    12b0:	31 70       	andi	r19, 0x01	; 1
    12b2:	23 2b       	or	r18, r19
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <pf_write+0xbe>
    12b6:	4e c0       	rjmp	.+156    	; 0x1354 <pf_write+0x15a>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1)); /* Sector offset in the cluster */
    12b8:	1a 81       	ldd	r17, Y+2	; 0x02
    12ba:	11 50       	subi	r17, 0x01	; 1
    12bc:	ac 01       	movw	r20, r24
    12be:	bd 01       	movw	r22, r26
    12c0:	03 2e       	mov	r0, r19
    12c2:	39 e0       	ldi	r19, 0x09	; 9
    12c4:	76 95       	lsr	r23
    12c6:	67 95       	ror	r22
    12c8:	57 95       	ror	r21
    12ca:	47 95       	ror	r20
    12cc:	3a 95       	dec	r19
    12ce:	d1 f7       	brne	.-12     	; 0x12c4 <pf_write+0xca>
    12d0:	30 2d       	mov	r19, r0
    12d2:	14 23       	and	r17, r20
			if (!cs) {                                     /* On the cluster boundary? */
    12d4:	d9 f4       	brne	.+54     	; 0x130c <pf_write+0x112>
				if (fs->fptr == 0)                         /* On the top of the file? */
    12d6:	89 2b       	or	r24, r25
    12d8:	8a 2b       	or	r24, r26
    12da:	8b 2b       	or	r24, r27
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <pf_write+0xee>
					clst = fs->org_clust;
    12de:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12e0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12e2:	88 a1       	ldd	r24, Y+32	; 0x20
    12e4:	99 a1       	ldd	r25, Y+33	; 0x21
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <pf_write+0xfa>
				else
					clst = get_fat(fs->curr_clust);
    12e8:	6a a1       	ldd	r22, Y+34	; 0x22
    12ea:	7b a1       	ldd	r23, Y+35	; 0x23
    12ec:	8c a1       	ldd	r24, Y+36	; 0x24
    12ee:	9d a1       	ldd	r25, Y+37	; 0x25
    12f0:	0e 94 57 04 	call	0x8ae	; 0x8ae <get_fat>
				if (clst <= 1)
    12f4:	62 30       	cpi	r22, 0x02	; 2
    12f6:	71 05       	cpc	r23, r1
    12f8:	81 05       	cpc	r24, r1
    12fa:	91 05       	cpc	r25, r1
    12fc:	18 f4       	brcc	.+6      	; 0x1304 <pf_write+0x10a>
					ABORT(FR_DISK_ERR);
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	78 c0       	rjmp	.+240    	; 0x13f4 <pf_write+0x1fa>
				fs->curr_clust = clst; /* Update current cluster */
    1304:	6a a3       	std	Y+34, r22	; 0x22
    1306:	7b a3       	std	Y+35, r23	; 0x23
    1308:	8c a3       	std	Y+36, r24	; 0x24
    130a:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust); /* Get current sector */
    130c:	6a a1       	ldd	r22, Y+34	; 0x22
    130e:	7b a1       	ldd	r23, Y+35	; 0x23
    1310:	8c a1       	ldd	r24, Y+36	; 0x24
    1312:	9d a1       	ldd	r25, Y+37	; 0x25
    1314:	0e 94 3f 03 	call	0x67e	; 0x67e <clust2sect>
			if (!sect)
    1318:	61 15       	cp	r22, r1
    131a:	71 05       	cpc	r23, r1
    131c:	81 05       	cpc	r24, r1
    131e:	91 05       	cpc	r25, r1
    1320:	19 f4       	brne	.+6      	; 0x1328 <pf_write+0x12e>
				ABORT(FR_DISK_ERR);
    1322:	19 82       	std	Y+1, r1	; 0x01
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	66 c0       	rjmp	.+204    	; 0x13f4 <pf_write+0x1fa>
			fs->dsect = sect + cs;
    1328:	ab 01       	movw	r20, r22
    132a:	bc 01       	movw	r22, r24
    132c:	41 0f       	add	r20, r17
    132e:	51 1d       	adc	r21, r1
    1330:	61 1d       	adc	r22, r1
    1332:	71 1d       	adc	r23, r1
    1334:	4e a3       	std	Y+38, r20	; 0x26
    1336:	5f a3       	std	Y+39, r21	; 0x27
    1338:	68 a7       	std	Y+40, r22	; 0x28
    133a:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect))
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    1344:	88 23       	and	r24, r24
    1346:	19 f0       	breq	.+6      	; 0x134e <pf_write+0x154>
				ABORT(FR_DISK_ERR); /* Initiate a sector write operation */
    1348:	19 82       	std	Y+1, r1	; 0x01
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	53 c0       	rjmp	.+166    	; 0x13f4 <pf_write+0x1fa>
			fs->flag |= FA__WIP;
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	80 64       	ori	r24, 0x40	; 64
    1352:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - (UINT)fs->fptr % 512; /* Number of bytes to write to the sector */
    1354:	8e 89       	ldd	r24, Y+22	; 0x16
    1356:	9f 89       	ldd	r25, Y+23	; 0x17
    1358:	a8 8d       	ldd	r26, Y+24	; 0x18
    135a:	b9 8d       	ldd	r27, Y+25	; 0x19
    135c:	91 70       	andi	r25, 0x01	; 1
    135e:	00 e0       	ldi	r16, 0x00	; 0
    1360:	12 e0       	ldi	r17, 0x02	; 2
    1362:	08 1b       	sub	r16, r24
    1364:	19 0b       	sbc	r17, r25
		if (wcnt > btw)
    1366:	a0 16       	cp	r10, r16
    1368:	b1 06       	cpc	r11, r17
    136a:	08 f4       	brcc	.+2      	; 0x136e <pf_write+0x174>
			wcnt = btw;
    136c:	85 01       	movw	r16, r10
		if (disk_writep(p, wcnt))
    136e:	28 01       	movw	r4, r16
    1370:	61 2c       	mov	r6, r1
    1372:	71 2c       	mov	r7, r1
    1374:	b3 01       	movw	r22, r6
    1376:	a2 01       	movw	r20, r4
    1378:	c7 01       	movw	r24, r14
    137a:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    137e:	88 23       	and	r24, r24
    1380:	19 f0       	breq	.+6      	; 0x1388 <pf_write+0x18e>
			ABORT(FR_DISK_ERR); /* Send data to the sector */
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	36 c0       	rjmp	.+108    	; 0x13f4 <pf_write+0x1fa>
		fs->fptr += wcnt;
    1388:	8e 89       	ldd	r24, Y+22	; 0x16
    138a:	9f 89       	ldd	r25, Y+23	; 0x17
    138c:	a8 8d       	ldd	r26, Y+24	; 0x18
    138e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1390:	48 0e       	add	r4, r24
    1392:	59 1e       	adc	r5, r25
    1394:	6a 1e       	adc	r6, r26
    1396:	7b 1e       	adc	r7, r27
    1398:	4e 8a       	std	Y+22, r4	; 0x16
    139a:	5f 8a       	std	Y+23, r5	; 0x17
    139c:	68 8e       	std	Y+24, r6	; 0x18
    139e:	79 8e       	std	Y+25, r7	; 0x19
		p += wcnt; /* Update pointers and counters */
    13a0:	e0 0e       	add	r14, r16
    13a2:	f1 1e       	adc	r15, r17
		btw -= wcnt;
    13a4:	a0 1a       	sub	r10, r16
    13a6:	b1 0a       	sbc	r11, r17
		*bw += wcnt;
    13a8:	f6 01       	movw	r30, r12
    13aa:	80 81       	ld	r24, Z
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	08 0f       	add	r16, r24
    13b0:	19 1f       	adc	r17, r25
    13b2:	11 83       	std	Z+1, r17	; 0x01
    13b4:	00 83       	st	Z, r16
		if ((UINT)fs->fptr % 512 == 0) {
    13b6:	8e 89       	ldd	r24, Y+22	; 0x16
    13b8:	9f 89       	ldd	r25, Y+23	; 0x17
    13ba:	a8 8d       	ldd	r26, Y+24	; 0x18
    13bc:	b9 8d       	ldd	r27, Y+25	; 0x19
    13be:	91 70       	andi	r25, 0x01	; 1
    13c0:	89 2b       	or	r24, r25
    13c2:	79 f4       	brne	.+30     	; 0x13e2 <pf_write+0x1e8>
			if (disk_writep(0, 0))
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	ba 01       	movw	r22, r20
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    13d2:	88 23       	and	r24, r24
    13d4:	19 f0       	breq	.+6      	; 0x13dc <pf_write+0x1e2>
				ABORT(FR_DISK_ERR); /* Finalize the current sector write operation */
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	0c c0       	rjmp	.+24     	; 0x13f4 <pf_write+0x1fa>
			fs->flag &= ~FA__WIP;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	8f 7b       	andi	r24, 0xBF	; 191
    13e0:	89 83       	std	Y+1, r24	; 0x01
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain)
		btw = (UINT)remain; /* Truncate btw by remaining bytes */

	while (btw) {                                          /* Repeat until all data transferred */
    13e2:	a1 14       	cp	r10, r1
    13e4:	b1 04       	cpc	r11, r1
    13e6:	09 f0       	breq	.+2      	; 0x13ea <pf_write+0x1f0>
    13e8:	5e cf       	rjmp	.-324    	; 0x12a6 <pf_write+0xac>
				ABORT(FR_DISK_ERR); /* Finalize the current sector write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <pf_write+0x1fa>
	UINT        wcnt;
	FATFS *     fs = FatFs;

	*bw = 0;
	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    13ee:	85 e0       	ldi	r24, 0x05	; 5
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <pf_write+0x1fa>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    13f2:	84 e0       	ldi	r24, 0x04	; 4
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	7f 90       	pop	r7
    140a:	6f 90       	pop	r6
    140c:	5f 90       	pop	r5
    140e:	4f 90       	pop	r4
    1410:	08 95       	ret

00001412 <pf_lseek>:
/*-----------------------------------------------------------------------*/
#if _USE_LSEEK

FRESULT pf_lseek(DWORD ofs /* File pointer from top of file */
)
{
    1412:	4f 92       	push	r4
    1414:	5f 92       	push	r5
    1416:	6f 92       	push	r6
    1418:	7f 92       	push	r7
    141a:	8f 92       	push	r8
    141c:	9f 92       	push	r9
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	00 d0       	rcall	.+0      	; 0x1430 <pf_lseek+0x1e>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <pf_lseek+0x20>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <pf_lseek+0x22>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	CLUST  clst;
	DWORD  bcs, sect, ifptr;
	FATFS *fs = FatFs;
    1438:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <FatFs>
    143c:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <FatFs+0x1>
    1440:	3e 83       	std	Y+6, r19	; 0x06
    1442:	2d 83       	std	Y+5, r18	; 0x05

	if (!fs)
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <pf_lseek+0x3a>
    144a:	f4 c0       	rjmp	.+488    	; 0x1634 <pf_lseek+0x222>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    144c:	d9 01       	movw	r26, r18
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	2c 91       	ld	r18, X
    1452:	11 97       	sbiw	r26, 0x01	; 1
    1454:	20 ff       	sbrs	r18, 0
    1456:	f0 c0       	rjmp	.+480    	; 0x1638 <pf_lseek+0x226>
		return FR_NOT_OPENED;

	if (ofs > fs->fsize)
    1458:	5a 96       	adiw	r26, 0x1a	; 26
    145a:	cd 90       	ld	r12, X+
    145c:	dd 90       	ld	r13, X+
    145e:	ed 90       	ld	r14, X+
    1460:	fc 90       	ld	r15, X
    1462:	5d 97       	sbiw	r26, 0x1d	; 29
    1464:	c6 16       	cp	r12, r22
    1466:	d7 06       	cpc	r13, r23
    1468:	e8 06       	cpc	r14, r24
    146a:	f9 06       	cpc	r15, r25
    146c:	10 f0       	brcs	.+4      	; 0x1472 <pf_lseek+0x60>
    146e:	6b 01       	movw	r12, r22
    1470:	7c 01       	movw	r14, r24
		ofs = fs->fsize; /* Clip offset with the file size */
	ifptr    = fs->fptr;
    1472:	ed 81       	ldd	r30, Y+5	; 0x05
    1474:	fe 81       	ldd	r31, Y+6	; 0x06
    1476:	46 88       	ldd	r4, Z+22	; 0x16
    1478:	57 88       	ldd	r5, Z+23	; 0x17
    147a:	60 8c       	ldd	r6, Z+24	; 0x18
    147c:	71 8c       	ldd	r7, Z+25	; 0x19
	fs->fptr = 0;
    147e:	16 8a       	std	Z+22, r1	; 0x16
    1480:	17 8a       	std	Z+23, r1	; 0x17
    1482:	10 8e       	std	Z+24, r1	; 0x18
    1484:	11 8e       	std	Z+25, r1	; 0x19
	if (ofs > 0) {
    1486:	c1 14       	cp	r12, r1
    1488:	d1 04       	cpc	r13, r1
    148a:	e1 04       	cpc	r14, r1
    148c:	f1 04       	cpc	r15, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <pf_lseek+0x80>
    1490:	d5 c0       	rjmp	.+426    	; 0x163c <pf_lseek+0x22a>
		bcs = (DWORD)fs->csize * 512;                            /* Cluster size (byte) */
    1492:	82 80       	ldd	r8, Z+2	; 0x02
    1494:	91 2c       	mov	r9, r1
    1496:	a1 2c       	mov	r10, r1
    1498:	b1 2c       	mov	r11, r1
    149a:	07 2e       	mov	r0, r23
    149c:	79 e0       	ldi	r23, 0x09	; 9
    149e:	88 0c       	add	r8, r8
    14a0:	99 1c       	adc	r9, r9
    14a2:	aa 1c       	adc	r10, r10
    14a4:	bb 1c       	adc	r11, r11
    14a6:	7a 95       	dec	r23
    14a8:	d1 f7       	brne	.-12     	; 0x149e <pf_lseek+0x8c>
    14aa:	70 2d       	mov	r23, r0
		if (ifptr > 0 && (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
    14ac:	41 14       	cp	r4, r1
    14ae:	51 04       	cpc	r5, r1
    14b0:	61 04       	cpc	r6, r1
    14b2:	71 04       	cpc	r7, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <pf_lseek+0xa6>
    14b6:	40 c0       	rjmp	.+128    	; 0x1538 <pf_lseek+0x126>
    14b8:	c7 01       	movw	r24, r14
    14ba:	b6 01       	movw	r22, r12
    14bc:	61 50       	subi	r22, 0x01	; 1
    14be:	71 09       	sbc	r23, r1
    14c0:	81 09       	sbc	r24, r1
    14c2:	91 09       	sbc	r25, r1
    14c4:	a5 01       	movw	r20, r10
    14c6:	94 01       	movw	r18, r8
    14c8:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodsi4>
    14cc:	29 83       	std	Y+1, r18	; 0x01
    14ce:	3a 83       	std	Y+2, r19	; 0x02
    14d0:	4b 83       	std	Y+3, r20	; 0x03
    14d2:	5c 83       	std	Y+4, r21	; 0x04
    14d4:	b1 e0       	ldi	r27, 0x01	; 1
    14d6:	4b 1a       	sub	r4, r27
    14d8:	51 08       	sbc	r5, r1
    14da:	61 08       	sbc	r6, r1
    14dc:	71 08       	sbc	r7, r1
    14de:	c3 01       	movw	r24, r6
    14e0:	b2 01       	movw	r22, r4
    14e2:	a5 01       	movw	r20, r10
    14e4:	94 01       	movw	r18, r8
    14e6:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodsi4>
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	ab 81       	ldd	r26, Y+3	; 0x03
    14f0:	bc 81       	ldd	r27, Y+4	; 0x04
    14f2:	82 17       	cp	r24, r18
    14f4:	93 07       	cpc	r25, r19
    14f6:	a4 07       	cpc	r26, r20
    14f8:	b5 07       	cpc	r27, r21
    14fa:	f0 f0       	brcs	.+60     	; 0x1538 <pf_lseek+0x126>
			fs->fptr = (ifptr - 1) & ~(bcs - 1);                 /* start from the current cluster */
    14fc:	88 27       	eor	r24, r24
    14fe:	99 27       	eor	r25, r25
    1500:	dc 01       	movw	r26, r24
    1502:	88 19       	sub	r24, r8
    1504:	99 09       	sbc	r25, r9
    1506:	aa 09       	sbc	r26, r10
    1508:	bb 09       	sbc	r27, r11
    150a:	48 22       	and	r4, r24
    150c:	59 22       	and	r5, r25
    150e:	6a 22       	and	r6, r26
    1510:	7b 22       	and	r7, r27
    1512:	ad 81       	ldd	r26, Y+5	; 0x05
    1514:	be 81       	ldd	r27, Y+6	; 0x06
    1516:	56 96       	adiw	r26, 0x16	; 22
    1518:	4d 92       	st	X+, r4
    151a:	5d 92       	st	X+, r5
    151c:	6d 92       	st	X+, r6
    151e:	7c 92       	st	X, r7
    1520:	59 97       	sbiw	r26, 0x19	; 25
			ofs -= fs->fptr;
    1522:	c4 18       	sub	r12, r4
    1524:	d5 08       	sbc	r13, r5
    1526:	e6 08       	sbc	r14, r6
    1528:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
    152a:	92 96       	adiw	r26, 0x22	; 34
    152c:	6d 91       	ld	r22, X+
    152e:	7d 91       	ld	r23, X+
    1530:	8d 91       	ld	r24, X+
    1532:	9c 91       	ld	r25, X
    1534:	95 97       	sbiw	r26, 0x25	; 37
    1536:	39 c0       	rjmp	.+114    	; 0x15aa <pf_lseek+0x198>
		} else {                            /* When seek to back cluster, */
			clst           = fs->org_clust; /* start from the first cluster */
    1538:	ed 81       	ldd	r30, Y+5	; 0x05
    153a:	fe 81       	ldd	r31, Y+6	; 0x06
    153c:	66 8d       	ldd	r22, Z+30	; 0x1e
    153e:	77 8d       	ldd	r23, Z+31	; 0x1f
    1540:	80 a1       	ldd	r24, Z+32	; 0x20
    1542:	91 a1       	ldd	r25, Z+33	; 0x21
			fs->curr_clust = clst;
    1544:	62 a3       	std	Z+34, r22	; 0x22
    1546:	73 a3       	std	Z+35, r23	; 0x23
    1548:	84 a3       	std	Z+36, r24	; 0x24
    154a:	95 a3       	std	Z+37, r25	; 0x25
    154c:	2e c0       	rjmp	.+92     	; 0x15aa <pf_lseek+0x198>
		}
		while (ofs > bcs) {       /* Cluster following loop */
			clst = get_fat(clst); /* Follow cluster chain */
    154e:	0e 94 57 04 	call	0x8ae	; 0x8ae <get_fat>
			if (clst <= 1 || clst >= fs->n_fatent)
    1552:	62 30       	cpi	r22, 0x02	; 2
    1554:	71 05       	cpc	r23, r1
    1556:	81 05       	cpc	r24, r1
    1558:	91 05       	cpc	r25, r1
    155a:	58 f0       	brcs	.+22     	; 0x1572 <pf_lseek+0x160>
    155c:	ed 81       	ldd	r30, Y+5	; 0x05
    155e:	fe 81       	ldd	r31, Y+6	; 0x06
    1560:	46 80       	ldd	r4, Z+6	; 0x06
    1562:	57 80       	ldd	r5, Z+7	; 0x07
    1564:	60 84       	ldd	r6, Z+8	; 0x08
    1566:	71 84       	ldd	r7, Z+9	; 0x09
    1568:	64 15       	cp	r22, r4
    156a:	75 05       	cpc	r23, r5
    156c:	86 05       	cpc	r24, r6
    156e:	97 05       	cpc	r25, r7
    1570:	30 f0       	brcs	.+12     	; 0x157e <pf_lseek+0x16c>
				ABORT(FR_DISK_ERR);
    1572:	ad 81       	ldd	r26, Y+5	; 0x05
    1574:	be 81       	ldd	r27, Y+6	; 0x06
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	1c 92       	st	X, r1
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	60 c0       	rjmp	.+192    	; 0x163e <pf_lseek+0x22c>
			fs->curr_clust = clst;
    157e:	ed 81       	ldd	r30, Y+5	; 0x05
    1580:	fe 81       	ldd	r31, Y+6	; 0x06
    1582:	62 a3       	std	Z+34, r22	; 0x22
    1584:	73 a3       	std	Z+35, r23	; 0x23
    1586:	84 a3       	std	Z+36, r24	; 0x24
    1588:	95 a3       	std	Z+37, r25	; 0x25
			fs->fptr += bcs;
    158a:	46 88       	ldd	r4, Z+22	; 0x16
    158c:	57 88       	ldd	r5, Z+23	; 0x17
    158e:	60 8c       	ldd	r6, Z+24	; 0x18
    1590:	71 8c       	ldd	r7, Z+25	; 0x19
    1592:	48 0c       	add	r4, r8
    1594:	59 1c       	adc	r5, r9
    1596:	6a 1c       	adc	r6, r10
    1598:	7b 1c       	adc	r7, r11
    159a:	46 8a       	std	Z+22, r4	; 0x16
    159c:	57 8a       	std	Z+23, r5	; 0x17
    159e:	60 8e       	std	Z+24, r6	; 0x18
    15a0:	71 8e       	std	Z+25, r7	; 0x19
			ofs -= bcs;
    15a2:	c8 18       	sub	r12, r8
    15a4:	d9 08       	sbc	r13, r9
    15a6:	ea 08       	sbc	r14, r10
    15a8:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {                            /* When seek to back cluster, */
			clst           = fs->org_clust; /* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {       /* Cluster following loop */
    15aa:	8c 14       	cp	r8, r12
    15ac:	9d 04       	cpc	r9, r13
    15ae:	ae 04       	cpc	r10, r14
    15b0:	bf 04       	cpc	r11, r15
    15b2:	68 f2       	brcs	.-102    	; 0x154e <pf_lseek+0x13c>
				ABORT(FR_DISK_ERR);
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    15b4:	ed 81       	ldd	r30, Y+5	; 0x05
    15b6:	fe 81       	ldd	r31, Y+6	; 0x06
    15b8:	86 88       	ldd	r8, Z+22	; 0x16
    15ba:	97 88       	ldd	r9, Z+23	; 0x17
    15bc:	a0 8c       	ldd	r10, Z+24	; 0x18
    15be:	b1 8c       	ldd	r11, Z+25	; 0x19
    15c0:	c8 0c       	add	r12, r8
    15c2:	d9 1c       	adc	r13, r9
    15c4:	ea 1c       	adc	r14, r10
    15c6:	fb 1c       	adc	r15, r11
    15c8:	c6 8a       	std	Z+22, r12	; 0x16
    15ca:	d7 8a       	std	Z+23, r13	; 0x17
    15cc:	e0 8e       	std	Z+24, r14	; 0x18
    15ce:	f1 8e       	std	Z+25, r15	; 0x19
		sect = clust2sect(clst); /* Current sector */
    15d0:	0e 94 3f 03 	call	0x67e	; 0x67e <clust2sect>
		if (!sect)
    15d4:	61 15       	cp	r22, r1
    15d6:	71 05       	cpc	r23, r1
    15d8:	81 05       	cpc	r24, r1
    15da:	91 05       	cpc	r25, r1
    15dc:	29 f4       	brne	.+10     	; 0x15e8 <pf_lseek+0x1d6>
			ABORT(FR_DISK_ERR);
    15de:	ed 81       	ldd	r30, Y+5	; 0x05
    15e0:	fe 81       	ldd	r31, Y+6	; 0x06
    15e2:	11 82       	std	Z+1, r1	; 0x01
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	2b c0       	rjmp	.+86     	; 0x163e <pf_lseek+0x22c>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    15e8:	0b 2e       	mov	r0, r27
    15ea:	b9 e0       	ldi	r27, 0x09	; 9
    15ec:	f6 94       	lsr	r15
    15ee:	e7 94       	ror	r14
    15f0:	d7 94       	ror	r13
    15f2:	c7 94       	ror	r12
    15f4:	ba 95       	dec	r27
    15f6:	d1 f7       	brne	.-12     	; 0x15ec <pf_lseek+0x1da>
    15f8:	b0 2d       	mov	r27, r0
    15fa:	ad 81       	ldd	r26, Y+5	; 0x05
    15fc:	be 81       	ldd	r27, Y+6	; 0x06
    15fe:	12 96       	adiw	r26, 0x02	; 2
    1600:	2c 91       	ld	r18, X
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	21 50       	subi	r18, 0x01	; 1
    1606:	31 09       	sbc	r19, r1
    1608:	49 01       	movw	r8, r18
    160a:	33 0f       	add	r19, r19
    160c:	aa 08       	sbc	r10, r10
    160e:	bb 08       	sbc	r11, r11
    1610:	c8 20       	and	r12, r8
    1612:	d9 20       	and	r13, r9
    1614:	ea 20       	and	r14, r10
    1616:	fb 20       	and	r15, r11
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	8c 0d       	add	r24, r12
    161e:	9d 1d       	adc	r25, r13
    1620:	ae 1d       	adc	r26, r14
    1622:	bf 1d       	adc	r27, r15
    1624:	ed 81       	ldd	r30, Y+5	; 0x05
    1626:	fe 81       	ldd	r31, Y+6	; 0x06
    1628:	86 a3       	std	Z+38, r24	; 0x26
    162a:	97 a3       	std	Z+39, r25	; 0x27
    162c:	a0 a7       	std	Z+40, r26	; 0x28
    162e:	b1 a7       	std	Z+41, r27	; 0x29
	}

	return FR_OK;
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	05 c0       	rjmp	.+10     	; 0x163e <pf_lseek+0x22c>
	CLUST  clst;
	DWORD  bcs, sect, ifptr;
	FATFS *fs = FatFs;

	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    1634:	85 e0       	ldi	r24, 0x05	; 5
    1636:	03 c0       	rjmp	.+6      	; 0x163e <pf_lseek+0x22c>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    1638:	84 e0       	ldi	r24, 0x04	; 4
    163a:	01 c0       	rjmp	.+2      	; 0x163e <pf_lseek+0x22c>
		if (!sect)
			ABORT(FR_DISK_ERR);
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
    163c:	80 e0       	ldi	r24, 0x00	; 0
}
    163e:	26 96       	adiw	r28, 0x06	; 6
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	cf 90       	pop	r12
    1656:	bf 90       	pop	r11
    1658:	af 90       	pop	r10
    165a:	9f 90       	pop	r9
    165c:	8f 90       	pop	r8
    165e:	7f 90       	pop	r7
    1660:	6f 90       	pop	r6
    1662:	5f 90       	pop	r5
    1664:	4f 90       	pop	r4
    1666:	08 95       	ret

00001668 <__udivmodsi4>:
    1668:	a1 e2       	ldi	r26, 0x21	; 33
    166a:	1a 2e       	mov	r1, r26
    166c:	aa 1b       	sub	r26, r26
    166e:	bb 1b       	sub	r27, r27
    1670:	fd 01       	movw	r30, r26
    1672:	0d c0       	rjmp	.+26     	; 0x168e <__udivmodsi4_ep>

00001674 <__udivmodsi4_loop>:
    1674:	aa 1f       	adc	r26, r26
    1676:	bb 1f       	adc	r27, r27
    1678:	ee 1f       	adc	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	a2 17       	cp	r26, r18
    167e:	b3 07       	cpc	r27, r19
    1680:	e4 07       	cpc	r30, r20
    1682:	f5 07       	cpc	r31, r21
    1684:	20 f0       	brcs	.+8      	; 0x168e <__udivmodsi4_ep>
    1686:	a2 1b       	sub	r26, r18
    1688:	b3 0b       	sbc	r27, r19
    168a:	e4 0b       	sbc	r30, r20
    168c:	f5 0b       	sbc	r31, r21

0000168e <__udivmodsi4_ep>:
    168e:	66 1f       	adc	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	88 1f       	adc	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	1a 94       	dec	r1
    1698:	69 f7       	brne	.-38     	; 0x1674 <__udivmodsi4_loop>
    169a:	60 95       	com	r22
    169c:	70 95       	com	r23
    169e:	80 95       	com	r24
    16a0:	90 95       	com	r25
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	bd 01       	movw	r22, r26
    16a8:	cf 01       	movw	r24, r30
    16aa:	08 95       	ret

000016ac <__muluhisi3>:
    16ac:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__umulhisi3>
    16b0:	a5 9f       	mul	r26, r21
    16b2:	90 0d       	add	r25, r0
    16b4:	b4 9f       	mul	r27, r20
    16b6:	90 0d       	add	r25, r0
    16b8:	a4 9f       	mul	r26, r20
    16ba:	80 0d       	add	r24, r0
    16bc:	91 1d       	adc	r25, r1
    16be:	11 24       	eor	r1, r1
    16c0:	08 95       	ret

000016c2 <__umulhisi3>:
    16c2:	a2 9f       	mul	r26, r18
    16c4:	b0 01       	movw	r22, r0
    16c6:	b3 9f       	mul	r27, r19
    16c8:	c0 01       	movw	r24, r0
    16ca:	a3 9f       	mul	r26, r19
    16cc:	70 0d       	add	r23, r0
    16ce:	81 1d       	adc	r24, r1
    16d0:	11 24       	eor	r1, r1
    16d2:	91 1d       	adc	r25, r1
    16d4:	b2 9f       	mul	r27, r18
    16d6:	70 0d       	add	r23, r0
    16d8:	81 1d       	adc	r24, r1
    16da:	11 24       	eor	r1, r1
    16dc:	91 1d       	adc	r25, r1
    16de:	08 95       	ret

000016e0 <_exit>:
    16e0:	f8 94       	cli

000016e2 <__stop_program>:
    16e2:	ff cf       	rjmp	.-2      	; 0x16e2 <__stop_program>
