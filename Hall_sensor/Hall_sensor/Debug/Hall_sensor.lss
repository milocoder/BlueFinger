
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000085a  000008ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000085a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  000008f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000960  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecb  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0a  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b6  00000000  00000000  000024b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  000031c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000035a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_12>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e5       	ldi	r30, 0x5A	; 90
  a8:	f8 e0       	ldi	r31, 0x08	; 8
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a4 30       	cpi	r26, 0x04	; 4
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a4 e0       	ldi	r26, 0x04	; 4
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a0 31       	cpi	r26, 0x10	; 16
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  ca:	0c 94 2b 04 	jmp	0x856	; 0x856 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <CalculateSpeed>:
		
	}
	
}

float CalculateSpeed() {
  d2:	8f 92       	push	r8
  d4:	9f 92       	push	r9
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	00 d0       	rcall	.+0      	; 0xec <CalculateSpeed+0x1a>
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	float snelheidKmH = 0.0; // Snelheid in km/h
	volatile int rpmaantal = 0; // Aantal keer magneet langs hall
  f0:	1a 82       	std	Y+2, r1	; 0x02
  f2:	19 82       	std	Y+1, r1	; 0x01
	unsigned long HuidigAantalMili = millis();
  f4:	0e 94 b3 01 	call	0x366	; 0x366 <millis>
  f8:	4b 01       	movw	r8, r22
  fa:	5c 01       	movw	r10, r24
	unsigned long TijdsVerschilMilli = HuidigAantalMili - VorigeMilli;
  fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <VorigeMilli>
 100:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <VorigeMilli+0x1>
 104:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <VorigeMilli+0x2>
 108:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <VorigeMilli+0x3>
 10c:	a5 01       	movw	r20, r10
 10e:	94 01       	movw	r18, r8
 110:	28 1b       	sub	r18, r24
 112:	39 0b       	sbc	r19, r25
 114:	4a 0b       	sbc	r20, r26
 116:	5b 0b       	sbc	r21, r27
 118:	ca 01       	movw	r24, r20
 11a:	b9 01       	movw	r22, r18
	TijdsVerschilSeconden = TijdsVerschilMilli / 1000.0;
 11c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__floatunsisf>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	4a e7       	ldi	r20, 0x7A	; 122
 126:	54 e4       	ldi	r21, 0x44	; 68
 128:	0e 94 30 02 	call	0x460	; 0x460 <__divsf3>
 12c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 130:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 134:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 138:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>

	// Uitlezen van pinwaarde. Als pin hoog is: rpm++ en ledje aan zetten
	if(PINC & (1 << PC0)){
 13c:	30 9b       	sbis	0x06, 0	; 6
 13e:	6f c0       	rjmp	.+222    	; 0x21e <CalculateSpeed+0x14c>
		rpmaantal++;
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
		PORTF = 0xFF;	//led lichtje voor feedback
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	81 bb       	out	0x11, r24	; 17
	
	
		// Meet de snelheid alleen als er minstens één omwenteling is gedetecteerd en een kwart seconde voorbij is
		if(rpmaantal > 0 && TijdsVerschilSeconden > 0.25) {
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	ec f5       	brge	.+122    	; 0x1d2 <CalculateSpeed+0x100>
 158:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end>
 15c:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x1>
 160:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end+0x2>
 164:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e8       	ldi	r20, 0x80	; 128
 16e:	5e e3       	ldi	r21, 0x3E	; 62
 170:	c7 01       	movw	r24, r14
 172:	b6 01       	movw	r22, r12
 174:	0e 94 66 03 	call	0x6cc	; 0x6cc <__gesf2>
 178:	18 16       	cp	r1, r24
 17a:	84 f5       	brge	.+96     	; 0x1dc <CalculateSpeed+0x10a>
			snelheidKmH = (OmtrekWiel* rpmaantal * 3.6) / TijdsVerschilSeconden;
 17c:	69 81       	ldd	r22, Y+1	; 0x01
 17e:	7a 81       	ldd	r23, Y+2	; 0x02
 180:	07 2e       	mov	r0, r23
 182:	00 0c       	add	r0, r0
 184:	88 0b       	sbc	r24, r24
 186:	99 0b       	sbc	r25, r25
 188:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__floatsisf>
 18c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 198:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 19c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3>
 1a0:	26 e6       	ldi	r18, 0x66	; 102
 1a2:	36 e6       	ldi	r19, 0x66	; 102
 1a4:	46 e6       	ldi	r20, 0x66	; 102
 1a6:	50 e4       	ldi	r21, 0x40	; 64
 1a8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3>
 1ac:	a7 01       	movw	r20, r14
 1ae:	96 01       	movw	r18, r12
 1b0:	0e 94 30 02 	call	0x460	; 0x460 <__divsf3>
 1b4:	e6 2e       	mov	r14, r22
 1b6:	f7 2e       	mov	r15, r23
 1b8:	08 2f       	mov	r16, r24
 1ba:	19 2f       	mov	r17, r25
			
		

			// Reset de teller en de timer voor de volgende meting
			rpmaantal = 0;
 1bc:	1a 82       	std	Y+2, r1	; 0x02
 1be:	19 82       	std	Y+1, r1	; 0x01
			VorigeMilli = HuidigAantalMili;
 1c0:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <VorigeMilli>
 1c4:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <VorigeMilli+0x1>
 1c8:	a0 92 0a 01 	sts	0x010A, r10	; 0x80010a <VorigeMilli+0x2>
 1cc:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <VorigeMilli+0x3>
 1d0:	09 c0       	rjmp	.+18     	; 0x1e4 <CalculateSpeed+0x112>
	}
	
}

float CalculateSpeed() {
	float snelheidKmH = 0.0; // Snelheid in km/h
 1d2:	e1 2c       	mov	r14, r1
 1d4:	f1 2c       	mov	r15, r1
 1d6:	00 e0       	ldi	r16, 0x00	; 0
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <CalculateSpeed+0x112>
 1dc:	e1 2c       	mov	r14, r1
 1de:	f1 2c       	mov	r15, r1
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	10 e0       	ldi	r17, 0x00	; 0
			VorigeMilli = HuidigAantalMili;
		}


		// Als er meer dan 2 seconden voorbij is dan en de rmpaantal is gelijk aan 0 -> auto staat stil of aan opstarten. Min. meting snelheid = 2.5 kmh
		if(TijdsVerschilSeconden > 2 && rpmaantal == 0) snelheidKmH = 0.0;
 1e4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 1e8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 1ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
 1f0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e4       	ldi	r21, 0x40	; 64
 1fc:	0e 94 66 03 	call	0x6cc	; 0x6cc <__gesf2>
 200:	18 16       	cp	r1, r24
 202:	44 f4       	brge	.+16     	; 0x214 <CalculateSpeed+0x142>
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	9a 81       	ldd	r25, Y+2	; 0x02
 208:	89 2b       	or	r24, r25
 20a:	21 f4       	brne	.+8      	; 0x214 <CalculateSpeed+0x142>
 20c:	e1 2c       	mov	r14, r1
 20e:	f1 2c       	mov	r15, r1
 210:	00 e0       	ldi	r16, 0x00	; 0
 212:	10 e0       	ldi	r17, 0x00	; 0
		
		return snelheidKmH; 
 214:	5e 2d       	mov	r21, r14
 216:	4f 2d       	mov	r20, r15
 218:	30 2f       	mov	r19, r16
 21a:	21 2f       	mov	r18, r17
 21c:	00 c0       	rjmp	.+0      	; 0x21e <CalculateSpeed+0x14c>
	}
	

}
 21e:	65 2f       	mov	r22, r21
 220:	74 2f       	mov	r23, r20
 222:	83 2f       	mov	r24, r19
 224:	92 2f       	mov	r25, r18
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	bf 90       	pop	r11
 23c:	af 90       	pop	r10
 23e:	9f 90       	pop	r9
 240:	8f 90       	pop	r8
 242:	08 95       	ret

00000244 <writeFloatToEEPROM>:

void writeFloatToEEPROM(float value, int address)
{
 244:	8f 92       	push	r8
 246:	9f 92       	push	r9
 248:	af 92       	push	r10
 24a:	bf 92       	push	r11
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	4b 01       	movw	r8, r22
 25e:	5c 01       	movw	r10, r24
 260:	8a 01       	movw	r16, r20
	int val1 = (int)value; // pak getal voor de komma
 262:	0e 94 a2 02 	call	0x544	; 0x544 <__fixsfsi>
 266:	6b 01       	movw	r12, r22
 268:	7c 01       	movw	r14, r24
	int val2 = (int)((value-val1)*100)+1; // pak kommagetal en doe keer 100
 26a:	07 2e       	mov	r0, r23
 26c:	00 0c       	add	r0, r0
 26e:	88 0b       	sbc	r24, r24
 270:	99 0b       	sbc	r25, r25
 272:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__floatsisf>
 276:	9b 01       	movw	r18, r22
 278:	ac 01       	movw	r20, r24
 27a:	c5 01       	movw	r24, r10
 27c:	b4 01       	movw	r22, r8
 27e:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	48 ec       	ldi	r20, 0xC8	; 200
 288:	52 e4       	ldi	r21, 0x42	; 66
 28a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3>
 28e:	0e 94 a2 02 	call	0x544	; 0x544 <__fixsfsi>
 292:	eb 01       	movw	r28, r22
 294:	21 96       	adiw	r28, 0x01	; 1
	eeprom_write_byte((uint8_t*)address, val1);
 296:	6c 2d       	mov	r22, r12
 298:	c8 01       	movw	r24, r16
 29a:	0e 94 1e 04 	call	0x83c	; 0x83c <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)address+1, val2);
 29e:	6c 2f       	mov	r22, r28
 2a0:	c8 01       	movw	r24, r16
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	0e 94 1e 04 	call	0x83c	; 0x83c <eeprom_write_byte>
	
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	bf 90       	pop	r11
 2ba:	af 90       	pop	r10
 2bc:	9f 90       	pop	r9
 2be:	8f 90       	pop	r8
 2c0:	08 95       	ret

000002c2 <main>:
void writeFloatToEEPROM(float value, int address);
float CalculateSpeed(); 


int main() {
	init_millis(16000000UL);  
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	74 e2       	ldi	r23, 0x24	; 36
 2c6:	84 ef       	ldi	r24, 0xF4	; 244
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 9a 01 	call	0x334	; 0x334 <init_millis>
	sei();  // Enable interrupts
 2ce:	78 94       	sei
	
	DDRF = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 bb       	out	0x10, r24	; 16
	DDRC = 0; 
 2d4:	17 b8       	out	0x07, r1	; 7
	PORTC = 0; 	
 2d6:	18 b8       	out	0x08, r1	; 8
	
	int addressHall = 1;
 2d8:	c1 e0       	ldi	r28, 0x01	; 1
 2da:	d0 e0       	ldi	r29, 0x00	; 0

	while (1) {
		float Speed = CalculateSpeed();	
 2dc:	0e 94 69 00 	call	0xd2	; 0xd2 <CalculateSpeed>

		//naar EEPROM schrijven
		writeFloatToEEPROM(Speed, addressHall);
 2e0:	ae 01       	movw	r20, r28
 2e2:	0e 94 22 01 	call	0x244	; 0x244 <writeFloatToEEPROM>
		addressHall += 3;
 2e6:	23 96       	adiw	r28, 0x03	; 3
 2e8:	f9 cf       	rjmp	.-14     	; 0x2dc <main+0x1a>

000002ea <__vector_12>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
  timer1_millis++;
 2fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer1_millis>
 300:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer1_millis+0x1>
 304:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer1_millis+0x2>
 308:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer1_millis+0x3>
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	a1 1d       	adc	r26, r1
 310:	b1 1d       	adc	r27, r1
 312:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer1_millis>
 316:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <timer1_millis+0x1>
 31a:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <timer1_millis+0x2>
 31e:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <timer1_millis+0x3>
}
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
 334:	20 e4       	ldi	r18, 0x40	; 64
 336:	3f e1       	ldi	r19, 0x1F	; 31
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
 340:	e1 e8       	ldi	r30, 0x81	; 129
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	8a 60       	ori	r24, 0x0A	; 10
 348:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
 34a:	bb 27       	eor	r27, r27
 34c:	a5 2f       	mov	r26, r21
 34e:	94 2f       	mov	r25, r20
 350:	83 2f       	mov	r24, r19
 352:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
  OCR1AL = ctc_match_overflow;
 356:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
 35a:	ef e6       	ldi	r30, 0x6F	; 111
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	82 60       	ori	r24, 0x02	; 2
 362:	80 83       	st	Z, r24
 364:	08 95       	ret

00000366 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 366:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	09 c0       	rjmp	.+18     	; 0x37e <millis+0x18>
    millis_return = timer1_millis;
 36c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <timer1_millis>
 370:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <timer1_millis+0x1>
 374:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer1_millis+0x2>
 378:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer1_millis+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	21 11       	cpse	r18, r1
 380:	f5 cf       	rjmp	.-22     	; 0x36c <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 382:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
 384:	08 95       	ret

00000386 <__subsf3>:
 386:	50 58       	subi	r21, 0x80	; 128

00000388 <__addsf3>:
 388:	bb 27       	eor	r27, r27
 38a:	aa 27       	eor	r26, r26
 38c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__addsf3x>
 390:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_round>
 394:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscA>
 398:	38 f0       	brcs	.+14     	; 0x3a8 <__addsf3+0x20>
 39a:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscB>
 39e:	20 f0       	brcs	.+8      	; 0x3a8 <__addsf3+0x20>
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <__addsf3+0x28>
 3a2:	9f 3f       	cpi	r25, 0xFF	; 255
 3a4:	19 f4       	brne	.+6      	; 0x3ac <__addsf3+0x24>
 3a6:	26 f4       	brtc	.+8      	; 0x3b0 <__addsf3+0x28>
 3a8:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_nan>
 3ac:	0e f4       	brtc	.+2      	; 0x3b0 <__addsf3+0x28>
 3ae:	e0 95       	com	r30
 3b0:	e7 fb       	bst	r30, 7
 3b2:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_inf>

000003b6 <__addsf3x>:
 3b6:	e9 2f       	mov	r30, r25
 3b8:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_split3>
 3bc:	58 f3       	brcs	.-42     	; 0x394 <__addsf3+0xc>
 3be:	ba 17       	cp	r27, r26
 3c0:	62 07       	cpc	r22, r18
 3c2:	73 07       	cpc	r23, r19
 3c4:	84 07       	cpc	r24, r20
 3c6:	95 07       	cpc	r25, r21
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <__addsf3x+0x1c>
 3ca:	79 f4       	brne	.+30     	; 0x3ea <__addsf3x+0x34>
 3cc:	a6 f5       	brtc	.+104    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3ce:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_zero>
 3d2:	0e f4       	brtc	.+2      	; 0x3d6 <__addsf3x+0x20>
 3d4:	e0 95       	com	r30
 3d6:	0b 2e       	mov	r0, r27
 3d8:	ba 2f       	mov	r27, r26
 3da:	a0 2d       	mov	r26, r0
 3dc:	0b 01       	movw	r0, r22
 3de:	b9 01       	movw	r22, r18
 3e0:	90 01       	movw	r18, r0
 3e2:	0c 01       	movw	r0, r24
 3e4:	ca 01       	movw	r24, r20
 3e6:	a0 01       	movw	r20, r0
 3e8:	11 24       	eor	r1, r1
 3ea:	ff 27       	eor	r31, r31
 3ec:	59 1b       	sub	r21, r25
 3ee:	99 f0       	breq	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f0:	59 3f       	cpi	r21, 0xF9	; 249
 3f2:	50 f4       	brcc	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f4:	50 3e       	cpi	r21, 0xE0	; 224
 3f6:	68 f1       	brcs	.+90     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3f8:	1a 16       	cp	r1, r26
 3fa:	f0 40       	sbci	r31, 0x00	; 0
 3fc:	a2 2f       	mov	r26, r18
 3fe:	23 2f       	mov	r18, r19
 400:	34 2f       	mov	r19, r20
 402:	44 27       	eor	r20, r20
 404:	58 5f       	subi	r21, 0xF8	; 248
 406:	f3 cf       	rjmp	.-26     	; 0x3ee <__addsf3x+0x38>
 408:	46 95       	lsr	r20
 40a:	37 95       	ror	r19
 40c:	27 95       	ror	r18
 40e:	a7 95       	ror	r26
 410:	f0 40       	sbci	r31, 0x00	; 0
 412:	53 95       	inc	r21
 414:	c9 f7       	brne	.-14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 416:	7e f4       	brtc	.+30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 418:	1f 16       	cp	r1, r31
 41a:	ba 0b       	sbc	r27, r26
 41c:	62 0b       	sbc	r22, r18
 41e:	73 0b       	sbc	r23, r19
 420:	84 0b       	sbc	r24, r20
 422:	ba f0       	brmi	.+46     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 424:	91 50       	subi	r25, 0x01	; 1
 426:	a1 f0       	breq	.+40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 428:	ff 0f       	add	r31, r31
 42a:	bb 1f       	adc	r27, r27
 42c:	66 1f       	adc	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	c2 f7       	brpl	.-16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 434:	0e c0       	rjmp	.+28     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 436:	ba 0f       	add	r27, r26
 438:	62 1f       	adc	r22, r18
 43a:	73 1f       	adc	r23, r19
 43c:	84 1f       	adc	r24, r20
 43e:	48 f4       	brcc	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 440:	87 95       	ror	r24
 442:	77 95       	ror	r23
 444:	67 95       	ror	r22
 446:	b7 95       	ror	r27
 448:	f7 95       	ror	r31
 44a:	9e 3f       	cpi	r25, 0xFE	; 254
 44c:	08 f0       	brcs	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	b0 cf       	rjmp	.-160    	; 0x3b0 <__addsf3+0x28>
 450:	93 95       	inc	r25
 452:	88 0f       	add	r24, r24
 454:	08 f0       	brcs	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	99 27       	eor	r25, r25
 458:	ee 0f       	add	r30, r30
 45a:	97 95       	ror	r25
 45c:	87 95       	ror	r24
 45e:	08 95       	ret

00000460 <__divsf3>:
 460:	0e 94 44 02 	call	0x488	; 0x488 <__divsf3x>
 464:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_round>
 468:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscB>
 46c:	58 f0       	brcs	.+22     	; 0x484 <__divsf3+0x24>
 46e:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscA>
 472:	40 f0       	brcs	.+16     	; 0x484 <__divsf3+0x24>
 474:	29 f4       	brne	.+10     	; 0x480 <__divsf3+0x20>
 476:	5f 3f       	cpi	r21, 0xFF	; 255
 478:	29 f0       	breq	.+10     	; 0x484 <__divsf3+0x24>
 47a:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_inf>
 47e:	51 11       	cpse	r21, r1
 480:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_szero>
 484:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_nan>

00000488 <__divsf3x>:
 488:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_split3>
 48c:	68 f3       	brcs	.-38     	; 0x468 <__divsf3+0x8>

0000048e <__divsf3_pse>:
 48e:	99 23       	and	r25, r25
 490:	b1 f3       	breq	.-20     	; 0x47e <__divsf3+0x1e>
 492:	55 23       	and	r21, r21
 494:	91 f3       	breq	.-28     	; 0x47a <__divsf3+0x1a>
 496:	95 1b       	sub	r25, r21
 498:	55 0b       	sbc	r21, r21
 49a:	bb 27       	eor	r27, r27
 49c:	aa 27       	eor	r26, r26
 49e:	62 17       	cp	r22, r18
 4a0:	73 07       	cpc	r23, r19
 4a2:	84 07       	cpc	r24, r20
 4a4:	38 f0       	brcs	.+14     	; 0x4b4 <__divsf3_pse+0x26>
 4a6:	9f 5f       	subi	r25, 0xFF	; 255
 4a8:	5f 4f       	sbci	r21, 0xFF	; 255
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
 4ae:	44 1f       	adc	r20, r20
 4b0:	aa 1f       	adc	r26, r26
 4b2:	a9 f3       	breq	.-22     	; 0x49e <__divsf3_pse+0x10>
 4b4:	35 d0       	rcall	.+106    	; 0x520 <__divsf3_pse+0x92>
 4b6:	0e 2e       	mov	r0, r30
 4b8:	3a f0       	brmi	.+14     	; 0x4c8 <__divsf3_pse+0x3a>
 4ba:	e0 e8       	ldi	r30, 0x80	; 128
 4bc:	32 d0       	rcall	.+100    	; 0x522 <__divsf3_pse+0x94>
 4be:	91 50       	subi	r25, 0x01	; 1
 4c0:	50 40       	sbci	r21, 0x00	; 0
 4c2:	e6 95       	lsr	r30
 4c4:	00 1c       	adc	r0, r0
 4c6:	ca f7       	brpl	.-14     	; 0x4ba <__divsf3_pse+0x2c>
 4c8:	2b d0       	rcall	.+86     	; 0x520 <__divsf3_pse+0x92>
 4ca:	fe 2f       	mov	r31, r30
 4cc:	29 d0       	rcall	.+82     	; 0x520 <__divsf3_pse+0x92>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	bb 1f       	adc	r27, r27
 4d6:	26 17       	cp	r18, r22
 4d8:	37 07       	cpc	r19, r23
 4da:	48 07       	cpc	r20, r24
 4dc:	ab 07       	cpc	r26, r27
 4de:	b0 e8       	ldi	r27, 0x80	; 128
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__divsf3_pse+0x56>
 4e2:	bb 0b       	sbc	r27, r27
 4e4:	80 2d       	mov	r24, r0
 4e6:	bf 01       	movw	r22, r30
 4e8:	ff 27       	eor	r31, r31
 4ea:	93 58       	subi	r25, 0x83	; 131
 4ec:	5f 4f       	sbci	r21, 0xFF	; 255
 4ee:	3a f0       	brmi	.+14     	; 0x4fe <__divsf3_pse+0x70>
 4f0:	9e 3f       	cpi	r25, 0xFE	; 254
 4f2:	51 05       	cpc	r21, r1
 4f4:	78 f0       	brcs	.+30     	; 0x514 <__divsf3_pse+0x86>
 4f6:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_inf>
 4fa:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_szero>
 4fe:	5f 3f       	cpi	r21, 0xFF	; 255
 500:	e4 f3       	brlt	.-8      	; 0x4fa <__divsf3_pse+0x6c>
 502:	98 3e       	cpi	r25, 0xE8	; 232
 504:	d4 f3       	brlt	.-12     	; 0x4fa <__divsf3_pse+0x6c>
 506:	86 95       	lsr	r24
 508:	77 95       	ror	r23
 50a:	67 95       	ror	r22
 50c:	b7 95       	ror	r27
 50e:	f7 95       	ror	r31
 510:	9f 5f       	subi	r25, 0xFF	; 255
 512:	c9 f7       	brne	.-14     	; 0x506 <__divsf3_pse+0x78>
 514:	88 0f       	add	r24, r24
 516:	91 1d       	adc	r25, r1
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
 51c:	97 f9       	bld	r25, 7
 51e:	08 95       	ret
 520:	e1 e0       	ldi	r30, 0x01	; 1
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	bb 1f       	adc	r27, r27
 52a:	62 17       	cp	r22, r18
 52c:	73 07       	cpc	r23, r19
 52e:	84 07       	cpc	r24, r20
 530:	ba 07       	cpc	r27, r26
 532:	20 f0       	brcs	.+8      	; 0x53c <__divsf3_pse+0xae>
 534:	62 1b       	sub	r22, r18
 536:	73 0b       	sbc	r23, r19
 538:	84 0b       	sbc	r24, r20
 53a:	ba 0b       	sbc	r27, r26
 53c:	ee 1f       	adc	r30, r30
 53e:	88 f7       	brcc	.-30     	; 0x522 <__divsf3_pse+0x94>
 540:	e0 95       	com	r30
 542:	08 95       	ret

00000544 <__fixsfsi>:
 544:	0e 94 a9 02 	call	0x552	; 0x552 <__fixunssfsi>
 548:	68 94       	set
 54a:	b1 11       	cpse	r27, r1
 54c:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_szero>
 550:	08 95       	ret

00000552 <__fixunssfsi>:
 552:	0e 94 45 03 	call	0x68a	; 0x68a <__fp_splitA>
 556:	88 f0       	brcs	.+34     	; 0x57a <__fixunssfsi+0x28>
 558:	9f 57       	subi	r25, 0x7F	; 127
 55a:	98 f0       	brcs	.+38     	; 0x582 <__fixunssfsi+0x30>
 55c:	b9 2f       	mov	r27, r25
 55e:	99 27       	eor	r25, r25
 560:	b7 51       	subi	r27, 0x17	; 23
 562:	b0 f0       	brcs	.+44     	; 0x590 <__fixunssfsi+0x3e>
 564:	e1 f0       	breq	.+56     	; 0x59e <__fixunssfsi+0x4c>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a f0       	brmi	.+6      	; 0x576 <__fixunssfsi+0x24>
 570:	ba 95       	dec	r27
 572:	c9 f7       	brne	.-14     	; 0x566 <__fixunssfsi+0x14>
 574:	14 c0       	rjmp	.+40     	; 0x59e <__fixunssfsi+0x4c>
 576:	b1 30       	cpi	r27, 0x01	; 1
 578:	91 f0       	breq	.+36     	; 0x59e <__fixunssfsi+0x4c>
 57a:	0e 94 5f 03 	call	0x6be	; 0x6be <__fp_zero>
 57e:	b1 e0       	ldi	r27, 0x01	; 1
 580:	08 95       	ret
 582:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_zero>
 586:	67 2f       	mov	r22, r23
 588:	78 2f       	mov	r23, r24
 58a:	88 27       	eor	r24, r24
 58c:	b8 5f       	subi	r27, 0xF8	; 248
 58e:	39 f0       	breq	.+14     	; 0x59e <__fixunssfsi+0x4c>
 590:	b9 3f       	cpi	r27, 0xF9	; 249
 592:	cc f3       	brlt	.-14     	; 0x586 <__fixunssfsi+0x34>
 594:	86 95       	lsr	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b3 95       	inc	r27
 59c:	d9 f7       	brne	.-10     	; 0x594 <__fixunssfsi+0x42>
 59e:	3e f4       	brtc	.+14     	; 0x5ae <__fixunssfsi+0x5c>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <__floatunsisf>:
 5b0:	e8 94       	clt
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <__floatsisf+0x12>

000005b4 <__floatsisf>:
 5b4:	97 fb       	bst	r25, 7
 5b6:	3e f4       	brtc	.+14     	; 0x5c6 <__floatsisf+0x12>
 5b8:	90 95       	com	r25
 5ba:	80 95       	com	r24
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	99 23       	and	r25, r25
 5c8:	a9 f0       	breq	.+42     	; 0x5f4 <__floatsisf+0x40>
 5ca:	f9 2f       	mov	r31, r25
 5cc:	96 e9       	ldi	r25, 0x96	; 150
 5ce:	bb 27       	eor	r27, r27
 5d0:	93 95       	inc	r25
 5d2:	f6 95       	lsr	r31
 5d4:	87 95       	ror	r24
 5d6:	77 95       	ror	r23
 5d8:	67 95       	ror	r22
 5da:	b7 95       	ror	r27
 5dc:	f1 11       	cpse	r31, r1
 5de:	f8 cf       	rjmp	.-16     	; 0x5d0 <__floatsisf+0x1c>
 5e0:	fa f4       	brpl	.+62     	; 0x620 <__floatsisf+0x6c>
 5e2:	bb 0f       	add	r27, r27
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__floatsisf+0x36>
 5e6:	60 ff       	sbrs	r22, 0
 5e8:	1b c0       	rjmp	.+54     	; 0x620 <__floatsisf+0x6c>
 5ea:	6f 5f       	subi	r22, 0xFF	; 255
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <__floatsisf+0x6c>
 5f4:	88 23       	and	r24, r24
 5f6:	11 f0       	breq	.+4      	; 0x5fc <__floatsisf+0x48>
 5f8:	96 e9       	ldi	r25, 0x96	; 150
 5fa:	11 c0       	rjmp	.+34     	; 0x61e <__floatsisf+0x6a>
 5fc:	77 23       	and	r23, r23
 5fe:	21 f0       	breq	.+8      	; 0x608 <__floatsisf+0x54>
 600:	9e e8       	ldi	r25, 0x8E	; 142
 602:	87 2f       	mov	r24, r23
 604:	76 2f       	mov	r23, r22
 606:	05 c0       	rjmp	.+10     	; 0x612 <__floatsisf+0x5e>
 608:	66 23       	and	r22, r22
 60a:	71 f0       	breq	.+28     	; 0x628 <__floatsisf+0x74>
 60c:	96 e8       	ldi	r25, 0x86	; 134
 60e:	86 2f       	mov	r24, r22
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	2a f0       	brmi	.+10     	; 0x620 <__floatsisf+0x6c>
 616:	9a 95       	dec	r25
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	da f7       	brpl	.-10     	; 0x616 <__floatsisf+0x62>
 620:	88 0f       	add	r24, r24
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__fp_inf>:
 62a:	97 f9       	bld	r25, 7
 62c:	9f 67       	ori	r25, 0x7F	; 127
 62e:	80 e8       	ldi	r24, 0x80	; 128
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	08 95       	ret

00000636 <__fp_nan>:
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	80 ec       	ldi	r24, 0xC0	; 192
 63a:	08 95       	ret

0000063c <__fp_pscA>:
 63c:	00 24       	eor	r0, r0
 63e:	0a 94       	dec	r0
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	09 06       	cpc	r0, r25
 648:	08 95       	ret

0000064a <__fp_pscB>:
 64a:	00 24       	eor	r0, r0
 64c:	0a 94       	dec	r0
 64e:	12 16       	cp	r1, r18
 650:	13 06       	cpc	r1, r19
 652:	14 06       	cpc	r1, r20
 654:	05 06       	cpc	r0, r21
 656:	08 95       	ret

00000658 <__fp_round>:
 658:	09 2e       	mov	r0, r25
 65a:	03 94       	inc	r0
 65c:	00 0c       	add	r0, r0
 65e:	11 f4       	brne	.+4      	; 0x664 <__fp_round+0xc>
 660:	88 23       	and	r24, r24
 662:	52 f0       	brmi	.+20     	; 0x678 <__fp_round+0x20>
 664:	bb 0f       	add	r27, r27
 666:	40 f4       	brcc	.+16     	; 0x678 <__fp_round+0x20>
 668:	bf 2b       	or	r27, r31
 66a:	11 f4       	brne	.+4      	; 0x670 <__fp_round+0x18>
 66c:	60 ff       	sbrs	r22, 0
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__fp_round+0x20>
 670:	6f 5f       	subi	r22, 0xFF	; 255
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	08 95       	ret

0000067a <__fp_split3>:
 67a:	57 fd       	sbrc	r21, 7
 67c:	90 58       	subi	r25, 0x80	; 128
 67e:	44 0f       	add	r20, r20
 680:	55 1f       	adc	r21, r21
 682:	59 f0       	breq	.+22     	; 0x69a <__fp_splitA+0x10>
 684:	5f 3f       	cpi	r21, 0xFF	; 255
 686:	71 f0       	breq	.+28     	; 0x6a4 <__fp_splitA+0x1a>
 688:	47 95       	ror	r20

0000068a <__fp_splitA>:
 68a:	88 0f       	add	r24, r24
 68c:	97 fb       	bst	r25, 7
 68e:	99 1f       	adc	r25, r25
 690:	61 f0       	breq	.+24     	; 0x6aa <__fp_splitA+0x20>
 692:	9f 3f       	cpi	r25, 0xFF	; 255
 694:	79 f0       	breq	.+30     	; 0x6b4 <__fp_splitA+0x2a>
 696:	87 95       	ror	r24
 698:	08 95       	ret
 69a:	12 16       	cp	r1, r18
 69c:	13 06       	cpc	r1, r19
 69e:	14 06       	cpc	r1, r20
 6a0:	55 1f       	adc	r21, r21
 6a2:	f2 cf       	rjmp	.-28     	; 0x688 <__fp_split3+0xe>
 6a4:	46 95       	lsr	r20
 6a6:	f1 df       	rcall	.-30     	; 0x68a <__fp_splitA>
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <__fp_splitA+0x30>
 6aa:	16 16       	cp	r1, r22
 6ac:	17 06       	cpc	r1, r23
 6ae:	18 06       	cpc	r1, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	f1 cf       	rjmp	.-30     	; 0x696 <__fp_splitA+0xc>
 6b4:	86 95       	lsr	r24
 6b6:	71 05       	cpc	r23, r1
 6b8:	61 05       	cpc	r22, r1
 6ba:	08 94       	sec
 6bc:	08 95       	ret

000006be <__fp_zero>:
 6be:	e8 94       	clt

000006c0 <__fp_szero>:
 6c0:	bb 27       	eor	r27, r27
 6c2:	66 27       	eor	r22, r22
 6c4:	77 27       	eor	r23, r23
 6c6:	cb 01       	movw	r24, r22
 6c8:	97 f9       	bld	r25, 7
 6ca:	08 95       	ret

000006cc <__gesf2>:
 6cc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_cmp>
 6d0:	08 f4       	brcc	.+2      	; 0x6d4 <__gesf2+0x8>
 6d2:	8f ef       	ldi	r24, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__mulsf3>:
 6d6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__mulsf3x>
 6da:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_round>
 6de:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscA>
 6e2:	38 f0       	brcs	.+14     	; 0x6f2 <__mulsf3+0x1c>
 6e4:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscB>
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__mulsf3+0x1c>
 6ea:	95 23       	and	r25, r21
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <__mulsf3+0x1c>
 6ee:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_inf>
 6f2:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_nan>
 6f6:	11 24       	eor	r1, r1
 6f8:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_szero>

000006fc <__mulsf3x>:
 6fc:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_split3>
 700:	70 f3       	brcs	.-36     	; 0x6de <__mulsf3+0x8>

00000702 <__mulsf3_pse>:
 702:	95 9f       	mul	r25, r21
 704:	c1 f3       	breq	.-16     	; 0x6f6 <__mulsf3+0x20>
 706:	95 0f       	add	r25, r21
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	55 1f       	adc	r21, r21
 70c:	62 9f       	mul	r22, r18
 70e:	f0 01       	movw	r30, r0
 710:	72 9f       	mul	r23, r18
 712:	bb 27       	eor	r27, r27
 714:	f0 0d       	add	r31, r0
 716:	b1 1d       	adc	r27, r1
 718:	63 9f       	mul	r22, r19
 71a:	aa 27       	eor	r26, r26
 71c:	f0 0d       	add	r31, r0
 71e:	b1 1d       	adc	r27, r1
 720:	aa 1f       	adc	r26, r26
 722:	64 9f       	mul	r22, r20
 724:	66 27       	eor	r22, r22
 726:	b0 0d       	add	r27, r0
 728:	a1 1d       	adc	r26, r1
 72a:	66 1f       	adc	r22, r22
 72c:	82 9f       	mul	r24, r18
 72e:	22 27       	eor	r18, r18
 730:	b0 0d       	add	r27, r0
 732:	a1 1d       	adc	r26, r1
 734:	62 1f       	adc	r22, r18
 736:	73 9f       	mul	r23, r19
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	62 1f       	adc	r22, r18
 73e:	83 9f       	mul	r24, r19
 740:	a0 0d       	add	r26, r0
 742:	61 1d       	adc	r22, r1
 744:	22 1f       	adc	r18, r18
 746:	74 9f       	mul	r23, r20
 748:	33 27       	eor	r19, r19
 74a:	a0 0d       	add	r26, r0
 74c:	61 1d       	adc	r22, r1
 74e:	23 1f       	adc	r18, r19
 750:	84 9f       	mul	r24, r20
 752:	60 0d       	add	r22, r0
 754:	21 1d       	adc	r18, r1
 756:	82 2f       	mov	r24, r18
 758:	76 2f       	mov	r23, r22
 75a:	6a 2f       	mov	r22, r26
 75c:	11 24       	eor	r1, r1
 75e:	9f 57       	subi	r25, 0x7F	; 127
 760:	50 40       	sbci	r21, 0x00	; 0
 762:	9a f0       	brmi	.+38     	; 0x78a <__mulsf3_pse+0x88>
 764:	f1 f0       	breq	.+60     	; 0x7a2 <__mulsf3_pse+0xa0>
 766:	88 23       	and	r24, r24
 768:	4a f0       	brmi	.+18     	; 0x77c <__mulsf3_pse+0x7a>
 76a:	ee 0f       	add	r30, r30
 76c:	ff 1f       	adc	r31, r31
 76e:	bb 1f       	adc	r27, r27
 770:	66 1f       	adc	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	91 50       	subi	r25, 0x01	; 1
 778:	50 40       	sbci	r21, 0x00	; 0
 77a:	a9 f7       	brne	.-22     	; 0x766 <__mulsf3_pse+0x64>
 77c:	9e 3f       	cpi	r25, 0xFE	; 254
 77e:	51 05       	cpc	r21, r1
 780:	80 f0       	brcs	.+32     	; 0x7a2 <__mulsf3_pse+0xa0>
 782:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_inf>
 786:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_szero>
 78a:	5f 3f       	cpi	r21, 0xFF	; 255
 78c:	e4 f3       	brlt	.-8      	; 0x786 <__mulsf3_pse+0x84>
 78e:	98 3e       	cpi	r25, 0xE8	; 232
 790:	d4 f3       	brlt	.-12     	; 0x786 <__mulsf3_pse+0x84>
 792:	86 95       	lsr	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b7 95       	ror	r27
 79a:	f7 95       	ror	r31
 79c:	e7 95       	ror	r30
 79e:	9f 5f       	subi	r25, 0xFF	; 255
 7a0:	c1 f7       	brne	.-16     	; 0x792 <__mulsf3_pse+0x90>
 7a2:	fe 2b       	or	r31, r30
 7a4:	88 0f       	add	r24, r24
 7a6:	91 1d       	adc	r25, r1
 7a8:	96 95       	lsr	r25
 7aa:	87 95       	ror	r24
 7ac:	97 f9       	bld	r25, 7
 7ae:	08 95       	ret

000007b0 <__fp_cmp>:
 7b0:	99 0f       	add	r25, r25
 7b2:	00 08       	sbc	r0, r0
 7b4:	55 0f       	add	r21, r21
 7b6:	aa 0b       	sbc	r26, r26
 7b8:	e0 e8       	ldi	r30, 0x80	; 128
 7ba:	fe ef       	ldi	r31, 0xFE	; 254
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	e8 07       	cpc	r30, r24
 7c2:	f9 07       	cpc	r31, r25
 7c4:	c0 f0       	brcs	.+48     	; 0x7f6 <__fp_cmp+0x46>
 7c6:	12 16       	cp	r1, r18
 7c8:	13 06       	cpc	r1, r19
 7ca:	e4 07       	cpc	r30, r20
 7cc:	f5 07       	cpc	r31, r21
 7ce:	98 f0       	brcs	.+38     	; 0x7f6 <__fp_cmp+0x46>
 7d0:	62 1b       	sub	r22, r18
 7d2:	73 0b       	sbc	r23, r19
 7d4:	84 0b       	sbc	r24, r20
 7d6:	95 0b       	sbc	r25, r21
 7d8:	39 f4       	brne	.+14     	; 0x7e8 <__fp_cmp+0x38>
 7da:	0a 26       	eor	r0, r26
 7dc:	61 f0       	breq	.+24     	; 0x7f6 <__fp_cmp+0x46>
 7de:	23 2b       	or	r18, r19
 7e0:	24 2b       	or	r18, r20
 7e2:	25 2b       	or	r18, r21
 7e4:	21 f4       	brne	.+8      	; 0x7ee <__fp_cmp+0x3e>
 7e6:	08 95       	ret
 7e8:	0a 26       	eor	r0, r26
 7ea:	09 f4       	brne	.+2      	; 0x7ee <__fp_cmp+0x3e>
 7ec:	a1 40       	sbci	r26, 0x01	; 1
 7ee:	a6 95       	lsr	r26
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	81 1d       	adc	r24, r1
 7f4:	81 1d       	adc	r24, r1
 7f6:	08 95       	ret

000007f8 <__udivmodsi4>:
 7f8:	a1 e2       	ldi	r26, 0x21	; 33
 7fa:	1a 2e       	mov	r1, r26
 7fc:	aa 1b       	sub	r26, r26
 7fe:	bb 1b       	sub	r27, r27
 800:	fd 01       	movw	r30, r26
 802:	0d c0       	rjmp	.+26     	; 0x81e <__udivmodsi4_ep>

00000804 <__udivmodsi4_loop>:
 804:	aa 1f       	adc	r26, r26
 806:	bb 1f       	adc	r27, r27
 808:	ee 1f       	adc	r30, r30
 80a:	ff 1f       	adc	r31, r31
 80c:	a2 17       	cp	r26, r18
 80e:	b3 07       	cpc	r27, r19
 810:	e4 07       	cpc	r30, r20
 812:	f5 07       	cpc	r31, r21
 814:	20 f0       	brcs	.+8      	; 0x81e <__udivmodsi4_ep>
 816:	a2 1b       	sub	r26, r18
 818:	b3 0b       	sbc	r27, r19
 81a:	e4 0b       	sbc	r30, r20
 81c:	f5 0b       	sbc	r31, r21

0000081e <__udivmodsi4_ep>:
 81e:	66 1f       	adc	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	1a 94       	dec	r1
 828:	69 f7       	brne	.-38     	; 0x804 <__udivmodsi4_loop>
 82a:	60 95       	com	r22
 82c:	70 95       	com	r23
 82e:	80 95       	com	r24
 830:	90 95       	com	r25
 832:	9b 01       	movw	r18, r22
 834:	ac 01       	movw	r20, r24
 836:	bd 01       	movw	r22, r26
 838:	cf 01       	movw	r24, r30
 83a:	08 95       	ret

0000083c <eeprom_write_byte>:
 83c:	26 2f       	mov	r18, r22

0000083e <eeprom_write_r18>:
 83e:	f9 99       	sbic	0x1f, 1	; 31
 840:	fe cf       	rjmp	.-4      	; 0x83e <eeprom_write_r18>
 842:	92 bd       	out	0x22, r25	; 34
 844:	81 bd       	out	0x21, r24	; 33
 846:	20 bd       	out	0x20, r18	; 32
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	fa 9a       	sbi	0x1f, 2	; 31
 84e:	f9 9a       	sbi	0x1f, 1	; 31
 850:	0f be       	out	0x3f, r0	; 63
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	08 95       	ret

00000856 <_exit>:
 856:	f8 94       	cli

00000858 <__stop_program>:
 858:	ff cf       	rjmp	.-2      	; 0x858 <__stop_program>
