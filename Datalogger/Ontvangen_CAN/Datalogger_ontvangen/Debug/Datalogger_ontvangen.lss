
Datalogger_ontvangen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000107  00800100  00800100  00000446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc5  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c97  00000000  00000000  000014e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000667  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000470  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a7 30       	cpi	r26, 0x07	; 7
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 92 01 	call	0x324	; 0x324 <main>
  b4:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <initCAN>:

	// Set the MOb's mode to receive, also activating it.
	CANCDMOB |= (0x02 << CONMOB0);

	return 1;
}
  bc:	e8 ed       	ldi	r30, 0xD8	; 216
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
  d2:	83 e1       	ldi	r24, 0x13	; 19
  d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <initCAN+0x30>
  dc:	98 2f       	mov	r25, r24
  de:	92 95       	swap	r25
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
  e6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	b0 f3       	brcs	.-20     	; 0xdc <initCAN+0x20>
  f0:	78 94       	sei
  f2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
  f6:	80 eb       	ldi	r24, 0xB0	; 176
  f8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
  fc:	e8 ed       	ldi	r30, 0xD8	; 216
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <getMessage>:
 * @param[out] message - message data to fill
 * @return 1 if message was filled, 0 otherwise
 *
 */
uint8_t getMessage( CANMessage * message )
{
 108:	dc 01       	movw	r26, r24
	// Default to no message available
	uint8_t messageAvailable = 0;

	if( serviceIndex != bufIndex )
 10a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <serviceIndex>
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufIndex>
 112:	e8 17       	cp	r30, r24
 114:	09 f4       	brne	.+2      	; 0x118 <getMessage+0x10>
 116:	49 c0       	rjmp	.+146    	; 0x1aa <getMessage+0xa2>
	{
		// Load the data from the next message received in FIFO order into the out message
		message->id = messageBuffer[ serviceIndex ].id;
 118:	2d e0       	ldi	r18, 0x0D	; 13
 11a:	2e 9f       	mul	r18, r30
 11c:	f0 01       	movw	r30, r0
 11e:	11 24       	eor	r1, r1
 120:	ed 5f       	subi	r30, 0xFD	; 253
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	50 81       	ld	r21, Z
 126:	41 81       	ldd	r20, Z+1	; 0x01
 128:	32 81       	ldd	r19, Z+2	; 0x02
 12a:	83 81       	ldd	r24, Z+3	; 0x03
 12c:	98 2f       	mov	r25, r24
 12e:	9f 71       	andi	r25, 0x1F	; 31
 130:	5c 93       	st	X, r21
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	4c 93       	st	X, r20
 136:	11 97       	sbiw	r26, 0x01	; 1
 138:	12 96       	adiw	r26, 0x02	; 2
 13a:	3c 93       	st	X, r19
 13c:	12 97       	sbiw	r26, 0x02	; 2
 13e:	13 96       	adiw	r26, 0x03	; 3
 140:	8c 91       	ld	r24, X
 142:	13 97       	sbiw	r26, 0x03	; 3
 144:	80 7e       	andi	r24, 0xE0	; 224
 146:	89 2b       	or	r24, r25
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	8c 93       	st	X, r24
 14c:	13 97       	sbiw	r26, 0x03	; 3
		message->length = messageBuffer[ serviceIndex ].length;
 14e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <serviceIndex>
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	26 9f       	mul	r18, r22
 156:	f0 01       	movw	r30, r0
 158:	27 9f       	mul	r18, r23
 15a:	f0 0d       	add	r31, r0
 15c:	11 24       	eor	r1, r1
 15e:	ed 5f       	subi	r30, 0xFD	; 253
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	84 85       	ldd	r24, Z+12	; 0x0c
 164:	1c 96       	adiw	r26, 0x0c	; 12
 166:	8c 93       	st	X, r24
 168:	1c 97       	sbiw	r26, 0x0c	; 12

		for( uint8_t i = 0; i < message->length; ++i )
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	12 c0       	rjmp	.+36     	; 0x192 <getMessage+0x8a>
		{
			message->data[ i ] = messageBuffer[ serviceIndex ].data[ i ];
 16e:	29 2f       	mov	r18, r25
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	4d e0       	ldi	r20, 0x0D	; 13
 174:	46 9f       	mul	r20, r22
 176:	f0 01       	movw	r30, r0
 178:	47 9f       	mul	r20, r23
 17a:	f0 0d       	add	r31, r0
 17c:	11 24       	eor	r1, r1
 17e:	ed 5f       	subi	r30, 0xFD	; 253
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	e2 0f       	add	r30, r18
 184:	f3 1f       	adc	r31, r19
 186:	44 81       	ldd	r20, Z+4	; 0x04
 188:	fd 01       	movw	r30, r26
 18a:	e2 0f       	add	r30, r18
 18c:	f3 1f       	adc	r31, r19
 18e:	44 83       	std	Z+4, r20	; 0x04
	{
		// Load the data from the next message received in FIFO order into the out message
		message->id = messageBuffer[ serviceIndex ].id;
		message->length = messageBuffer[ serviceIndex ].length;

		for( uint8_t i = 0; i < message->length; ++i )
 190:	9f 5f       	subi	r25, 0xFF	; 255
 192:	98 17       	cp	r25, r24
 194:	60 f3       	brcs	.-40     	; 0x16e <getMessage+0x66>
		{
			message->data[ i ] = messageBuffer[ serviceIndex ].data[ i ];
		}

		// Increment the index pointing to the next message to be serviced
		serviceIndex = (serviceIndex + 1) % MESSAGE_BUFFER_LENGTH;
 196:	cb 01       	movw	r24, r22
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	64 e1       	ldi	r22, 0x14	; 20
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 bf 01 	call	0x37e	; 0x37e <__divmodhi4>
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <serviceIndex>

		messageAvailable = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
 *
 */
uint8_t getMessage( CANMessage * message )
{
	// Default to no message available
	uint8_t messageAvailable = 0;
 1aa:	80 e0       	ldi	r24, 0x00	; 0

		messageAvailable = 1;
	}

	return messageAvailable;
}
 1ac:	08 95       	ret

000001ae <__vector_18>:
 * Note that the NO_BLOCK attribute is not applied here, so while this is running,
 * all interrupts are blocked.
 *
 */
ISR( CANIT_vect )
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	cf 93       	push	r28
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	// **Save off CANPAGE to prevent application code bugs**
	uint8_t canPage = CANPAGE;
 1d2:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 1d6:	8b c0       	rjmp	.+278    	; 0x2ee <__vector_18+0x140>
	{
		// Point to the Message Object that needs to be serviced
		CANPAGE = CANHPMOB & 0xF0;
 1d8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

		// Service the correct kind of interrupt
		// Transmit Interrupts
		if( CANSTMOB & (1 << TXOK) )
 1e2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
 1e6:	86 ff       	sbrs	r24, 6
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <__vector_18+0x54>
		{
			// Acknowledge the interrupt
			CANSTMOB = 0;
 1ea:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			// Free up the MOb
			CANCDMOB = 0;
 1ee:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

			// Determine the MOb index
			uint8_t mob = (CANPAGE & 0xF0) >> 8;
 1f2:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

			// Disable interrupts for this MOb
			if( mob < 8 )
			{
				CANIE2 &= ~(1 << mob);
 1f6:	ee ed       	ldi	r30, 0xDE	; 222
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8e 7f       	andi	r24, 0xFE	; 254
 1fe:	80 83       	st	Z, r24
 200:	76 c0       	rjmp	.+236    	; 0x2ee <__vector_18+0x140>
			{
				CANIE1 &= ~(1 << (mob-8));
			}
		}
		// Receive Interrupts
		else if ( CANSTMOB & (1 << RXOK) )
 202:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
 206:	85 ff       	sbrs	r24, 5
 208:	66 c0       	rjmp	.+204    	; 0x2d6 <__vector_18+0x128>
		{
			// Default to impossible ID
			uint16_t id = 0xFFFF;

			// Load the message data into a free message buffer object
			if( CANCDMOB & (1 << IDE) )
 20a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 20e:	84 ff       	sbrs	r24, 4
 210:	0e c0       	rjmp	.+28     	; 0x22e <__vector_18+0x80>
			{
				// Message type is CAN 2.0B
				id = (CANIDT4 >> 3) | ((CANIDT3 & 0x7F) << 5); 
 212:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
 216:	26 95       	lsr	r18
 218:	26 95       	lsr	r18
 21a:	26 95       	lsr	r18
 21c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
 220:	8f 77       	andi	r24, 0x7F	; 127
 222:	30 e2       	ldi	r19, 0x20	; 32
 224:	83 9f       	mul	r24, r19
 226:	c0 01       	movw	r24, r0
 228:	11 24       	eor	r1, r1
 22a:	82 2b       	or	r24, r18
 22c:	0f c0       	rjmp	.+30     	; 0x24c <__vector_18+0x9e>
			}
			else
			{
				// Message type is CAN 2.0A
				id = (CANIDT2 >> 5) | (((uint16_t)CANIDT1 << 3));
 22e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
 232:	22 95       	swap	r18
 234:	26 95       	lsr	r18
 236:	27 70       	andi	r18, 0x07	; 7
 238:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	82 2b       	or	r24, r18
			}

			messageBuffer[bufIndex].id = id;
 24c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bufIndex>
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	4d e0       	ldi	r20, 0x0D	; 13
 254:	42 9f       	mul	r20, r18
 256:	f0 01       	movw	r30, r0
 258:	43 9f       	mul	r20, r19
 25a:	f0 0d       	add	r31, r0
 25c:	11 24       	eor	r1, r1
 25e:	ed 5f       	subi	r30, 0xFD	; 253
 260:	fe 4f       	sbci	r31, 0xFE	; 254
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	80 83       	st	Z, r24
 268:	91 83       	std	Z+1, r25	; 0x01
 26a:	a2 83       	std	Z+2, r26	; 0x02
 26c:	9b 2f       	mov	r25, r27
 26e:	9f 71       	andi	r25, 0x1F	; 31
 270:	83 81       	ldd	r24, Z+3	; 0x03
 272:	80 7e       	andi	r24, 0xE0	; 224
 274:	89 2b       	or	r24, r25
 276:	83 83       	std	Z+3, r24	; 0x03

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;
 278:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	84 87       	std	Z+12, r24	; 0x0c

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <__vector_18+0xf2>
			{
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
 284:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
 288:	4d e0       	ldi	r20, 0x0D	; 13
 28a:	42 9f       	mul	r20, r18
 28c:	f0 01       	movw	r30, r0
 28e:	43 9f       	mul	r20, r19
 290:	f0 0d       	add	r31, r0
 292:	11 24       	eor	r1, r1
 294:	ed 5f       	subi	r30, 0xFD	; 253
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	e9 0f       	add	r30, r25
 29a:	f1 1d       	adc	r31, r1
 29c:	84 83       	std	Z+4, r24	; 0x04
			messageBuffer[bufIndex].id = id;

			messageBuffer[bufIndex].length = CANCDMOB & 0x0F;

			// This trusts the length field in CANCDMOB is between 1 and 8...
			for( uint8_t i = 0; i < messageBuffer[bufIndex].length; ++i )
 29e:	9f 5f       	subi	r25, 0xFF	; 255
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	82 9f       	mul	r24, r18
 2a4:	f0 01       	movw	r30, r0
 2a6:	83 9f       	mul	r24, r19
 2a8:	f0 0d       	add	r31, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	ed 5f       	subi	r30, 0xFD	; 253
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	84 85       	ldd	r24, Z+12	; 0x0c
 2b2:	98 17       	cp	r25, r24
 2b4:	38 f3       	brcs	.-50     	; 0x284 <__vector_18+0xd6>
				// Load the next byte from the MOb data register into the buffer
				// CANMSG is set to auto increment to the next byte after each read
				messageBuffer[bufIndex].data[i] = CANMSG;
			}

			bufIndex = (bufIndex + 1) % MESSAGE_BUFFER_LENGTH;
 2b6:	c9 01       	movw	r24, r18
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	64 e1       	ldi	r22, 0x14	; 20
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	0e 94 bf 01 	call	0x37e	; 0x37e <__divmodhi4>
 2c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufIndex>

			// Acknowledge the interrupt
			CANSTMOB = 0;
 2c6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

			CANCDMOB |= (2 << CONMOB0);
 2ca:	ef ee       	ldi	r30, 0xEF	; 239
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	80 83       	st	Z, r24
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <__vector_18+0x140>
			
		}
		else if ( CANGIT & ~(1 << CANIT) )
 2d6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	8f 77       	andi	r24, 0x7F	; 127
 2de:	89 2b       	or	r24, r25
 2e0:	31 f0       	breq	.+12     	; 0x2ee <__vector_18+0x140>
		{
			// Preserve the last error received
			lastError = CANGIT;
 2e2:	ea ed       	ldi	r30, 0xDA	; 218
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			// Clear the error
			CANGIT = 0;
 2ec:	10 82       	st	Z, r1
	uint8_t canPage = CANPAGE;

	// CANHPMOB will contain the mob index of the highest priority mob that has interrupted,
	// or 0xFF if no mob has interrupted. If multiple mobs have interrupted, they need to all be
	// serviced, so this loop is required.
	while( ((CANHPMOB & 0xF0) >> 4) != 0x0F )
 2ee:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f00ec>
 2f2:	82 95       	swap	r24
 2f4:	8f 70       	andi	r24, 0x0F	; 15
 2f6:	8f 30       	cpi	r24, 0x0F	; 15
 2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_18+0x14e>
 2fa:	6e cf       	rjmp	.-292    	; 0x1d8 <__vector_18+0x2a>
			CANGIT = 0;
		}
	}

	// Restore CANPAGE register to where application code had it before interrupt
	CANPAGE = canPage;
 2fc:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	cf 91       	pop	r28
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <main>:

#define CAN_ID_ARDUINO 0x778


int main(void)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	2d 97       	sbiw	r28, 0x0d	; 13
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
   CANMessage rx_message; 
  // uint8_t result; 
   
    DDRC |= (1<<PC0);
 338:	87 b1       	in	r24, 0x07	; 7
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	87 b9       	out	0x07, r24	; 7
	initCAN(); 
 33e:	0e 94 5e 00 	call	0xbc	; 0xbc <initCAN>
    while (1) 
    {
		
		//result = listenForMessage(CAN_ID_ARDUINO, 8); 			
			
	if (getMessage(&rx_message)) {
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 84 00 	call	0x108	; 0x108 <getMessage>
 34a:	88 23       	and	r24, r24
 34c:	d1 f3       	breq	.-12     	; 0x342 <main+0x1e>
		 if (rx_message.id == CAN_ID_ARDUINO) {
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	9a 81       	ldd	r25, Y+2	; 0x02
 352:	ab 81       	ldd	r26, Y+3	; 0x03
 354:	2c 81       	ldd	r18, Y+4	; 0x04
 356:	b2 2f       	mov	r27, r18
 358:	bf 71       	andi	r27, 0x1F	; 31
 35a:	88 37       	cpi	r24, 0x78	; 120
 35c:	97 40       	sbci	r25, 0x07	; 7
 35e:	a1 05       	cpc	r26, r1
 360:	b1 05       	cpc	r27, r1
 362:	19 f4       	brne	.+6      	; 0x36a <main+0x46>
			 PORTC |= (1<<PC0);
 364:	88 b1       	in	r24, 0x08	; 8
 366:	81 60       	ori	r24, 0x01	; 1
 368:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	96 e8       	ldi	r25, 0x86	; 134
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	81 50       	subi	r24, 0x01	; 1
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	20 40       	sbci	r18, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x4c>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x56>
 37a:	00 00       	nop
 37c:	e2 cf       	rjmp	.-60     	; 0x342 <main+0x1e>

0000037e <__divmodhi4>:
 37e:	97 fb       	bst	r25, 7
 380:	07 2e       	mov	r0, r23
 382:	16 f4       	brtc	.+4      	; 0x388 <__divmodhi4+0xa>
 384:	00 94       	com	r0
 386:	07 d0       	rcall	.+14     	; 0x396 <__divmodhi4_neg1>
 388:	77 fd       	sbrc	r23, 7
 38a:	09 d0       	rcall	.+18     	; 0x39e <__divmodhi4_neg2>
 38c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodhi4>
 390:	07 fc       	sbrc	r0, 7
 392:	05 d0       	rcall	.+10     	; 0x39e <__divmodhi4_neg2>
 394:	3e f4       	brtc	.+14     	; 0x3a4 <__divmodhi4_exit>

00000396 <__divmodhi4_neg1>:
 396:	90 95       	com	r25
 398:	81 95       	neg	r24
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	08 95       	ret

0000039e <__divmodhi4_neg2>:
 39e:	70 95       	com	r23
 3a0:	61 95       	neg	r22
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255

000003a4 <__divmodhi4_exit>:
 3a4:	08 95       	ret

000003a6 <__udivmodhi4>:
 3a6:	aa 1b       	sub	r26, r26
 3a8:	bb 1b       	sub	r27, r27
 3aa:	51 e1       	ldi	r21, 0x11	; 17
 3ac:	07 c0       	rjmp	.+14     	; 0x3bc <__udivmodhi4_ep>

000003ae <__udivmodhi4_loop>:
 3ae:	aa 1f       	adc	r26, r26
 3b0:	bb 1f       	adc	r27, r27
 3b2:	a6 17       	cp	r26, r22
 3b4:	b7 07       	cpc	r27, r23
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <__udivmodhi4_ep>
 3b8:	a6 1b       	sub	r26, r22
 3ba:	b7 0b       	sbc	r27, r23

000003bc <__udivmodhi4_ep>:
 3bc:	88 1f       	adc	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	5a 95       	dec	r21
 3c2:	a9 f7       	brne	.-22     	; 0x3ae <__udivmodhi4_loop>
 3c4:	80 95       	com	r24
 3c6:	90 95       	com	r25
 3c8:	bc 01       	movw	r22, r24
 3ca:	cd 01       	movw	r24, r26
 3cc:	08 95       	ret

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
