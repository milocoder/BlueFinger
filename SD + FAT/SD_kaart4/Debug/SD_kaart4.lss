
SD_kaart4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000169a  0000172e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000169a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800114  00800114  00001742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002352  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef6  00000000  00000000  00003c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ae  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00005cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000811  00000000  00000000  0000616c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc5  00000000  00000000  0000697d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00008942  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea e9       	ldi	r30, 0x9A	; 154
      a8:	f6 e1       	ldi	r31, 0x16	; 22
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a4 31       	cpi	r26, 0x14	; 20
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	21 e0       	ldi	r18, 0x01	; 1
      b8:	a4 e1       	ldi	r26, 0x14	; 20
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	af 34       	cpi	r26, 0x4F	; 79
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 be 02 	call	0x57c	; 0x57c <main>
      ca:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_spi>:
//

static void init_spi(void)
{
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= ((1 << MOSI) | (1 << SCK) | (1 << CS));
      d2:	84 b1       	in	r24, 0x04	; 4
      d4:	87 60       	ori	r24, 0x07	; 7
      d6:	84 b9       	out	0x04, r24	; 4
	
	// enable pull up resistor in MISO
	PORTB |= (1 << MISO);
      d8:	85 b1       	in	r24, 0x05	; 5
      da:	88 60       	ori	r24, 0x08	; 8
      dc:	85 b9       	out	0x05, r24	; 5
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= ((1<<SPE) | (1<<MSTR) | (1<<SPR0));
      de:	8c b5       	in	r24, 0x2c	; 44
      e0:	81 65       	ori	r24, 0x51	; 81
      e2:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<CS); 				//hoog maken CS	
      e4:	85 b1       	in	r24, 0x05	; 5
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	85 b9       	out	0x05, r24	; 5
      ea:	08 95       	ret

000000ec <xmit_spi>:
}

static BYTE xmit_spi(BYTE data)
{
	PORTB &= ~(1<<CS); //laag maken
      ec:	95 b1       	in	r25, 0x05	; 5
      ee:	9e 7f       	andi	r25, 0xFE	; 254
      f0:	95 b9       	out	0x05, r25	; 5
	/* Start transmission */
	SPDR = data;
      f2:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <xmit_spi+0x8>
	PORTB |= (1<<CS);		//hoog maken CS
      fa:	85 b1       	in	r24, 0x05	; 5
      fc:	81 60       	ori	r24, 0x01	; 1
      fe:	85 b9       	out	0x05, r24	; 5
	
	return SPDR; 
     100:	8e b5       	in	r24, 0x2e	; 46
}
     102:	08 95       	ret

00000104 <rcv_spi>:

static BYTE rcv_spi(void)
{
	return xmit_spi(0xFF);
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
}
     10a:	08 95       	ret

0000010c <send_cmd>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static BYTE send_cmd(BYTE  cmd, /* 1st byte (Start + Index) */
                     DWORD arg ) /* Argument (32 bits) */
{
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	c8 2f       	mov	r28, r24
     118:	d4 2f       	mov	r29, r20
     11a:	15 2f       	mov	r17, r21
     11c:	06 2f       	mov	r16, r22
     11e:	f7 2e       	mov	r15, r23
	BYTE n, res;

	if (cmd & 0x80) { /* ACMD<n> is the command sequence of CMD55-CMD<n> */
     120:	88 23       	and	r24, r24
     122:	4c f4       	brge	.+18     	; 0x136 <send_cmd+0x2a>
		cmd &= 0x7F;
     124:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	ba 01       	movw	r22, r20
     12c:	87 e7       	ldi	r24, 0x77	; 119
     12e:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
		if (res > 1)
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	50 f5       	brcc	.+84     	; 0x18a <send_cmd+0x7e>
			return res;
	}

	/* Select the card */
	DESELECT();
     136:	85 b1       	in	r24, 0x05	; 5
     138:	81 60       	ori	r24, 0x01	; 1
     13a:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     13c:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	SELECT();
     140:	85 b1       	in	r24, 0x05	; 5
     142:	8e 7f       	andi	r24, 0xFE	; 254
     144:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     146:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);               /* Start + Command index */
     14a:	8c 2f       	mov	r24, r28
     14c:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
     150:	8f 2d       	mov	r24, r15
     152:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
     156:	80 2f       	mov	r24, r16
     158:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));  /* Argument[15..8] */
     15c:	81 2f       	mov	r24, r17
     15e:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	xmit_spi((BYTE)arg);         /* Argument[7..0] */
     162:	8d 2f       	mov	r24, r29
     164:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
	n = 0x01;                    /* Dummy CRC + Stop */
	if (cmd == CMD0)
     168:	c0 34       	cpi	r28, 0x40	; 64
     16a:	11 f0       	breq	.+4      	; 0x170 <send_cmd+0x64>
	xmit_spi(cmd);               /* Start + Command index */
	xmit_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));  /* Argument[15..8] */
	xmit_spi((BYTE)arg);         /* Argument[7..0] */
	n = 0x01;                    /* Dummy CRC + Stop */
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	01 c0       	rjmp	.+2      	; 0x172 <send_cmd+0x66>
	if (cmd == CMD0)
		n = 0x95; /* Valid CRC for CMD0(0) */
     170:	85 e9       	ldi	r24, 0x95	; 149
	if (cmd == CMD8)
     172:	c8 34       	cpi	r28, 0x48	; 72
     174:	09 f4       	brne	.+2      	; 0x178 <send_cmd+0x6c>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
     176:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
     178:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>

	/* Receive a command response */
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
     17c:	ca e0       	ldi	r28, 0x0A	; 10
	do {
		res = rcv_spi();
     17e:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	} while ((res & 0x80) && --n);
     182:	88 23       	and	r24, r24
     184:	14 f4       	brge	.+4      	; 0x18a <send_cmd+0x7e>
     186:	c1 50       	subi	r28, 0x01	; 1
     188:	d1 f7       	brne	.-12     	; 0x17e <send_cmd+0x72>

	return res; /* Return with the response value */
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	08 95       	ret

00000196 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(void)
{
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <disk_initialize+0xe>
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <disk_initialize+0x10>
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && SELECTING)
     1aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <CardType>
     1ae:	81 11       	cpse	r24, r1
     1b0:	84 b1       	in	r24, 0x04	; 4
		disk_writep(0, 0); /* Finalize write process if it is in progress */
	
#endif

	init_spi(); /* Initialize ports to control MMC */ 
     1b2:	0e 94 69 00 	call	0xd2	; 0xd2 <init_spi>
	DESELECT();
     1b6:	85 b1       	in	r24, 0x05	; 5
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	85 b9       	out	0x05, r24	; 5
	for (n = 10; n; n--)
     1bc:	1a e0       	ldi	r17, 0x0A	; 10
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <disk_initialize+0x30>
		rcv_spi(); /* 80 dummy clocks with CS=H */
     1c0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
	
#endif

	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
     1c4:	11 50       	subi	r17, 0x01	; 1
     1c6:	11 11       	cpse	r17, r1
     1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <disk_initialize+0x2a>
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) { 
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	ba 01       	movw	r22, r20
     1d0:	80 e4       	ldi	r24, 0x40	; 64
     1d2:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	09 f0       	breq	.+2      	; 0x1dc <disk_initialize+0x46>
     1da:	9b c0       	rjmp	.+310    	; 0x312 <disk_initialize+0x17c>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
     1dc:	4a ea       	ldi	r20, 0xAA	; 170
     1de:	51 e0       	ldi	r21, 0x01	; 1
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	88 e4       	ldi	r24, 0x48	; 72
     1e6:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <disk_initialize+0x5a>
     1ee:	59 c0       	rjmp	.+178    	; 0x2a2 <disk_initialize+0x10c>
     1f0:	0d c0       	rjmp	.+26     	; 0x20c <disk_initialize+0x76>
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
     1f2:	e0 2e       	mov	r14, r16
     1f4:	f1 2c       	mov	r15, r1
     1f6:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     1fa:	e1 e0       	ldi	r30, 0x01	; 1
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0d       	add	r30, r14
     204:	ff 1d       	adc	r31, r15
     206:	80 83       	st	Z, r24
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) { 
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
     208:	0f 5f       	subi	r16, 0xFF	; 255
     20a:	01 c0       	rjmp	.+2      	; 0x20e <disk_initialize+0x78>
     20c:	01 2f       	mov	r16, r17
     20e:	04 30       	cpi	r16, 0x04	; 4
     210:	80 f3       	brcs	.-32     	; 0x1f2 <disk_initialize+0x5c>
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	09 f0       	breq	.+2      	; 0x21a <disk_initialize+0x84>
     218:	7e c0       	rjmp	.+252    	; 0x316 <disk_initialize+0x180>
     21a:	8c 81       	ldd	r24, Y+4	; 0x04
     21c:	8a 3a       	cpi	r24, 0xAA	; 170
     21e:	61 f0       	breq	.+24     	; 0x238 <disk_initialize+0xa2>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     220:	f1 2c       	mov	r15, r1
     222:	84 c0       	rjmp	.+264    	; 0x32c <disk_initialize+0x196>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     224:	8f e8       	ldi	r24, 0x8F	; 143
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <disk_initialize+0x92>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <disk_initialize+0x98>
     22e:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) { 
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2 */
			for (n = 0; n < 4; n++)
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	e9 1a       	sub	r14, r25
     234:	f1 08       	sbc	r15, r1
     236:	06 c0       	rjmp	.+12     	; 0x244 <disk_initialize+0xae>
     238:	0f 2e       	mov	r0, r31
     23a:	f0 e1       	ldi	r31, 0x10	; 16
     23c:	ef 2e       	mov	r14, r31
     23e:	f7 e2       	ldi	r31, 0x27	; 39
     240:	ff 2e       	mov	r15, r31
     242:	f0 2d       	mov	r31, r0
     244:	e1 14       	cp	r14, r1
     246:	f1 04       	cpc	r15, r1
     248:	49 f0       	breq	.+18     	; 0x25c <disk_initialize+0xc6>
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e4       	ldi	r23, 0x40	; 64
     252:	89 ee       	ldi	r24, 0xE9	; 233
     254:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     258:	81 11       	cpse	r24, r1
     25a:	e4 cf       	rjmp	.-56     	; 0x224 <disk_initialize+0x8e>
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
     25c:	ef 28       	or	r14, r15
     25e:	09 f4       	brne	.+2      	; 0x262 <disk_initialize+0xcc>
     260:	5c c0       	rjmp	.+184    	; 0x31a <disk_initialize+0x184>
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	ba 01       	movw	r22, r20
     268:	8a e7       	ldi	r24, 0x7A	; 122
     26a:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     26e:	88 23       	and	r24, r24
     270:	71 f0       	breq	.+28     	; 0x28e <disk_initialize+0xf8>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     272:	f1 2c       	mov	r15, r1
     274:	5b c0       	rjmp	.+182    	; 0x32c <disk_initialize+0x196>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
     276:	e1 2e       	mov	r14, r17
     278:	f1 2c       	mov	r15, r1
     27a:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     27e:	e1 e0       	ldi	r30, 0x01	; 1
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ec 0f       	add	r30, r28
     284:	fd 1f       	adc	r31, r29
     286:	ee 0d       	add	r30, r14
     288:	ff 1d       	adc	r31, r15
     28a:	80 83       	st	Z, r24
				ocr[n] = rcv_spi();                 /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
     28c:	1f 5f       	subi	r17, 0xFF	; 255
     28e:	14 30       	cpi	r17, 0x04	; 4
     290:	90 f3       	brcs	.-28     	; 0x276 <disk_initialize+0xe0>
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	86 ff       	sbrs	r24, 6
     296:	43 c0       	rjmp	.+134    	; 0x31e <disk_initialize+0x188>
     298:	0f 2e       	mov	r0, r31
     29a:	fc e0       	ldi	r31, 0x0C	; 12
     29c:	ff 2e       	mov	r15, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	45 c0       	rjmp	.+138    	; 0x32c <disk_initialize+0x196>
				}
			}
		} else { /* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	ba 01       	movw	r22, r20
     2a8:	89 ee       	ldi	r24, 0xE9	; 233
     2aa:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	40 f4       	brcc	.+16     	; 0x2c2 <disk_initialize+0x12c>
				ty  = CT_SD1;
     2b2:	68 94       	set
     2b4:	ff 24       	eor	r15, r15
     2b6:	f1 f8       	bld	r15, 1
				cmd = ACMD41; /* SDv1 */
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f9 ee       	ldi	r31, 0xE9	; 233
     2bc:	ef 2e       	mov	r14, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	06 c0       	rjmp	.+12     	; 0x2ce <disk_initialize+0x138>
			} else {
				ty  = CT_MMC;
     2c2:	ff 24       	eor	r15, r15
     2c4:	f3 94       	inc	r15
				cmd = CMD1; /* MMCv3 */
     2c6:	0f 2e       	mov	r0, r31
     2c8:	f1 e4       	ldi	r31, 0x41	; 65
     2ca:	ef 2e       	mov	r14, r31
     2cc:	f0 2d       	mov	r31, r0
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
     2ce:	00 e1       	ldi	r16, 0x10	; 16
     2d0:	17 e2       	ldi	r17, 0x27	; 39
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <disk_initialize+0x14e>
     2d4:	8f e8       	ldi	r24, 0x8F	; 143
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <disk_initialize+0x142>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <disk_initialize+0x148>
     2de:	00 00       	nop
     2e0:	01 50       	subi	r16, 0x01	; 1
     2e2:	11 09       	sbc	r17, r1
     2e4:	01 15       	cp	r16, r1
     2e6:	11 05       	cpc	r17, r1
     2e8:	41 f0       	breq	.+16     	; 0x2fa <disk_initialize+0x164>
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	ba 01       	movw	r22, r20
     2f0:	8e 2d       	mov	r24, r14
     2f2:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     2f6:	81 11       	cpse	r24, r1
     2f8:	ed cf       	rjmp	.-38     	; 0x2d4 <disk_initialize+0x13e>
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
     2fa:	01 2b       	or	r16, r17
     2fc:	a1 f0       	breq	.+40     	; 0x326 <disk_initialize+0x190>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	52 e0       	ldi	r21, 0x02	; 2
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e5       	ldi	r24, 0x50	; 80
     308:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     30c:	81 11       	cpse	r24, r1
     30e:	0d c0       	rjmp	.+26     	; 0x32a <disk_initialize+0x194>
     310:	0d c0       	rjmp	.+26     	; 0x32c <disk_initialize+0x196>
	init_spi(); /* Initialize ports to control MMC */ 
	DESELECT();
	for (n = 10; n; n--)
		rcv_spi(); /* 80 dummy clocks with CS=H */

	ty = 0;
     312:	f1 2c       	mov	r15, r1
     314:	0b c0       	rjmp	.+22     	; 0x32c <disk_initialize+0x196>
     316:	f1 2c       	mov	r15, r1
     318:	09 c0       	rjmp	.+18     	; 0x32c <disk_initialize+0x196>
     31a:	f1 2c       	mov	r15, r1
     31c:	07 c0       	rjmp	.+14     	; 0x32c <disk_initialize+0x196>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--)
					_delay_us(100);                   /* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* SDv2 (HC or SC) */
     31e:	68 94       	set
     320:	ff 24       	eor	r15, r15
     322:	f2 f8       	bld	r15, 2
     324:	03 c0       	rjmp	.+6      	; 0x32c <disk_initialize+0x196>
				cmd = CMD1; /* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--)
				_delay_us(100);                    /* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) /* Set R/W block length to 512 */
				ty = 0;
     326:	f1 2c       	mov	r15, r1
     328:	01 c0       	rjmp	.+2      	; 0x32c <disk_initialize+0x196>
     32a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     32c:	f0 92 16 01 	sts	0x0116, r15	; 0x800116 <CardType>
	DESELECT();
     330:	85 b1       	in	r24, 0x05	; 5
     332:	81 60       	ori	r24, 0x01	; 1
     334:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     336:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	return ty ? 0 : STA_NOINIT;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	f1 10       	cpse	r15, r1
     33e:	80 e0       	ldi	r24, 0x00	; 0
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	08 95       	ret

00000356 <disk_readp>:
DRESULT disk_readp(BYTE *buff,   /* Pointer to the read buffer (NULL:Forward to the stream) */
                   DWORD sector, /* Sector number (LBA) */
                   UINT  offset, /* Byte offset to read from (0..511) */
                   UINT  count   /* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	6c 01       	movw	r12, r24
     36c:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE    rc;
	UINT    bc;

	if (!(CardType & CT_BLOCK))
     36e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <CardType>
     372:	83 fd       	sbrc	r24, 3
     374:	09 c0       	rjmp	.+18     	; 0x388 <disk_readp+0x32>
		sector *= 512; /* Convert to byte address if needed */
     376:	03 2e       	mov	r0, r19
     378:	39 e0       	ldi	r19, 0x09	; 9
     37a:	44 0f       	add	r20, r20
     37c:	55 1f       	adc	r21, r21
     37e:	66 1f       	adc	r22, r22
     380:	77 1f       	adc	r23, r23
     382:	3a 95       	dec	r19
     384:	d1 f7       	brne	.-12     	; 0x37a <disk_readp+0x24>
     386:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) { /* READ_SINGLE_BLOCK */
     388:	81 e5       	ldi	r24, 0x51	; 81
     38a:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     38e:	81 11       	cpse	r24, r1
     390:	31 c0       	rjmp	.+98     	; 0x3f4 <disk_readp+0x9e>

		// bc = 40000;	/* Time counter */
		do { /* Wait for response */
			rc = rcv_spi();
     392:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
		} while (rc == 0xFF);
     396:	8f 3f       	cpi	r24, 0xFF	; 255
     398:	e1 f3       	breq	.-8      	; 0x392 <disk_readp+0x3c>

		if (rc == 0xFE) { /* A data packet arrived */
     39a:	8e 3f       	cpi	r24, 0xFE	; 254
     39c:	69 f5       	brne	.+90     	; 0x3f8 <disk_readp+0xa2>

			bc = 512 + 2 - offset - count; /* Number of trailing bytes to skip */
     39e:	cc 27       	eor	r28, r28
     3a0:	dd 27       	eor	r29, r29
     3a2:	ce 19       	sub	r28, r14
     3a4:	df 09       	sbc	r29, r15
     3a6:	c0 1b       	sub	r28, r16
     3a8:	d1 0b       	sbc	r29, r17
     3aa:	ce 5f       	subi	r28, 0xFE	; 254
     3ac:	dd 4f       	sbci	r29, 0xFD	; 253

			/* Skip leading bytes */
			while (offset--)
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <disk_readp+0x60>
				rcv_spi();
     3b0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
		if (rc == 0xFE) { /* A data packet arrived */

			bc = 512 + 2 - offset - count; /* Number of trailing bytes to skip */

			/* Skip leading bytes */
			while (offset--)
     3b4:	75 01       	movw	r14, r10
     3b6:	57 01       	movw	r10, r14
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	a8 1a       	sub	r10, r24
     3bc:	b1 08       	sbc	r11, r1
     3be:	ef 28       	or	r14, r15
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <disk_readp+0x5a>
				rcv_spi();

			/* Receive a part of the sector */
			if (buff) { /* Store data to the memory */
     3c2:	c1 14       	cp	r12, r1
     3c4:	d1 04       	cpc	r13, r1
     3c6:	69 f0       	breq	.+26     	; 0x3e2 <disk_readp+0x8c>
				do {
					*buff++ = rcv_spi();
     3c8:	76 01       	movw	r14, r12
     3ca:	ef ef       	ldi	r30, 0xFF	; 255
     3cc:	ee 1a       	sub	r14, r30
     3ce:	fe 0a       	sbc	r15, r30
     3d0:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     3d4:	f6 01       	movw	r30, r12
     3d6:	80 83       	st	Z, r24
				} while (--count);
     3d8:	01 50       	subi	r16, 0x01	; 1
     3da:	11 09       	sbc	r17, r1
				rcv_spi();

			/* Receive a part of the sector */
			if (buff) { /* Store data to the memory */
				do {
					*buff++ = rcv_spi();
     3dc:	67 01       	movw	r12, r14
				} while (--count);
     3de:	a1 f7       	brne	.-24     	; 0x3c8 <disk_readp+0x72>
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <disk_readp+0x92>
			} else { /* Forward data to the outgoing stream */
				do {
					// FORWARD(rcv_spi());
				} while (--count);
     3e2:	01 50       	subi	r16, 0x01	; 1
     3e4:	11 09       	sbc	r17, r1
     3e6:	e9 f7       	brne	.-6      	; 0x3e2 <disk_readp+0x8c>
			}

			/* Skip trailing bytes and CRC */
			do
				rcv_spi();
     3e8:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
			while (--bc);
     3ec:	21 97       	sbiw	r28, 0x01	; 1
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <disk_readp+0x92>

			res = RES_OK;
     3f0:	c0 e0       	ldi	r28, 0x00	; 0
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <disk_readp+0xa4>
	UINT    bc;

	if (!(CardType & CT_BLOCK))
		sector *= 512; /* Convert to byte address if needed */

	res = RES_ERROR;
     3f4:	c1 e0       	ldi	r28, 0x01	; 1
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <disk_readp+0xa4>
     3f8:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
     3fa:	85 b1       	in	r24, 0x05	; 5
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	85 b9       	out	0x05, r24	; 5
	rcv_spi();
     400:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>

	return res;
}
     404:	8c 2f       	mov	r24, r28
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	08 95       	ret

0000041c <disk_writep>:

#if _USE_WRITE
DRESULT disk_writep(const BYTE *buff, /* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
                    DWORD       sc    /* Number of bytes to send, Sector number (LBA) or zero */
)
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	fc 01       	movw	r30, r24
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
     426:	89 2b       	or	r24, r25
     428:	f1 f0       	breq	.+60     	; 0x466 <disk_writep+0x4a>
		bc = sc;
     42a:	ea 01       	movw	r28, r20
		while (bc && wc) { /* Send data bytes to the card */
     42c:	11 c0       	rjmp	.+34     	; 0x450 <disk_writep+0x34>
			xmit_spi(*buff++);
     42e:	8f 01       	movw	r16, r30
     430:	0f 5f       	subi	r16, 0xFF	; 255
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
			wc--;
     43a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
     43e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     448:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
			bc--;
     44c:	21 97       	sbiw	r28, 0x01	; 1
	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
     44e:	f8 01       	movw	r30, r16

	res = RES_ERROR;

	if (buff) { /* Send data bytes */
		bc = sc;
		while (bc && wc) { /* Send data bytes to the card */
     450:	20 97       	sbiw	r28, 0x00	; 0
     452:	09 f4       	brne	.+2      	; 0x456 <disk_writep+0x3a>
     454:	5f c0       	rjmp	.+190    	; 0x514 <disk_writep+0xf8>
     456:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
     45a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
     45e:	89 2b       	or	r24, r25
     460:	31 f7       	brne	.-52     	; 0x42e <disk_writep+0x12>
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
     462:	c0 e0       	ldi	r28, 0x00	; 0
     464:	5a c0       	rjmp	.+180    	; 0x51a <disk_writep+0xfe>
	} else {
		if (sc) { /* Initiate sector write process */
     466:	41 15       	cp	r20, r1
     468:	51 05       	cpc	r21, r1
     46a:	61 05       	cpc	r22, r1
     46c:	71 05       	cpc	r23, r1
     46e:	01 f1       	breq	.+64     	; 0x4b0 <disk_writep+0x94>
			if (!(CardType & CT_BLOCK))
     470:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <CardType>
     474:	83 fd       	sbrc	r24, 3
     476:	09 c0       	rjmp	.+18     	; 0x48a <disk_writep+0x6e>
				sc *= 512;                  /* Convert to byte address if needed */
     478:	03 2e       	mov	r0, r19
     47a:	39 e0       	ldi	r19, 0x09	; 9
     47c:	44 0f       	add	r20, r20
     47e:	55 1f       	adc	r21, r21
     480:	66 1f       	adc	r22, r22
     482:	77 1f       	adc	r23, r23
     484:	3a 95       	dec	r19
     486:	d1 f7       	brne	.-12     	; 0x47c <disk_writep+0x60>
     488:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sc) == 0) { /* WRITE_SINGLE_BLOCK */
     48a:	88 e5       	ldi	r24, 0x58	; 88
     48c:	0e 94 86 00 	call	0x10c	; 0x10c <send_cmd>
     490:	81 11       	cpse	r24, r1
     492:	42 c0       	rjmp	.+132    	; 0x518 <disk_writep+0xfc>
				xmit_spi(0xFF);
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				xmit_spi(0xFE); /* Data block header */
     49a:	8e ef       	ldi	r24, 0xFE	; 254
     49c:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     4a8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
				res = RES_OK;
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
     4ae:	35 c0       	rjmp	.+106    	; 0x51a <disk_writep+0xfe>
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
     4b0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
     4b4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
     4b8:	02 96       	adiw	r24, 0x02	; 2
			while (bc--) {
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <disk_writep+0xa8>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 76 00 	call	0xec	; 0xec <xmit_spi>
				wc  = 512;      /* Set byte counter */
				res = RES_OK;
			}
		} else { /* Finalize sector write process */
			bc = wc + 2;
			while (bc--) {
     4c2:	ce 01       	movw	r24, r28
     4c4:	ec 01       	movw	r28, r24
     4c6:	21 97       	sbiw	r28, 0x01	; 1
     4c8:	89 2b       	or	r24, r25
     4ca:	c1 f7       	brne	.-16     	; 0x4bc <disk_writep+0xa0>
				xmit_spi(0); /* Fill left bytes and CRC with zeros */
			}
			do {
				res = rcv_spi();
     4cc:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     4d0:	c8 2f       	mov	r28, r24
			} while (res == 0xFF);
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	d9 f3       	breq	.-10     	; 0x4cc <disk_writep+0xb0>
			if ((res & 0x1F) == 0x05) { /* Receive data resp and wait for end of write process in timeout of 500ms */
     4d6:	8f 71       	andi	r24, 0x1F	; 31
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	b1 f4       	brne	.+44     	; 0x508 <disk_writep+0xec>
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <disk_writep+0xd4>
     4de:	8f e8       	ldi	r24, 0x8F	; 143
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <disk_writep+0xc6>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <disk_writep+0xcc>
     4e8:	00 00       	nop
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) /* Wait for ready */
     4ea:	01 50       	subi	r16, 0x01	; 1
     4ec:	11 09       	sbc	r17, r1
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <disk_writep+0xd8>
     4f0:	08 e8       	ldi	r16, 0x88	; 136
     4f2:	13 e1       	ldi	r17, 0x13	; 19
     4f4:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     4f8:	8f 3f       	cpi	r24, 0xFF	; 255
     4fa:	19 f0       	breq	.+6      	; 0x502 <disk_writep+0xe6>
     4fc:	01 15       	cp	r16, r1
     4fe:	11 05       	cpc	r17, r1
     500:	71 f7       	brne	.-36     	; 0x4de <disk_writep+0xc2>
					_delay_us(100);
				if (bc)
     502:	01 2b       	or	r16, r17
     504:	09 f0       	breq	.+2      	; 0x508 <disk_writep+0xec>
					res = RES_OK;
     506:	c0 e0       	ldi	r28, 0x00	; 0
			}
			DESELECT();
     508:	85 b1       	in	r24, 0x05	; 5
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	85 b9       	out	0x05, r24	; 5
			rcv_spi();
     50e:	0e 94 82 00 	call	0x104	; 0x104 <rcv_spi>
     512:	03 c0       	rjmp	.+6      	; 0x51a <disk_writep+0xfe>
		while (bc && wc) { /* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--;
			bc--;
		}
		res = RES_OK;
     514:	c0 e0       	ldi	r28, 0x00	; 0
     516:	01 c0       	rjmp	.+2      	; 0x51a <disk_writep+0xfe>
{
	DRESULT     res;
	UINT        bc;
	static UINT wc; /* Sector write counter */

	res = RES_ERROR;
     518:	c1 e0       	ldi	r28, 0x01	; 1
			rcv_spi();
		}
	}

	return res;
}
     51a:	8c 2f       	mov	r24, r28
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <init_sd_card>:
	int ERROR = 0;

	/* Initialize physical drive */
	do {
		
		status = disk_initialize();
     526:	0e 94 cb 00 	call	0x196	; 0x196 <disk_initialize>
		if (status != 0) {
     52a:	81 11       	cpse	r24, r1
     52c:	0a c0       	rjmp	.+20     	; 0x542 <init_sd_card+0x1c>
			ERROR = 1; 
		} else {
			LED_OFF();
     52e:	88 b1       	in	r24, 0x08	; 8
     530:	8e 7f       	andi	r24, 0xFE	; 254
     532:	88 b9       	out	0x08, r24	; 8
			ERROR = 0;			
			/* Set SPI clock faster after initialization */
			SPCR = (1<<MSTR) | (0<<SPR1) | (0<<SPR0) | (1<<SPE);
     534:	80 e5       	ldi	r24, 0x50	; 80
     536:	8c bd       	out	0x2c, r24	; 44
			SPSR = (1<<SPI2X); 		
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	8d bd       	out	0x2d, r24	; 45
		status = disk_initialize();
		if (status != 0) {
			ERROR = 1; 
		} else {
			LED_OFF();
			ERROR = 0;			
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <init_sd_card+0x20>
	/* Initialize physical drive */
	do {
		
		status = disk_initialize();
		if (status != 0) {
			ERROR = 1; 
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
		/* The application will continue to try and initialize the card.
		 * If the LED is on, try taking out the SD card and putting
		 * it back in again.  After an operation has been interrupted this is
		 * sometimes necessary.
		 */
	} while (ERROR == 1);
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	71 f3       	breq	.-36     	; 0x526 <init_sd_card>

	/* Mount volume */
	result = pf_mount(&file_system);
     54a:	85 e2       	ldi	r24, 0x25	; 37
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <pf_mount>
	if (result != FR_OK){ // 0
		
	}

	/* Open file */
	result = pf_open("/LOG.TXT");
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 87 07 	call	0xf0e	; 0xf0e <pf_open>
	if (result == FR_NO_FILE)
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	71 f4       	brne	.+28     	; 0x57a <init_sd_card+0x54>
	{
		while (1)
		{
			PORTC ^= (1 << PC0);
     55e:	98 b1       	in	r25, 0x08	; 8
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	89 27       	eor	r24, r25
     564:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     566:	2f ef       	ldi	r18, 0xFF	; 255
     568:	8e e9       	ldi	r24, 0x9E	; 158
     56a:	94 e2       	ldi	r25, 0x24	; 36
     56c:	21 50       	subi	r18, 0x01	; 1
     56e:	80 40       	sbci	r24, 0x00	; 0
     570:	90 40       	sbci	r25, 0x00	; 0
     572:	e1 f7       	brne	.-8      	; 0x56c <init_sd_card+0x46>
     574:	00 c0       	rjmp	.+0      	; 0x576 <init_sd_card+0x50>
     576:	00 00       	nop
     578:	f2 cf       	rjmp	.-28     	; 0x55e <init_sd_card+0x38>
     57a:	08 95       	ret

0000057c <main>:

void init_sd_card(void);
	
int main(void)
{
	DDRC = 1; // output led (p4)
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	87 b9       	out	0x07, r24	; 7
	LED_OFF();
     580:	88 b1       	in	r24, 0x08	; 8
     582:	8e 7f       	andi	r24, 0xFE	; 254
     584:	88 b9       	out	0x08, r24	; 8
	//_PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc))
	
	_PROTECTED_WRITE(CLKPR, ( (1<<CLKPCE) | ((0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (0<<CLKPS0)))); 

	/* Initialize card */
	init_sd_card();
     586:	0e 94 93 02 	call	0x526	; 0x526 <init_sd_card>

	/* Set file pointer to beginning of file */
	pf_lseek(0);
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	cb 01       	movw	r24, r22
     590:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <pf_lseek>

	/* Write buffer */
	pf_write(write_buffer, BUFFER_SIZE, &byte_counter);
     594:	47 e1       	ldi	r20, 0x17	; 23
     596:	51 e0       	ldi	r21, 0x01	; 1
     598:	6a e0       	ldi	r22, 0x0A	; 10
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <pf_write>
		/* End of file */
		
	}

	/* Finalize write */
	pf_write(0, 0, &byte_counter);
     5a4:	47 e1       	ldi	r20, 0x17	; 23
     5a6:	51 e0       	ldi	r21, 0x01	; 1
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <pf_write>

	/* Reset file pointer to beginning of file */
	pf_lseek(0);
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	cb 01       	movw	r24, r22
     5ba:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <pf_lseek>

	/* Read back the same bytes */
	pf_read(read_buffer, BUFFER_SIZE, &byte_counter);
     5be:	47 e1       	ldi	r20, 0x17	; 23
     5c0:	51 e0       	ldi	r21, 0x01	; 1
     5c2:	6a e0       	ldi	r22, 0x0A	; 10
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	89 e1       	ldi	r24, 0x19	; 25
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 f5 07 	call	0xfea	; 0xfea <pf_read>

	/* Check they're the same */
	while (byte_counter) {
     5ce:	0f c0       	rjmp	.+30     	; 0x5ee <main+0x72>
		if (write_buffer[byte_counter] != read_buffer[byte_counter]) {
     5d0:	fc 01       	movw	r30, r24
     5d2:	e0 50       	subi	r30, 0x00	; 0
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	30 81       	ld	r19, Z
     5d8:	fc 01       	movw	r30, r24
     5da:	e7 5e       	subi	r30, 0xE7	; 231
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	20 81       	ld	r18, Z
     5e0:	32 13       	cpse	r19, r18
     5e2:	ff cf       	rjmp	.-2      	; 0x5e2 <main+0x66>
			/* ERROR! */
		//	LED_ON();
			while (1)
				;
		}
		byte_counter--;
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <byte_counter+0x1>
     5ea:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <byte_counter>

	/* Read back the same bytes */
	pf_read(read_buffer, BUFFER_SIZE, &byte_counter);

	/* Check they're the same */
	while (byte_counter) {
     5ee:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <byte_counter>
     5f2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <byte_counter+0x1>
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	59 f7       	brne	.-42     	; 0x5d0 <main+0x54>
     5fa:	ff cf       	rjmp	.-2      	; 0x5fa <main+0x7e>

000005fc <mem_set>:

static FATFS *FatFs; /* Pointer to the file system object (logical drive) */

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
     5fc:	fc 01       	movw	r30, r24
	char *d = (char *)dst;
	while (cnt--)
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <mem_set+0xa>
		*d++ = (char)val;
     600:	60 83       	st	Z, r22

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
	char *d = (char *)dst;
	while (cnt--)
     602:	ac 01       	movw	r20, r24
		*d++ = (char)val;
     604:	31 96       	adiw	r30, 0x01	; 1

/* Fill memory */
static void mem_set(void *dst, int val, int cnt)
{
	char *d = (char *)dst;
	while (cnt--)
     606:	ca 01       	movw	r24, r20
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	45 2b       	or	r20, r21
     60c:	c9 f7       	brne	.-14     	; 0x600 <mem_set+0x4>
		*d++ = (char)val;
}
     60e:	08 95       	ret

00000610 <mem_cmp>:

/* Compare memory to memory */
static int mem_cmp(const void *dst, const void *src, int cnt)
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	dc 01       	movw	r26, r24
     616:	fb 01       	movw	r30, r22
	const char *d = (const char *)dst, *s = (const char *)src;
	int         r = 0;
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
	while (cnt-- && (r = *d++ - *s++) == 0)
     61c:	02 c0       	rjmp	.+4      	; 0x622 <mem_cmp+0x12>
     61e:	fb 01       	movw	r30, r22
     620:	de 01       	movw	r26, r28
     622:	9a 01       	movw	r18, r20
     624:	21 50       	subi	r18, 0x01	; 1
     626:	31 09       	sbc	r19, r1
     628:	45 2b       	or	r20, r21
     62a:	61 f0       	breq	.+24     	; 0x644 <mem_cmp+0x34>
     62c:	ed 01       	movw	r28, r26
     62e:	21 96       	adiw	r28, 0x01	; 1
     630:	8c 91       	ld	r24, X
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	bf 01       	movw	r22, r30
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	40 81       	ld	r20, Z
     63c:	84 1b       	sub	r24, r20
     63e:	91 09       	sbc	r25, r1
     640:	a9 01       	movw	r20, r18
     642:	69 f3       	breq	.-38     	; 0x61e <mem_cmp+0xe>
		;
	return r;
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect(           /* !=0: Sector number, 0: Failed - invalid cluster# */
                        CLUST clst /* Cluster# to be converted */
)
{
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
	FATFS *fs = FatFs;
     64e:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <FatFs>
     652:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <FatFs+0x1>

	clst -= 2;
     656:	9b 01       	movw	r18, r22
     658:	ac 01       	movw	r20, r24
     65a:	22 50       	subi	r18, 0x02	; 2
     65c:	31 09       	sbc	r19, r1
     65e:	41 09       	sbc	r20, r1
     660:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2))
     662:	86 81       	ldd	r24, Z+6	; 0x06
     664:	97 81       	ldd	r25, Z+7	; 0x07
     666:	a0 85       	ldd	r26, Z+8	; 0x08
     668:	b1 85       	ldd	r27, Z+9	; 0x09
     66a:	02 97       	sbiw	r24, 0x02	; 2
     66c:	a1 09       	sbc	r26, r1
     66e:	b1 09       	sbc	r27, r1
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	4a 07       	cpc	r20, r26
     676:	5b 07       	cpc	r21, r27
     678:	68 f4       	brcc	.+26     	; 0x694 <clust2sect+0x4a>
		return 0; /* Invalid cluster# */
	return (DWORD)clst * fs->csize + fs->database;
     67a:	a2 81       	ldd	r26, Z+2	; 0x02
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__muluhisi3>
     682:	02 89       	ldd	r16, Z+18	; 0x12
     684:	13 89       	ldd	r17, Z+19	; 0x13
     686:	24 89       	ldd	r18, Z+20	; 0x14
     688:	35 89       	ldd	r19, Z+21	; 0x15
     68a:	60 0f       	add	r22, r16
     68c:	71 1f       	adc	r23, r17
     68e:	82 1f       	adc	r24, r18
     690:	93 1f       	adc	r25, r19
     692:	03 c0       	rjmp	.+6      	; 0x69a <clust2sect+0x50>
{
	FATFS *fs = FatFs;

	clst -= 2;
	if (clst >= (fs->n_fatent - 2))
		return 0; /* Invalid cluster# */
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <get_clust>:

static CLUST get_clust(BYTE *dir /* Pointer to directory entry */
)
{
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	fc 01       	movw	r30, r24
	FATFS *fs   = FatFs;
	CLUST  clst = 0;

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir + DIR_FstClusHI);
     6a6:	65 89       	ldd	r22, Z+21	; 0x15
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	76 2f       	mov	r23, r22
     6ac:	66 27       	eor	r22, r22
     6ae:	84 89       	ldd	r24, Z+20	; 0x14
     6b0:	68 2b       	or	r22, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	a0 e0       	ldi	r26, 0x00	; 0
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
		clst <<= 16;
     6b8:	bc 01       	movw	r22, r24
     6ba:	55 27       	eor	r21, r21
     6bc:	44 27       	eor	r20, r20
	}
	clst |= LD_WORD(dir + DIR_FstClusLO);
     6be:	83 8d       	ldd	r24, Z+27	; 0x1b
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	98 2f       	mov	r25, r24
     6c4:	88 27       	eor	r24, r24
     6c6:	22 8d       	ldd	r18, Z+26	; 0x1a
     6c8:	82 2b       	or	r24, r18
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	8c 01       	movw	r16, r24
     6d0:	9d 01       	movw	r18, r26
     6d2:	04 2b       	or	r16, r20
     6d4:	15 2b       	or	r17, r21
     6d6:	26 2b       	or	r18, r22
     6d8:	37 2b       	or	r19, r23
     6da:	c9 01       	movw	r24, r18
     6dc:	b8 01       	movw	r22, r16

	return clst;
}
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	08 95       	ret

000006e4 <dir_rewind>:
/* Directory handling - Rewind directory index                           */
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind(DIR *dj /* Pointer to directory object */
)
{
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	fc 01       	movw	r30, r24
	CLUST  clst;
	FATFS *fs = FatFs;
     6ee:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <FatFs>
     6f2:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <FatFs+0x1>

	dj->index = 0;
     6f6:	11 82       	std	Z+1, r1	; 0x01
     6f8:	10 82       	st	Z, r1
	clst      = dj->sclust;
     6fa:	64 81       	ldd	r22, Z+4	; 0x04
     6fc:	75 81       	ldd	r23, Z+5	; 0x05
     6fe:	86 81       	ldd	r24, Z+6	; 0x06
     700:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent) /* Check start cluster range */
     702:	61 30       	cpi	r22, 0x01	; 1
     704:	71 05       	cpc	r23, r1
     706:	81 05       	cpc	r24, r1
     708:	91 05       	cpc	r25, r1
     70a:	19 f1       	breq	.+70     	; 0x752 <dir_rewind+0x6e>
     70c:	16 96       	adiw	r26, 0x06	; 6
     70e:	0d 91       	ld	r16, X+
     710:	1d 91       	ld	r17, X+
     712:	2d 91       	ld	r18, X+
     714:	3c 91       	ld	r19, X
     716:	19 97       	sbiw	r26, 0x09	; 9
     718:	60 17       	cp	r22, r16
     71a:	71 07       	cpc	r23, r17
     71c:	82 07       	cpc	r24, r18
     71e:	93 07       	cpc	r25, r19
     720:	d0 f4       	brcc	.+52     	; 0x756 <dir_rewind+0x72>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst
     722:	61 15       	cp	r22, r1
     724:	71 05       	cpc	r23, r1
     726:	81 05       	cpc	r24, r1
     728:	91 05       	cpc	r25, r1
     72a:	31 f4       	brne	.+12     	; 0x738 <dir_rewind+0x54>
	    && (_FS_32ONLY || fs->fs_type == FS_FAT32)) /* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
     72c:	1e 96       	adiw	r26, 0x0e	; 14
     72e:	6d 91       	ld	r22, X+
     730:	7d 91       	ld	r23, X+
     732:	8d 91       	ld	r24, X+
     734:	9c 91       	ld	r25, X
     736:	51 97       	sbiw	r26, 0x11	; 17
     738:	ef 01       	movw	r28, r30
	dj->clust = clst;                                                  /* Current cluster */
     73a:	60 87       	std	Z+8, r22	; 0x08
     73c:	71 87       	std	Z+9, r23	; 0x09
     73e:	82 87       	std	Z+10, r24	; 0x0a
     740:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect  = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase; /* Current sector */
     742:	0e 94 25 03 	call	0x64a	; 0x64a <clust2sect>
     746:	6c 87       	std	Y+12, r22	; 0x0c
     748:	7d 87       	std	Y+13, r23	; 0x0d
     74a:	8e 87       	std	Y+14, r24	; 0x0e
     74c:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK; /* Seek succeeded */
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	03 c0       	rjmp	.+6      	; 0x758 <dir_rewind+0x74>
	FATFS *fs = FatFs;

	dj->index = 0;
	clst      = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent) /* Check start cluster range */
		return FR_DISK_ERR;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	01 c0       	rjmp	.+2      	; 0x758 <dir_rewind+0x74>
     756:	81 e0       	ldi	r24, 0x01	; 1
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;                                                  /* Current cluster */
	dj->sect  = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase; /* Current sector */

	return FR_OK; /* Seek succeeded */
}
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <create_name>:
/*-----------------------------------------------------------------------*/

static FRESULT create_name(DIR *        dj,  /* Pointer to the directory object */
                           const char **path /* Pointer to pointer to the segment in the path string */
)
{
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	eb 01       	movw	r28, r22
	static const BYTE cvt[] = _EXCVT;
#endif
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
     76c:	fc 01       	movw	r30, r24
     76e:	02 81       	ldd	r16, Z+2	; 0x02
     770:	13 81       	ldd	r17, Z+3	; 0x03
	mem_set(sfn, ' ', 11);
     772:	4b e0       	ldi	r20, 0x0B	; 11
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	60 e2       	ldi	r22, 0x20	; 32
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <mem_set>
	si = i = 0;
	ni     = 8;
	p      = *path;
     780:	28 81       	ld	r18, Y
     782:	39 81       	ldd	r19, Y+1	; 0x01
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0;
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
	ni     = 8;
     788:	58 e0       	ldi	r21, 0x08	; 8
     78a:	01 c0       	rjmp	.+2      	; 0x78e <create_name+0x2c>
     78c:	84 2f       	mov	r24, r20
	p      = *path;
	for (;;) {
		c = p[si++];
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	48 0f       	add	r20, r24
     792:	f9 01       	movw	r30, r18
     794:	e8 0f       	add	r30, r24
     796:	f1 1d       	adc	r31, r1
     798:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/')
     79a:	81 32       	cpi	r24, 0x21	; 33
     79c:	98 f0       	brcs	.+38     	; 0x7c4 <create_name+0x62>
     79e:	8f 32       	cpi	r24, 0x2F	; 47
     7a0:	89 f0       	breq	.+34     	; 0x7c4 <create_name+0x62>
			break; /* Break on end of segment */
		if (c == '.' || i >= ni) {
     7a2:	8e 32       	cpi	r24, 0x2E	; 46
     7a4:	11 f0       	breq	.+4      	; 0x7aa <create_name+0x48>
     7a6:	95 17       	cp	r25, r21
     7a8:	38 f0       	brcs	.+14     	; 0x7b8 <create_name+0x56>
			if (ni != 8 || c != '.')
     7aa:	58 30       	cpi	r21, 0x08	; 8
     7ac:	59 f4       	brne	.+22     	; 0x7c4 <create_name+0x62>
     7ae:	8e 32       	cpi	r24, 0x2E	; 46
     7b0:	49 f4       	brne	.+18     	; 0x7c4 <create_name+0x62>
				break;
			i  = 8;
     7b2:	98 e0       	ldi	r25, 0x08	; 8
			ni = 11;
     7b4:	5b e0       	ldi	r21, 0x0B	; 11
     7b6:	ea cf       	rjmp	.-44     	; 0x78c <create_name+0x2a>
		} else
#endif
		{ /* Single byte code */
			if (_USE_LCC && IsLower(c))
				c -= 0x20; /* toupper */
			sfn[i++] = c;
     7b8:	f8 01       	movw	r30, r16
     7ba:	e9 0f       	add	r30, r25
     7bc:	f1 1d       	adc	r31, r1
     7be:	80 83       	st	Z, r24
     7c0:	9f 5f       	subi	r25, 0xFF	; 255
     7c2:	e4 cf       	rjmp	.-56     	; 0x78c <create_name+0x2a>
		}
	}
	*path = &p[si]; /* Rerurn pointer to the next segment */
     7c4:	24 0f       	add	r18, r20
     7c6:	31 1d       	adc	r19, r1
     7c8:	39 83       	std	Y+1, r19	; 0x01
     7ca:	28 83       	st	Y, r18

	sfn[11] = (c <= ' ') ? 1 : 0; /* Set last segment flag if end of path */
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	81 32       	cpi	r24, 0x21	; 33
     7d0:	08 f0       	brcs	.+2      	; 0x7d4 <create_name+0x72>
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	f8 01       	movw	r30, r16
     7d6:	93 87       	std	Z+11, r25	; 0x0b

	return FR_OK;
}
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <check_fs>:

static BYTE check_fs(/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
                     BYTE *buf, /* Working buffer */
                     DWORD sect /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
     7f6:	6a 01       	movw	r12, r20
     7f8:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2)) /* Read the boot record */
     7fa:	02 e0       	ldi	r16, 0x02	; 2
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	2e ef       	ldi	r18, 0xFE	; 254
     800:	31 e0       	ldi	r19, 0x01	; 1
     802:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     806:	81 11       	cpse	r24, r1
     808:	1d c0       	rjmp	.+58     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		return 3;
	if (LD_WORD(buf) != 0xAA55) /* Check record signature */
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	98 2f       	mov	r25, r24
     810:	88 27       	eor	r24, r24
     812:	28 81       	ld	r18, Y
     814:	82 2b       	or	r24, r18
     816:	85 35       	cpi	r24, 0x55	; 85
     818:	9a 4a       	sbci	r25, 0xAA	; 170
     81a:	b1 f4       	brne	.+44     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
     81c:	22 e5       	ldi	r18, 0x52	; 82
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	b7 01       	movw	r22, r14
     822:	a6 01       	movw	r20, r12
     824:	ce 01       	movw	r24, r28
     826:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     82a:	81 11       	cpse	r24, r1
     82c:	0f c0       	rjmp	.+30     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	28 81       	ld	r18, Y
     838:	82 2b       	or	r24, r18
     83a:	86 34       	cpi	r24, 0x46	; 70
     83c:	91 44       	sbci	r25, 0x41	; 65
     83e:	41 f0       	breq	.+16     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		return 0;
	return 1;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	07 c0       	rjmp	.+14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
                     BYTE *buf, /* Working buffer */
                     DWORD sect /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2)) /* Read the boot record */
		return 3;
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	05 c0       	rjmp	.+10     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	if (LD_WORD(buf) != 0xAA55) /* Check record signature */
		return 2;
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	03 c0       	rjmp	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
		return 0;
	return 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	01 c0       	rjmp	.+2      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146) /* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146) /* Check FAT32 */
		return 0;
     850:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	08 95       	ret

00000864 <get_fat>:
/*-----------------------------------------------------------------------*/

static CLUST get_fat(           /* 1:IO error, Else:Cluster status */
                     CLUST clst /* Cluster# to get the link information */
)
{
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 d0       	rcall	.+0      	; 0x876 <get_fat+0x12>
     876:	00 d0       	rcall	.+0      	; 0x878 <get_fat+0x14>
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
	BYTE   buf[4];
	FATFS *fs = FatFs;
     87c:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <FatFs>
     880:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <FatFs+0x1>

	if (clst < 2 || clst >= fs->n_fatent) /* Range check */
     884:	62 30       	cpi	r22, 0x02	; 2
     886:	71 05       	cpc	r23, r1
     888:	81 05       	cpc	r24, r1
     88a:	91 05       	cpc	r25, r1
     88c:	08 f4       	brcc	.+2      	; 0x890 <get_fat+0x2c>
     88e:	56 c0       	rjmp	.+172    	; 0x93c <__stack+0x3d>
     890:	06 81       	ldd	r16, Z+6	; 0x06
     892:	17 81       	ldd	r17, Z+7	; 0x07
     894:	20 85       	ldd	r18, Z+8	; 0x08
     896:	31 85       	ldd	r19, Z+9	; 0x09
     898:	60 17       	cp	r22, r16
     89a:	71 07       	cpc	r23, r17
     89c:	82 07       	cpc	r24, r18
     89e:	93 07       	cpc	r25, r19
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <get_fat+0x40>
     8a2:	51 c0       	rjmp	.+162    	; 0x946 <__stack+0x47>
		return 1;

	switch (fs->fs_type) {
     8a4:	20 81       	ld	r18, Z
     8a6:	23 30       	cpi	r18, 0x03	; 3
     8a8:	09 f0       	breq	.+2      	; 0x8ac <get_fat+0x48>
     8aa:	52 c0       	rjmp	.+164    	; 0x950 <__stack+0x51>
     8ac:	dc 01       	movw	r26, r24
     8ae:	cb 01       	movw	r24, r22
			break;
		return LD_WORD(buf);
#endif
#if _FS_FAT32
	case FS_FAT32:
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4))
     8b0:	9c 01       	movw	r18, r24
     8b2:	2f 77       	andi	r18, 0x7F	; 127
     8b4:	33 27       	eor	r19, r19
     8b6:	c2 84       	ldd	r12, Z+10	; 0x0a
     8b8:	d3 84       	ldd	r13, Z+11	; 0x0b
     8ba:	e4 84       	ldd	r14, Z+12	; 0x0c
     8bc:	f5 84       	ldd	r15, Z+13	; 0x0d
     8be:	68 94       	set
     8c0:	16 f8       	bld	r1, 6
     8c2:	b6 95       	lsr	r27
     8c4:	a7 95       	ror	r26
     8c6:	97 95       	ror	r25
     8c8:	87 95       	ror	r24
     8ca:	16 94       	lsr	r1
     8cc:	d1 f7       	brne	.-12     	; 0x8c2 <get_fat+0x5e>
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	b7 01       	movw	r22, r14
     8d8:	a6 01       	movw	r20, r12
     8da:	48 0f       	add	r20, r24
     8dc:	59 1f       	adc	r21, r25
     8de:	6a 1f       	adc	r22, r26
     8e0:	7b 1f       	adc	r23, r27
     8e2:	04 e0       	ldi	r16, 0x04	; 4
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     8ee:	81 11       	cpse	r24, r1
     8f0:	34 c0       	rjmp	.+104    	; 0x95a <__stack+0x5b>
			break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
     8f2:	8c 81       	ldd	r24, Y+4	; 0x04
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	78 2f       	mov	r23, r24
     8fc:	66 27       	eor	r22, r22
     8fe:	55 27       	eor	r21, r21
     900:	44 27       	eor	r20, r20
     902:	9b 81       	ldd	r25, Y+3	; 0x03
     904:	89 2f       	mov	r24, r25
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	dc 01       	movw	r26, r24
     90e:	99 27       	eor	r25, r25
     910:	88 27       	eor	r24, r24
     912:	84 2b       	or	r24, r20
     914:	95 2b       	or	r25, r21
     916:	a6 2b       	or	r26, r22
     918:	b7 2b       	or	r27, r23
     91a:	6a 81       	ldd	r22, Y+2	; 0x02
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	76 2f       	mov	r23, r22
     920:	66 27       	eor	r22, r22
     922:	ab 01       	movw	r20, r22
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	84 2b       	or	r24, r20
     92a:	95 2b       	or	r25, r21
     92c:	a6 2b       	or	r26, r22
     92e:	b7 2b       	or	r27, r23
     930:	29 81       	ldd	r18, Y+1	; 0x01
     932:	82 2b       	or	r24, r18
     934:	bc 01       	movw	r22, r24
     936:	cd 01       	movw	r24, r26
     938:	9f 70       	andi	r25, 0x0F	; 15
     93a:	13 c0       	rjmp	.+38     	; 0x962 <__stack+0x63>
{
	BYTE   buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent) /* Range check */
		return 1;
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e c0       	rjmp	.+28     	; 0x962 <__stack+0x63>
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	09 c0       	rjmp	.+18     	; 0x962 <__stack+0x63>
			break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1; /* An error occured at the disk I/O layer */
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	04 c0       	rjmp	.+8      	; 0x962 <__stack+0x63>
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
}
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	08 95       	ret

0000097c <dir_next>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_next(        /* FR_OK:Succeeded, FR_NO_FILE:End of table */
                        DIR *dj /* Pointer to directory object */
)
{
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
	CLUST  clst;
	WORD   i;
	FATFS *fs = FatFs;
     98c:	e0 90 23 01 	lds	r14, 0x0123	; 0x800123 <FatFs>
     990:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <FatFs+0x1>

	i = dj->index + 1;
     994:	fc 01       	movw	r30, r24
     996:	c0 81       	ld	r28, Z
     998:	d1 81       	ldd	r29, Z+1	; 0x01
     99a:	21 96       	adiw	r28, 0x01	; 1
	if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
     99c:	09 f4       	brne	.+2      	; 0x9a0 <dir_next+0x24>
     99e:	5c c0       	rjmp	.+184    	; 0xa58 <dir_next+0xdc>
     9a0:	44 85       	ldd	r20, Z+12	; 0x0c
     9a2:	55 85       	ldd	r21, Z+13	; 0x0d
     9a4:	66 85       	ldd	r22, Z+14	; 0x0e
     9a6:	77 85       	ldd	r23, Z+15	; 0x0f
     9a8:	41 15       	cp	r20, r1
     9aa:	51 05       	cpc	r21, r1
     9ac:	61 05       	cpc	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <dir_next+0x38>
     9b2:	54 c0       	rjmp	.+168    	; 0xa5c <dir_next+0xe0>
     9b4:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % 16)) { /* Sector changed? */
     9b6:	ce 01       	movw	r24, r28
     9b8:	8f 70       	andi	r24, 0x0F	; 15
     9ba:	99 27       	eor	r25, r25
     9bc:	89 2b       	or	r24, r25
     9be:	09 f0       	breq	.+2      	; 0x9c2 <dir_next+0x46>
     9c0:	46 c0       	rjmp	.+140    	; 0xa4e <dir_next+0xd2>
		dj->sect++;  /* Next sector */
     9c2:	4f 5f       	subi	r20, 0xFF	; 255
     9c4:	5f 4f       	sbci	r21, 0xFF	; 255
     9c6:	6f 4f       	sbci	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	44 87       	std	Z+12, r20	; 0x0c
     9cc:	55 87       	std	Z+13, r21	; 0x0d
     9ce:	66 87       	std	Z+14, r22	; 0x0e
     9d0:	77 87       	std	Z+15, r23	; 0x0f

		if (dj->clust == 0) {       /* Static table */
     9d2:	40 85       	ldd	r20, Z+8	; 0x08
     9d4:	51 85       	ldd	r21, Z+9	; 0x09
     9d6:	62 85       	ldd	r22, Z+10	; 0x0a
     9d8:	73 85       	ldd	r23, Z+11	; 0x0b
     9da:	41 15       	cp	r20, r1
     9dc:	51 05       	cpc	r21, r1
     9de:	61 05       	cpc	r22, r1
     9e0:	71 05       	cpc	r23, r1
     9e2:	39 f4       	brne	.+14     	; 0x9f2 <dir_next+0x76>
			if (i >= fs->n_rootdir) /* Report EOT when end of table */
     9e4:	f7 01       	movw	r30, r14
     9e6:	84 81       	ldd	r24, Z+4	; 0x04
     9e8:	95 81       	ldd	r25, Z+5	; 0x05
     9ea:	c8 17       	cp	r28, r24
     9ec:	d9 07       	cpc	r29, r25
     9ee:	c0 f5       	brcc	.+112    	; 0xa60 <dir_next+0xe4>
     9f0:	2e c0       	rjmp	.+92     	; 0xa4e <dir_next+0xd2>
				return FR_NO_FILE;
		} else {                                     /* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) { /* Cluster changed? */
     9f2:	f7 01       	movw	r30, r14
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	9e 01       	movw	r18, r28
     9fc:	32 95       	swap	r19
     9fe:	22 95       	swap	r18
     a00:	2f 70       	andi	r18, 0x0F	; 15
     a02:	23 27       	eor	r18, r19
     a04:	3f 70       	andi	r19, 0x0F	; 15
     a06:	23 27       	eor	r18, r19
     a08:	82 23       	and	r24, r18
     a0a:	93 23       	and	r25, r19
     a0c:	89 2b       	or	r24, r25
     a0e:	f9 f4       	brne	.+62     	; 0xa4e <dir_next+0xd2>
				clst = get_fat(dj->clust);           /* Get next cluster */
     a10:	cb 01       	movw	r24, r22
     a12:	ba 01       	movw	r22, r20
     a14:	0e 94 32 04 	call	0x864	; 0x864 <get_fat>
				if (clst <= 1)
     a18:	62 30       	cpi	r22, 0x02	; 2
     a1a:	71 05       	cpc	r23, r1
     a1c:	81 05       	cpc	r24, r1
     a1e:	91 05       	cpc	r25, r1
     a20:	08 f1       	brcs	.+66     	; 0xa64 <dir_next+0xe8>
					return FR_DISK_ERR;
				if (clst >= fs->n_fatent) /* When it reached end of dynamic table */
     a22:	f7 01       	movw	r30, r14
     a24:	c6 80       	ldd	r12, Z+6	; 0x06
     a26:	d7 80       	ldd	r13, Z+7	; 0x07
     a28:	e0 84       	ldd	r14, Z+8	; 0x08
     a2a:	f1 84       	ldd	r15, Z+9	; 0x09
     a2c:	6c 15       	cp	r22, r12
     a2e:	7d 05       	cpc	r23, r13
     a30:	8e 05       	cpc	r24, r14
     a32:	9f 05       	cpc	r25, r15
     a34:	c8 f4       	brcc	.+50     	; 0xa68 <dir_next+0xec>
					return FR_NO_FILE;    /* Report EOT */
				dj->clust = clst;         /* Initialize data for new cluster */
     a36:	f8 01       	movw	r30, r16
     a38:	60 87       	std	Z+8, r22	; 0x08
     a3a:	71 87       	std	Z+9, r23	; 0x09
     a3c:	82 87       	std	Z+10, r24	; 0x0a
     a3e:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect  = clust2sect(clst);
     a40:	0e 94 25 03 	call	0x64a	; 0x64a <clust2sect>
     a44:	f8 01       	movw	r30, r16
     a46:	64 87       	std	Z+12, r22	; 0x0c
     a48:	75 87       	std	Z+13, r23	; 0x0d
     a4a:	86 87       	std	Z+14, r24	; 0x0e
     a4c:	97 87       	std	Z+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     a4e:	f8 01       	movw	r30, r16
     a50:	d1 83       	std	Z+1, r29	; 0x01
     a52:	c0 83       	st	Z, r28

	return FR_OK;
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	09 c0       	rjmp	.+18     	; 0xa6a <dir_next+0xee>
	WORD   i;
	FATFS *fs = FatFs;

	i = dj->index + 1;
	if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <dir_next+0xee>
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <dir_next+0xee>
	if (!(i % 16)) { /* Sector changed? */
		dj->sect++;  /* Next sector */

		if (dj->clust == 0) {       /* Static table */
			if (i >= fs->n_rootdir) /* Report EOT when end of table */
				return FR_NO_FILE;
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <dir_next+0xee>
		} else {                                     /* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) { /* Cluster changed? */
				clst = get_fat(dj->clust);           /* Get next cluster */
				if (clst <= 1)
					return FR_DISK_ERR;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <dir_next+0xee>
				if (clst >= fs->n_fatent) /* When it reached end of dynamic table */
					return FR_NO_FILE;    /* Report EOT */
     a68:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	08 95       	ret

00000a7c <dir_find>:
/*-----------------------------------------------------------------------*/

	static FRESULT dir_find(DIR * dj, /* Pointer to the directory object linked to the file name */
							BYTE *dir /* 32-byte working buffer */
	)
	{
     a7c:	cf 92       	push	r12
     a7e:	df 92       	push	r13
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	ec 01       	movw	r28, r24
     a8c:	6b 01       	movw	r12, r22
		FRESULT res;
		BYTE    c;

		res = dir_rewind(dj); /* Rewind directory object */
     a8e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <dir_rewind>
		if (res != FR_OK)
     a92:	81 11       	cpse	r24, r1
     a94:	37 c0       	rjmp	.+110    	; 0xb04 <dir_find+0x88>
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     a96:	28 81       	ld	r18, Y
     a98:	39 81       	ldd	r19, Y+1	; 0x01
     a9a:	2f 70       	andi	r18, 0x0F	; 15
     a9c:	33 27       	eor	r19, r19
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	22 95       	swap	r18
     aa4:	32 95       	swap	r19
     aa6:	30 7f       	andi	r19, 0xF0	; 240
     aa8:	32 27       	eor	r19, r18
     aaa:	20 7f       	andi	r18, 0xF0	; 240
     aac:	32 27       	eor	r19, r18
     aae:	4c 85       	ldd	r20, Y+12	; 0x0c
     ab0:	5d 85       	ldd	r21, Y+13	; 0x0d
     ab2:	6e 85       	ldd	r22, Y+14	; 0x0e
     ab4:	7f 85       	ldd	r23, Y+15	; 0x0f
     ab6:	00 e2       	ldi	r16, 0x20	; 32
     ab8:	10 e0       	ldi	r17, 0x00	; 0
     aba:	c6 01       	movw	r24, r12
     abc:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
					  ? FR_DISK_ERR
					  : FR_OK;
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	81 11       	cpse	r24, r1
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <dir_find+0x4c>
     ac6:	90 e0       	ldi	r25, 0x00	; 0
		res = dir_rewind(dj); /* Rewind directory object */
		if (res != FR_OK)
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     ac8:	f9 2e       	mov	r15, r25
					  ? FR_DISK_ERR
					  : FR_OK;
			if (res != FR_OK)
     aca:	91 11       	cpse	r25, r1
     acc:	16 c0       	rjmp	.+44     	; 0xafa <dir_find+0x7e>
				break;
			c = dir[DIR_Name]; /* First character */
     ace:	f6 01       	movw	r30, r12
     ad0:	80 81       	ld	r24, Z
			if (c == 0) { ///// hieerrr fout misschien
     ad2:	88 23       	and	r24, r24
     ad4:	a1 f0       	breq	.+40     	; 0xafe <dir_find+0x82>
				res = FR_NO_FILE;
				break;
			}                                                           /* Reached to end of table */
			if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     ad6:	83 85       	ldd	r24, Z+11	; 0x0b
     ad8:	83 fd       	sbrc	r24, 3
     ada:	09 c0       	rjmp	.+18     	; 0xaee <dir_find+0x72>
     adc:	6a 81       	ldd	r22, Y+2	; 0x02
     ade:	7b 81       	ldd	r23, Y+3	; 0x03
     ae0:	4b e0       	ldi	r20, 0x0B	; 11
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	c6 01       	movw	r24, r12
     ae6:	0e 94 08 03 	call	0x610	; 0x610 <mem_cmp>
     aea:	89 2b       	or	r24, r25
     aec:	51 f0       	breq	.+20     	; 0xb02 <dir_find+0x86>
				break;
			res = dir_next(dj); /* Next entry */
     aee:	ce 01       	movw	r24, r28
     af0:	0e 94 be 04 	call	0x97c	; 0x97c <dir_next>
		} while (res == FR_OK);
     af4:	88 23       	and	r24, r24
     af6:	79 f2       	breq	.-98     	; 0xa96 <dir_find+0x1a>
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <dir_find+0x88>
		res = dir_rewind(dj); /* Rewind directory object */
		if (res != FR_OK)
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     afa:	89 2f       	mov	r24, r25
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <dir_find+0x88>
					  : FR_OK;
			if (res != FR_OK)
				break;
			c = dir[DIR_Name]; /* First character */
			if (c == 0) { ///// hieerrr fout misschien
				res = FR_NO_FILE;
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <dir_find+0x88>
		res = dir_rewind(dj); /* Rewind directory object */
		if (res != FR_OK)
			return res;

		do {
			res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32) /* Read an entry */
     b02:	8f 2d       	mov	r24, r15
				break;
			res = dir_next(dj); /* Next entry */
		} while (res == FR_OK);

		return res;
	}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	08 95       	ret

00000b14 <follow_path>:
static FRESULT follow_path(                 /* FR_OK(0): successful, !=0: error code */
                           DIR *       dj,  /* Directory object to return last directory and found object */
                           BYTE *      dir, /* 32-byte working buffer */
                           const char *path /* Full-path string to find a file or directory */
)
{
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	00 d0       	rcall	.+0      	; 0xb22 <follow_path+0xe>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	8c 01       	movw	r16, r24
     b28:	7b 01       	movw	r14, r22
     b2a:	5a 83       	std	Y+2, r21	; 0x02
     b2c:	49 83       	std	Y+1, r20	; 0x01
	FRESULT res;

	while (*path == ' ')
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <follow_path+0x22>
		path++; /* Strip leading spaces */
     b30:	31 96       	adiw	r30, 0x01	; 1
     b32:	fa 83       	std	Y+2, r31	; 0x02
     b34:	e9 83       	std	Y+1, r30	; 0x01
                           const char *path /* Full-path string to find a file or directory */
)
{
	FRESULT res;

	while (*path == ' ')
     b36:	e9 81       	ldd	r30, Y+1	; 0x01
     b38:	fa 81       	ldd	r31, Y+2	; 0x02
     b3a:	80 81       	ld	r24, Z
     b3c:	80 32       	cpi	r24, 0x20	; 32
     b3e:	c1 f3       	breq	.-16     	; 0xb30 <follow_path+0x1c>
		path++; /* Strip leading spaces */
	if (*path == '/')
     b40:	8f 32       	cpi	r24, 0x2F	; 47
     b42:	19 f4       	brne	.+6      	; 0xb4a <follow_path+0x36>
		path++;     /* Strip heading separator if exist */
     b44:	31 96       	adiw	r30, 0x01	; 1
     b46:	fa 83       	std	Y+2, r31	; 0x02
     b48:	e9 83       	std	Y+1, r30	; 0x01
	dj->sclust = 0; /* Set start directory (always root dir) */
     b4a:	d8 01       	movw	r26, r16
     b4c:	14 96       	adiw	r26, 0x04	; 4
     b4e:	1d 92       	st	X+, r1
     b50:	1d 92       	st	X+, r1
     b52:	1d 92       	st	X+, r1
     b54:	1c 92       	st	X, r1
     b56:	17 97       	sbiw	r26, 0x07	; 7

	if ((BYTE)*path < ' ') { /* Null path means the root directory */
     b58:	e9 81       	ldd	r30, Y+1	; 0x01
     b5a:	fa 81       	ldd	r31, Y+2	; 0x02
     b5c:	80 81       	ld	r24, Z
     b5e:	80 32       	cpi	r24, 0x20	; 32
     b60:	30 f4       	brcc	.+12     	; 0xb6e <follow_path+0x5a>
		res    = dir_rewind(dj);
     b62:	c8 01       	movw	r24, r16
     b64:	0e 94 72 03 	call	0x6e4	; 0x6e4 <dir_rewind>
		dir[0] = 0;
     b68:	f7 01       	movw	r30, r14
     b6a:	10 82       	st	Z, r1
     b6c:	26 c0       	rjmp	.+76     	; 0xbba <follow_path+0xa6>

	} else { /* Follow path */
		for (;;) {
			res = create_name(dj, &path); /* Get a segment */
     b6e:	be 01       	movw	r22, r28
     b70:	6f 5f       	subi	r22, 0xFF	; 255
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	c8 01       	movw	r24, r16
     b76:	0e 94 b1 03 	call	0x762	; 0x762 <create_name>
			if (res != FR_OK)
     b7a:	81 11       	cpse	r24, r1
     b7c:	1e c0       	rjmp	.+60     	; 0xbba <follow_path+0xa6>
				break;
			res = dir_find(dj, dir); /* Find it */ // het gaat denk ik hier fout
     b7e:	b7 01       	movw	r22, r14
     b80:	c8 01       	movw	r24, r16
     b82:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dir_find>
			if (res != FR_OK)
     b86:	81 11       	cpse	r24, r1
     b88:	18 c0       	rjmp	.+48     	; 0xbba <follow_path+0xa6>
				break; /* Could not find the object */
			if (dj->fn[11])
     b8a:	d8 01       	movw	r26, r16
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	ed 91       	ld	r30, X+
     b90:	fc 91       	ld	r31, X
     b92:	13 97       	sbiw	r26, 0x03	; 3
     b94:	93 85       	ldd	r25, Z+11	; 0x0b
     b96:	91 11       	cpse	r25, r1
     b98:	10 c0       	rjmp	.+32     	; 0xbba <follow_path+0xa6>
				break;                       /* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
     b9a:	f7 01       	movw	r30, r14
     b9c:	83 85       	ldd	r24, Z+11	; 0x0b
     b9e:	84 ff       	sbrs	r24, 4
     ba0:	0b c0       	rjmp	.+22     	; 0xbb8 <follow_path+0xa4>
				res = FR_NO_FILE;
				break;
			}
			dj->sclust = get_clust(dir); /* Follow next */
     ba2:	c7 01       	movw	r24, r14
     ba4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_clust>
     ba8:	d8 01       	movw	r26, r16
     baa:	14 96       	adiw	r26, 0x04	; 4
     bac:	6d 93       	st	X+, r22
     bae:	7d 93       	st	X+, r23
     bb0:	8d 93       	st	X+, r24
     bb2:	9c 93       	st	X, r25
     bb4:	17 97       	sbiw	r26, 0x07	; 7
		}
     bb6:	db cf       	rjmp	.-74     	; 0xb6e <follow_path+0x5a>
			if (res != FR_OK)
				break; /* Could not find the object */
			if (dj->fn[11])
				break;                       /* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE;
     bb8:	83 e0       	ldi	r24, 0x03	; 3
			dj->sclust = get_clust(dir); /* Follow next */
		}
	}

	return res;
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <pf_mount>:
/*-----------------------------------------------------------------------*/
/* Mount/Unmount a Locical Drive                                         */
/*-----------------------------------------------------------------------*/

FRESULT pf_mount(FATFS *fs /* Pointer to new file system object */)
{
     bcc:	4f 92       	push	r4
     bce:	5f 92       	push	r5
     bd0:	6f 92       	push	r6
     bd2:	7f 92       	push	r7
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	a8 97       	sbiw	r28, 0x28	; 40
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	7c 01       	movw	r14, r24
	BYTE  fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;

	FatFs = 0;
     bfc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <FatFs+0x1>
     c00:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <FatFs>

	if (disk_initialize() & STA_NOINIT)
     c04:	0e 94 cb 00 	call	0x196	; 0x196 <disk_initialize>
     c08:	80 fd       	sbrc	r24, 0
     c0a:	62 c1       	rjmp	.+708    	; 0xed0 <pf_mount+0x304>
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt   = check_fs(buf, bsect); /* Check sector 0 as an SFD format */
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	ba 01       	movw	r22, r20
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <check_fs>
     c1a:	d8 2e       	mov	r13, r24
	if (fmt == 1) {               /* Not an FAT boot record, it may be FDISK format */
     c1c:	21 e0       	ldi	r18, 0x01	; 1
     c1e:	82 13       	cpse	r24, r18
     c20:	38 c0       	rjmp	.+112    	; 0xc92 <pf_mount+0xc6>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) { /* 1st partition entry */
     c22:	00 e1       	ldi	r16, 0x10	; 16
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	2e eb       	ldi	r18, 0xBE	; 190
     c28:	31 e0       	ldi	r19, 0x01	; 1
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	ba 01       	movw	r22, r20
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     c38:	81 11       	cpse	r24, r1
     c3a:	2f c0       	rjmp	.+94     	; 0xc9a <pf_mount+0xce>
			fmt = 3;
		} else {
			if (buf[4]) {                     /* Is the partition existing? */
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	88 23       	and	r24, r24
     c40:	a1 f1       	breq	.+104    	; 0xcaa <pf_mount+0xde>
				bsect = LD_DWORD(&buf[8]);    /* Partition offset in LBA */
     c42:	8c 84       	ldd	r8, Y+12	; 0x0c
     c44:	91 2c       	mov	r9, r1
     c46:	a1 2c       	mov	r10, r1
     c48:	b1 2c       	mov	r11, r1
     c4a:	b8 2c       	mov	r11, r8
     c4c:	aa 24       	eor	r10, r10
     c4e:	99 24       	eor	r9, r9
     c50:	88 24       	eor	r8, r8
     c52:	9b 85       	ldd	r25, Y+11	; 0x0b
     c54:	89 2f       	mov	r24, r25
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	dc 01       	movw	r26, r24
     c5e:	99 27       	eor	r25, r25
     c60:	88 27       	eor	r24, r24
     c62:	88 29       	or	r24, r8
     c64:	99 29       	or	r25, r9
     c66:	aa 29       	or	r26, r10
     c68:	bb 29       	or	r27, r11
     c6a:	8a 84       	ldd	r8, Y+10	; 0x0a
     c6c:	91 2c       	mov	r9, r1
     c6e:	98 2c       	mov	r9, r8
     c70:	88 24       	eor	r8, r8
     c72:	a1 2c       	mov	r10, r1
     c74:	b1 2c       	mov	r11, r1
     c76:	88 2a       	or	r8, r24
     c78:	99 2a       	or	r9, r25
     c7a:	aa 2a       	or	r10, r26
     c7c:	bb 2a       	or	r11, r27
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	88 2a       	or	r8, r24
				fmt   = check_fs(buf, bsect); /* Check the partition */
     c82:	b5 01       	movw	r22, r10
     c84:	a4 01       	movw	r20, r8
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <check_fs>
     c8e:	d8 2e       	mov	r13, r24
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <pf_mount+0xe4>
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
     c92:	81 2c       	mov	r8, r1
     c94:	91 2c       	mov	r9, r1
     c96:	54 01       	movw	r10, r8
     c98:	0b c0       	rjmp	.+22     	; 0xcb0 <pf_mount+0xe4>
     c9a:	81 2c       	mov	r8, r1
     c9c:	91 2c       	mov	r9, r1
     c9e:	54 01       	movw	r10, r8
	fmt   = check_fs(buf, bsect); /* Check sector 0 as an SFD format */
	if (fmt == 1) {               /* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) { /* 1st partition entry */
			fmt = 3;
     ca0:	0f 2e       	mov	r0, r31
     ca2:	f3 e0       	ldi	r31, 0x03	; 3
     ca4:	df 2e       	mov	r13, r31
     ca6:	f0 2d       	mov	r31, r0
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <pf_mount+0xe4>
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
	} 

	/* Search FAT partition on the drive */
	bsect = 0;
     caa:	81 2c       	mov	r8, r1
     cac:	91 2c       	mov	r9, r1
     cae:	54 01       	movw	r10, r8
				bsect = LD_DWORD(&buf[8]);    /* Partition offset in LBA */
				fmt   = check_fs(buf, bsect); /* Check the partition */
			}
		}
	}
	if (fmt == 3)
     cb0:	43 e0       	ldi	r20, 0x03	; 3
     cb2:	d4 16       	cp	r13, r20
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <pf_mount+0xec>
     cb6:	0e c1       	rjmp	.+540    	; 0xed4 <pf_mount+0x308>
		return FR_DISK_ERR;
	if (fmt)
     cb8:	d1 10       	cpse	r13, r1
     cba:	0e c1       	rjmp	.+540    	; 0xed8 <pf_mount+0x30c>
		return FR_NO_FILESYSTEM; /* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf)))
     cbc:	04 e2       	ldi	r16, 0x24	; 36
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	2d e0       	ldi	r18, 0x0D	; 13
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	b5 01       	movw	r22, r10
     cc6:	a4 01       	movw	r20, r8
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
     cd0:	81 11       	cpse	r24, r1
     cd2:	04 c1       	rjmp	.+520    	; 0xedc <pf_mount+0x310>
		return FR_DISK_ERR;

	fsize = LD_WORD(buf + BPB_FATSz16 - 13); /* Number of sectors per FAT */
     cd4:	2b 85       	ldd	r18, Y+11	; 0x0b
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	32 2f       	mov	r19, r18
     cda:	22 27       	eor	r18, r18
     cdc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cde:	28 2b       	or	r18, r24
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize)
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	41 05       	cpc	r20, r1
     cea:	51 05       	cpc	r21, r1
     cec:	21 f5       	brne	.+72     	; 0xd36 <pf_mount+0x16a>
		fsize = LD_DWORD(buf + BPB_FATSz32 - 13);
     cee:	2b 8d       	ldd	r18, Y+27	; 0x1b
     cf0:	82 2f       	mov	r24, r18
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a0 e0       	ldi	r26, 0x00	; 0
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	78 2f       	mov	r23, r24
     cfa:	66 27       	eor	r22, r22
     cfc:	55 27       	eor	r21, r21
     cfe:	44 27       	eor	r20, r20
     d00:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d02:	89 2f       	mov	r24, r25
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	dc 01       	movw	r26, r24
     d0c:	99 27       	eor	r25, r25
     d0e:	88 27       	eor	r24, r24
     d10:	84 2b       	or	r24, r20
     d12:	95 2b       	or	r25, r21
     d14:	a6 2b       	or	r26, r22
     d16:	b7 2b       	or	r27, r23
     d18:	29 8d       	ldd	r18, Y+25	; 0x19
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	32 2f       	mov	r19, r18
     d1e:	22 27       	eor	r18, r18
     d20:	a9 01       	movw	r20, r18
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	48 2b       	or	r20, r24
     d28:	59 2b       	or	r21, r25
     d2a:	6a 2b       	or	r22, r26
     d2c:	7b 2b       	or	r23, r27
     d2e:	88 8d       	ldd	r24, Y+24	; 0x18
     d30:	9a 01       	movw	r18, r20
     d32:	ab 01       	movw	r20, r22
     d34:	28 2b       	or	r18, r24

	fsize *= buf[BPB_NumFATs - 13];                             /* Number of sectors in FAT area */
     d36:	ac 81       	ldd	r26, Y+4	; 0x04
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	0e 94 31 0b 	call	0x1662	; 0x1662 <__muluhisi3>
     d3e:	6d a3       	std	Y+37, r22	; 0x25
     d40:	7e a3       	std	Y+38, r23	; 0x26
     d42:	8f a3       	std	Y+39, r24	; 0x27
     d44:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase   = bsect + LD_WORD(buf + BPB_RsvdSecCnt - 13); /* FAT start sector (lba) */
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	98 2f       	mov	r25, r24
     d4c:	88 27       	eor	r24, r24
     d4e:	4a 81       	ldd	r20, Y+2	; 0x02
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	84 2b       	or	r24, r20
     d54:	95 2b       	or	r25, r21
     d56:	88 0e       	add	r8, r24
     d58:	99 1e       	adc	r9, r25
     d5a:	a1 1c       	adc	r10, r1
     d5c:	b1 1c       	adc	r11, r1
     d5e:	d7 01       	movw	r26, r14
     d60:	1a 96       	adiw	r26, 0x0a	; 10
     d62:	8d 92       	st	X+, r8
     d64:	9d 92       	st	X+, r9
     d66:	ad 92       	st	X+, r10
     d68:	bc 92       	st	X, r11
     d6a:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize     = buf[BPB_SecPerClus - 13];                   /* Number of sectors per cluster */
     d6c:	a9 81       	ldd	r26, Y+1	; 0x01
     d6e:	f7 01       	movw	r30, r14
     d70:	a2 83       	std	Z+2, r26	; 0x02
	fs->n_rootdir = LD_WORD(buf + BPB_RootEntCnt - 13);         /* Nmuber of root directory entries */
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	98 2f       	mov	r25, r24
     d78:	88 27       	eor	r24, r24
     d7a:	2d 81       	ldd	r18, Y+5	; 0x05
     d7c:	82 2b       	or	r24, r18
     d7e:	95 83       	std	Z+5, r25	; 0x05
     d80:	84 83       	std	Z+4, r24	; 0x04
	tsect         = LD_WORD(buf + BPB_TotSec16 - 13);           /* Number of sectors on the file system */
     d82:	08 85       	ldd	r16, Y+8	; 0x08
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	10 2f       	mov	r17, r16
     d88:	00 27       	eor	r16, r16
     d8a:	2f 81       	ldd	r18, Y+7	; 0x07
     d8c:	02 2b       	or	r16, r18
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
	if (!tsect)
     d92:	01 15       	cp	r16, r1
     d94:	11 05       	cpc	r17, r1
     d96:	21 05       	cpc	r18, r1
     d98:	31 05       	cpc	r19, r1
     d9a:	01 f5       	brne	.+64     	; 0xddc <pf_mount+0x210>
		tsect = LD_DWORD(buf + BPB_TotSec32 - 13);
     d9c:	0f 89       	ldd	r16, Y+23	; 0x17
     d9e:	10 e0       	ldi	r17, 0x00	; 0
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	70 2e       	mov	r7, r16
     da6:	66 24       	eor	r6, r6
     da8:	55 24       	eor	r5, r5
     daa:	44 24       	eor	r4, r4
     dac:	0e 89       	ldd	r16, Y+22	; 0x16
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	98 01       	movw	r18, r16
     db6:	11 27       	eor	r17, r17
     db8:	00 27       	eor	r16, r16
     dba:	40 2a       	or	r4, r16
     dbc:	51 2a       	or	r5, r17
     dbe:	62 2a       	or	r6, r18
     dc0:	73 2a       	or	r7, r19
     dc2:	2d 89       	ldd	r18, Y+21	; 0x15
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	32 2f       	mov	r19, r18
     dc8:	22 27       	eor	r18, r18
     dca:	89 01       	movw	r16, r18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	04 29       	or	r16, r4
     dd2:	15 29       	or	r17, r5
     dd4:	26 29       	or	r18, r6
     dd6:	37 29       	or	r19, r7
     dd8:	6c 89       	ldd	r22, Y+20	; 0x14
     dda:	06 2b       	or	r16, r22
	mclst = (tsect /* Last cluster# + 1 */
	         - LD_WORD(buf + BPB_RsvdSecCnt - 13) - fsize - fs->n_rootdir / 16)
     ddc:	eb 81       	ldd	r30, Y+3	; 0x03
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	fe 2f       	mov	r31, r30
     de2:	ee 27       	eor	r30, r30
     de4:	4e 2b       	or	r20, r30
     de6:	5f 2b       	or	r21, r31
     de8:	04 1b       	sub	r16, r20
     dea:	15 0b       	sbc	r17, r21
     dec:	21 09       	sbc	r18, r1
     dee:	31 09       	sbc	r19, r1
     df0:	4d a1       	ldd	r20, Y+37	; 0x25
     df2:	5e a1       	ldd	r21, Y+38	; 0x26
     df4:	6f a1       	ldd	r22, Y+39	; 0x27
     df6:	78 a5       	ldd	r23, Y+40	; 0x28
     df8:	04 1b       	sub	r16, r20
     dfa:	15 0b       	sbc	r17, r21
     dfc:	26 0b       	sbc	r18, r22
     dfe:	37 0b       	sbc	r19, r23
     e00:	92 95       	swap	r25
     e02:	82 95       	swap	r24
     e04:	8f 70       	andi	r24, 0x0F	; 15
     e06:	89 27       	eor	r24, r25
     e08:	9f 70       	andi	r25, 0x0F	; 15
     e0a:	89 27       	eor	r24, r25
     e0c:	2c 01       	movw	r4, r24
     e0e:	61 2c       	mov	r6, r1
     e10:	71 2c       	mov	r7, r1
     e12:	c9 01       	movw	r24, r18
     e14:	b8 01       	movw	r22, r16
     e16:	64 19       	sub	r22, r4
     e18:	75 09       	sbc	r23, r5
     e1a:	86 09       	sbc	r24, r6
     e1c:	97 09       	sbc	r25, r7
	            / fs->csize
     e1e:	2a 2f       	mov	r18, r26
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	0e 94 0f 0b 	call	0x161e	; 0x161e <__udivmodsi4>
	fs->csize     = buf[BPB_SecPerClus - 13];                   /* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf + BPB_RootEntCnt - 13);         /* Nmuber of root directory entries */
	tsect         = LD_WORD(buf + BPB_TotSec16 - 13);           /* Number of sectors on the file system */
	if (!tsect)
		tsect = LD_DWORD(buf + BPB_TotSec32 - 13);
	mclst = (tsect /* Last cluster# + 1 */
     e2a:	da 01       	movw	r26, r20
     e2c:	c9 01       	movw	r24, r18
     e2e:	02 96       	adiw	r24, 0x02	; 2
     e30:	a1 1d       	adc	r26, r1
     e32:	b1 1d       	adc	r27, r1
	         - LD_WORD(buf + BPB_RsvdSecCnt - 13) - fsize - fs->n_rootdir / 16)
	            / fs->csize
	        + 2;
	fs->n_fatent = (CLUST)mclst;
     e34:	f7 01       	movw	r30, r14
     e36:	86 83       	std	Z+6, r24	; 0x06
     e38:	97 83       	std	Z+7, r25	; 0x07
     e3a:	a0 87       	std	Z+8, r26	; 0x08
     e3c:	b1 87       	std	Z+9, r27	; 0x09
	fmt = 0; /* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
     e3e:	87 3f       	cpi	r24, 0xF7	; 247
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	a1 05       	cpc	r26, r1
     e44:	b1 05       	cpc	r27, r1
     e46:	20 f0       	brcs	.+8      	; 0xe50 <pf_mount+0x284>
		fmt = FS_FAT32;
     e48:	0f 2e       	mov	r0, r31
     e4a:	f3 e0       	ldi	r31, 0x03	; 3
     e4c:	df 2e       	mov	r13, r31
     e4e:	f0 2d       	mov	r31, r0
	if (!fmt)
     e50:	dd 20       	and	r13, r13
     e52:	09 f4       	brne	.+2      	; 0xe56 <pf_mount+0x28a>
     e54:	45 c0       	rjmp	.+138    	; 0xee0 <pf_mount+0x314>
		return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
     e56:	d7 01       	movw	r26, r14
     e58:	dc 92       	st	X, r13

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf + (BPB_RootClus - 13)); /* Root directory start cluster */
     e5a:	8b a1       	ldd	r24, Y+35	; 0x23
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a0 e0       	ldi	r26, 0x00	; 0
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	78 2f       	mov	r23, r24
     e64:	66 27       	eor	r22, r22
     e66:	55 27       	eor	r21, r21
     e68:	44 27       	eor	r20, r20
     e6a:	8a a1       	ldd	r24, Y+34	; 0x22
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	dc 01       	movw	r26, r24
     e74:	99 27       	eor	r25, r25
     e76:	88 27       	eor	r24, r24
     e78:	84 2b       	or	r24, r20
     e7a:	95 2b       	or	r25, r21
     e7c:	a6 2b       	or	r26, r22
     e7e:	b7 2b       	or	r27, r23
     e80:	49 a1       	ldd	r20, Y+33	; 0x21
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	54 2f       	mov	r21, r20
     e86:	44 27       	eor	r20, r20
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	84 2b       	or	r24, r20
     e8e:	95 2b       	or	r25, r21
     e90:	a6 2b       	or	r26, r22
     e92:	b7 2b       	or	r27, r23
     e94:	28 a1       	ldd	r18, Y+32	; 0x20
     e96:	82 2b       	or	r24, r18
     e98:	f7 01       	movw	r30, r14
     e9a:	86 87       	std	Z+14, r24	; 0x0e
     e9c:	97 87       	std	Z+15, r25	; 0x0f
     e9e:	a0 8b       	std	Z+16, r26	; 0x10
     ea0:	b1 8b       	std	Z+17, r27	; 0x11
	else
		fs->dirbase = fs->fatbase + fsize;                   /* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16; /* Data start sector (lba) */
     ea2:	4d a1       	ldd	r20, Y+37	; 0x25
     ea4:	5e a1       	ldd	r21, Y+38	; 0x26
     ea6:	6f a1       	ldd	r22, Y+39	; 0x27
     ea8:	78 a5       	ldd	r23, Y+40	; 0x28
     eaa:	84 0e       	add	r8, r20
     eac:	95 1e       	adc	r9, r21
     eae:	a6 1e       	adc	r10, r22
     eb0:	b7 1e       	adc	r11, r23
     eb2:	84 0c       	add	r8, r4
     eb4:	95 1c       	adc	r9, r5
     eb6:	a6 1c       	adc	r10, r6
     eb8:	b7 1c       	adc	r11, r7
     eba:	82 8a       	std	Z+18, r8	; 0x12
     ebc:	93 8a       	std	Z+19, r9	; 0x13
     ebe:	a4 8a       	std	Z+20, r10	; 0x14
     ec0:	b5 8a       	std	Z+21, r11	; 0x15

	fs->flag = 0;
     ec2:	11 82       	std	Z+1, r1	; 0x01
	FatFs    = fs;
     ec4:	f0 92 24 01 	sts	0x0124, r15	; 0x800124 <FatFs+0x1>
     ec8:	e0 92 23 01 	sts	0x0123, r14	; 0x800123 <FatFs>

	return FR_OK;
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <pf_mount+0x316>
	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)
	{
		/* Check if the drive is ready or not */
		return FR_NOT_READY;
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	07 c0       	rjmp	.+14     	; 0xee2 <pf_mount+0x316>
				fmt   = check_fs(buf, bsect); /* Check the partition */
			}
		}
	}
	if (fmt == 3)
		return FR_DISK_ERR;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <pf_mount+0x316>
	if (fmt)
		return FR_NO_FILESYSTEM; /* No valid FAT patition is found */
     ed8:	86 e0       	ldi	r24, 0x06	; 6
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <pf_mount+0x316>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf)))
		return FR_DISK_ERR;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <pf_mount+0x316>
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt)
		return FR_NO_FILESYSTEM;
     ee0:	86 e0       	ldi	r24, 0x06	; 6

	fs->flag = 0;
	FatFs    = fs;

	return FR_OK;
}
     ee2:	a8 96       	adiw	r28, 0x28	; 40
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	7f 90       	pop	r7
     f06:	6f 90       	pop	r6
     f08:	5f 90       	pop	r5
     f0a:	4f 90       	pop	r4
     f0c:	08 95       	ret

00000f0e <pf_open>:
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT pf_open(const char *path /* Pointer to the file name */
)
 {
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	ec 97       	sbiw	r28, 0x3c	; 60
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR     dj;
	BYTE    sp[12], dir[32];
	FATFS * fs = FatFs;
     f26:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <FatFs>
     f2a:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <FatFs+0x1>

	if (!fs)
     f2e:	01 15       	cp	r16, r1
     f30:	11 05       	cpc	r17, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <pf_open+0x28>
     f34:	4a c0       	rjmp	.+148    	; 0xfca <pf_open+0xbc>
     f36:	ac 01       	movw	r20, r24
		return FR_NOT_ENABLED; /* Check file system */

	fs->flag = 0;
     f38:	f8 01       	movw	r30, r16
     f3a:	11 82       	std	Z+1, r1	; 0x01
	dj.fn    = sp;
     f3c:	ce 01       	movw	r24, r28
     f3e:	41 96       	adiw	r24, 0x11	; 17
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	8b 83       	std	Y+3, r24	; 0x03
	res      = follow_path(&dj, dir, path); /* Follow the file path */
     f44:	be 01       	movw	r22, r28
     f46:	63 5e       	subi	r22, 0xE3	; 227
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	40 97       	sbiw	r24, 0x10	; 16
     f4c:	0e 94 8a 05 	call	0xb14	; 0xb14 <follow_path>
	if (res != FR_OK)
     f50:	81 11       	cpse	r24, r1
     f52:	40 c0       	rjmp	.+128    	; 0xfd4 <pf_open+0xc6>
		return res;                          /* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) /* It is a directory */ // hier gaat het fout
     f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f56:	88 23       	and	r24, r24
     f58:	d1 f1       	breq	.+116    	; 0xfce <pf_open+0xc0>
     f5a:	88 a5       	ldd	r24, Y+40	; 0x28
     f5c:	84 fd       	sbrc	r24, 4
     f5e:	39 c0       	rjmp	.+114    	; 0xfd2 <pf_open+0xc4>
		return FR_NO_FILE;
	

	fs->org_clust = get_clust(dir);               /* File start cluster */
     f60:	ce 01       	movw	r24, r28
     f62:	4d 96       	adiw	r24, 0x1d	; 29
     f64:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_clust>
     f68:	f8 01       	movw	r30, r16
     f6a:	66 8f       	std	Z+30, r22	; 0x1e
     f6c:	77 8f       	std	Z+31, r23	; 0x1f
     f6e:	80 a3       	std	Z+32, r24	; 0x20
     f70:	91 a3       	std	Z+33, r25	; 0x21
	fs->fsize     = LD_DWORD(dir + DIR_FileSize); /* File size */
     f72:	8c ad       	ldd	r24, Y+60	; 0x3c
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	78 2f       	mov	r23, r24
     f7c:	66 27       	eor	r22, r22
     f7e:	55 27       	eor	r21, r21
     f80:	44 27       	eor	r20, r20
     f82:	9b ad       	ldd	r25, Y+59	; 0x3b
     f84:	89 2f       	mov	r24, r25
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	dc 01       	movw	r26, r24
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	84 2b       	or	r24, r20
     f94:	95 2b       	or	r25, r21
     f96:	a6 2b       	or	r26, r22
     f98:	b7 2b       	or	r27, r23
     f9a:	4a ad       	ldd	r20, Y+58	; 0x3a
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	54 2f       	mov	r21, r20
     fa0:	44 27       	eor	r20, r20
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	84 2b       	or	r24, r20
     fa8:	95 2b       	or	r25, r21
     faa:	a6 2b       	or	r26, r22
     fac:	b7 2b       	or	r27, r23
     fae:	29 ad       	ldd	r18, Y+57	; 0x39
     fb0:	82 2b       	or	r24, r18
     fb2:	82 8f       	std	Z+26, r24	; 0x1a
     fb4:	93 8f       	std	Z+27, r25	; 0x1b
     fb6:	a4 8f       	std	Z+28, r26	; 0x1c
     fb8:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr      = 0;                            /* File pointer */
     fba:	16 8a       	std	Z+22, r1	; 0x16
     fbc:	17 8a       	std	Z+23, r1	; 0x17
     fbe:	10 8e       	std	Z+24, r1	; 0x18
     fc0:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag      = FA_OPENED;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <pf_open+0xc6>
	DIR     dj;
	BYTE    sp[12], dir[32];
	FATFS * fs = FatFs;

	if (!fs)
		return FR_NOT_ENABLED; /* Check file system */
     fca:	85 e0       	ldi	r24, 0x05	; 5
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <pf_open+0xc6>
	dj.fn    = sp;
	res      = follow_path(&dj, dir, path); /* Follow the file path */
	if (res != FR_OK)
		return res;                          /* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) /* It is a directory */ // hier gaat het fout
		return FR_NO_FILE;
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <pf_open+0xc6>
     fd2:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize     = LD_DWORD(dir + DIR_FileSize); /* File size */
	fs->fptr      = 0;                            /* File pointer */
	fs->flag      = FA_OPENED;

	return FR_OK;
}
     fd4:	ec 96       	adiw	r28, 0x3c	; 60
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <pf_read>:

FRESULT pf_read(void *buff, /* Pointer to the read buffer (NULL:Forward data to the stream)*/
                UINT  btr,  /* Number of bytes to read */
                UINT *br    /* Pointer to number of bytes read */
)
{
     fea:	6f 92       	push	r6
     fec:	7f 92       	push	r7
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	3c 01       	movw	r6, r24
    1008:	6b 01       	movw	r12, r22
    100a:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST   clst;
	DWORD   sect, remain;
	UINT    rcnt;
	BYTE    cs, *rbuff = buff;
	FATFS * fs = FatFs;
    100c:	e0 90 23 01 	lds	r14, 0x0123	; 0x800123 <FatFs>
    1010:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <FatFs+0x1>

	*br = 0;
    1014:	fa 01       	movw	r30, r20
    1016:	11 82       	std	Z+1, r1	; 0x01
    1018:	10 82       	st	Z, r1
	if (!fs)
    101a:	e1 14       	cp	r14, r1
    101c:	f1 04       	cpc	r15, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <pf_read+0x38>
    1020:	b5 c0       	rjmp	.+362    	; 0x118c <pf_read+0x1a2>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    1022:	f7 01       	movw	r30, r14
    1024:	81 81       	ldd	r24, Z+1	; 0x01
    1026:	80 ff       	sbrs	r24, 0
    1028:	b3 c0       	rjmp	.+358    	; 0x1190 <pf_read+0x1a6>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    102a:	82 8d       	ldd	r24, Z+26	; 0x1a
    102c:	93 8d       	ldd	r25, Z+27	; 0x1b
    102e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1030:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1032:	46 89       	ldd	r20, Z+22	; 0x16
    1034:	57 89       	ldd	r21, Z+23	; 0x17
    1036:	60 8d       	ldd	r22, Z+24	; 0x18
    1038:	71 8d       	ldd	r23, Z+25	; 0x19
    103a:	84 1b       	sub	r24, r20
    103c:	95 0b       	sbc	r25, r21
    103e:	a6 0b       	sbc	r26, r22
    1040:	b7 0b       	sbc	r27, r23
	if (btr > remain)
    1042:	a6 01       	movw	r20, r12
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	84 17       	cp	r24, r20
    104a:	95 07       	cpc	r25, r21
    104c:	a6 07       	cpc	r26, r22
    104e:	b7 07       	cpc	r27, r23
    1050:	08 f4       	brcc	.+2      	; 0x1054 <pf_read+0x6a>
		btr = (UINT)remain; /* Truncate btr by remaining bytes */
    1052:	6c 01       	movw	r12, r24
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512; /* Get partial sector data from sector buffer */
		if (rcnt > btr)
			rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    1054:	53 01       	movw	r10, r6
    1056:	94 c0       	rjmp	.+296    	; 0x1180 <pf_read+0x196>
	remain = fs->fsize - fs->fptr;
	if (btr > remain)
		btr = (UINT)remain; /* Truncate btr by remaining bytes */

	while (btr) {                                          /* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {                       /* On the sector boundary? */
    1058:	f7 01       	movw	r30, r14
    105a:	86 89       	ldd	r24, Z+22	; 0x16
    105c:	97 89       	ldd	r25, Z+23	; 0x17
    105e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1060:	b1 8d       	ldd	r27, Z+25	; 0x19
    1062:	ac 01       	movw	r20, r24
    1064:	bd 01       	movw	r22, r26
    1066:	51 70       	andi	r21, 0x01	; 1
    1068:	66 27       	eor	r22, r22
    106a:	77 27       	eor	r23, r23
    106c:	45 2b       	or	r20, r21
    106e:	46 2b       	or	r20, r22
    1070:	47 2b       	or	r20, r23
    1072:	09 f0       	breq	.+2      	; 0x1076 <pf_read+0x8c>
    1074:	48 c0       	rjmp	.+144    	; 0x1106 <pf_read+0x11c>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1)); /* Sector offset in the cluster */
    1076:	c2 81       	ldd	r28, Z+2	; 0x02
    1078:	c1 50       	subi	r28, 0x01	; 1
    107a:	ac 01       	movw	r20, r24
    107c:	bd 01       	movw	r22, r26
    107e:	03 2e       	mov	r0, r19
    1080:	39 e0       	ldi	r19, 0x09	; 9
    1082:	76 95       	lsr	r23
    1084:	67 95       	ror	r22
    1086:	57 95       	ror	r21
    1088:	47 95       	ror	r20
    108a:	3a 95       	dec	r19
    108c:	d1 f7       	brne	.-12     	; 0x1082 <pf_read+0x98>
    108e:	30 2d       	mov	r19, r0
    1090:	c4 23       	and	r28, r20
			if (!cs) {                                     /* On the cluster boundary? */
    1092:	f1 f4       	brne	.+60     	; 0x10d0 <pf_read+0xe6>
				if (fs->fptr == 0)                         /* On the top of the file? */
    1094:	89 2b       	or	r24, r25
    1096:	8a 2b       	or	r24, r26
    1098:	8b 2b       	or	r24, r27
    109a:	29 f4       	brne	.+10     	; 0x10a6 <pf_read+0xbc>
					clst = fs->org_clust;
    109c:	66 8d       	ldd	r22, Z+30	; 0x1e
    109e:	77 8d       	ldd	r23, Z+31	; 0x1f
    10a0:	80 a1       	ldd	r24, Z+32	; 0x20
    10a2:	91 a1       	ldd	r25, Z+33	; 0x21
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <pf_read+0xca>
				else
					clst = get_fat(fs->curr_clust);
    10a6:	f7 01       	movw	r30, r14
    10a8:	62 a1       	ldd	r22, Z+34	; 0x22
    10aa:	73 a1       	ldd	r23, Z+35	; 0x23
    10ac:	84 a1       	ldd	r24, Z+36	; 0x24
    10ae:	95 a1       	ldd	r25, Z+37	; 0x25
    10b0:	0e 94 32 04 	call	0x864	; 0x864 <get_fat>
				if (clst <= 1)
    10b4:	62 30       	cpi	r22, 0x02	; 2
    10b6:	71 05       	cpc	r23, r1
    10b8:	81 05       	cpc	r24, r1
    10ba:	91 05       	cpc	r25, r1
    10bc:	20 f4       	brcc	.+8      	; 0x10c6 <pf_read+0xdc>
					ABORT(FR_DISK_ERR);
    10be:	f7 01       	movw	r30, r14
    10c0:	11 82       	std	Z+1, r1	; 0x01
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	66 c0       	rjmp	.+204    	; 0x1192 <pf_read+0x1a8>
				fs->curr_clust = clst; /* Update current cluster */
    10c6:	f7 01       	movw	r30, r14
    10c8:	62 a3       	std	Z+34, r22	; 0x22
    10ca:	73 a3       	std	Z+35, r23	; 0x23
    10cc:	84 a3       	std	Z+36, r24	; 0x24
    10ce:	95 a3       	std	Z+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust); /* Get current sector */
    10d0:	f7 01       	movw	r30, r14
    10d2:	62 a1       	ldd	r22, Z+34	; 0x22
    10d4:	73 a1       	ldd	r23, Z+35	; 0x23
    10d6:	84 a1       	ldd	r24, Z+36	; 0x24
    10d8:	95 a1       	ldd	r25, Z+37	; 0x25
    10da:	0e 94 25 03 	call	0x64a	; 0x64a <clust2sect>
			if (!sect)
    10de:	61 15       	cp	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	81 05       	cpc	r24, r1
    10e4:	91 05       	cpc	r25, r1
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <pf_read+0x106>
				ABORT(FR_DISK_ERR);
    10e8:	f7 01       	movw	r30, r14
    10ea:	11 82       	std	Z+1, r1	; 0x01
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	51 c0       	rjmp	.+162    	; 0x1192 <pf_read+0x1a8>
			fs->dsect = sect + cs;
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	8c 0f       	add	r24, r28
    10f6:	91 1d       	adc	r25, r1
    10f8:	a1 1d       	adc	r26, r1
    10fa:	b1 1d       	adc	r27, r1
    10fc:	f7 01       	movw	r30, r14
    10fe:	86 a3       	std	Z+38, r24	; 0x26
    1100:	97 a3       	std	Z+39, r25	; 0x27
    1102:	a0 a7       	std	Z+40, r26	; 0x28
    1104:	b1 a7       	std	Z+41, r27	; 0x29
		}
		rcnt = 512 - (UINT)fs->fptr % 512; /* Get partial sector data from sector buffer */
    1106:	f7 01       	movw	r30, r14
    1108:	86 89       	ldd	r24, Z+22	; 0x16
    110a:	97 89       	ldd	r25, Z+23	; 0x17
    110c:	a0 8d       	ldd	r26, Z+24	; 0x18
    110e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1110:	9c 01       	movw	r18, r24
    1112:	31 70       	andi	r19, 0x01	; 1
    1114:	c0 e0       	ldi	r28, 0x00	; 0
    1116:	d2 e0       	ldi	r29, 0x02	; 2
    1118:	c2 1b       	sub	r28, r18
    111a:	d3 0b       	sbc	r29, r19
		if (rcnt > btr)
    111c:	cc 16       	cp	r12, r28
    111e:	dd 06       	cpc	r13, r29
    1120:	08 f4       	brcc	.+2      	; 0x1124 <pf_read+0x13a>
			rcnt = btr;
    1122:	e6 01       	movw	r28, r12
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    1124:	f7 01       	movw	r30, r14
    1126:	46 a1       	ldd	r20, Z+38	; 0x26
    1128:	57 a1       	ldd	r21, Z+39	; 0x27
    112a:	60 a5       	ldd	r22, Z+40	; 0x28
    112c:	71 a5       	ldd	r23, Z+41	; 0x29
    112e:	61 14       	cp	r6, r1
    1130:	71 04       	cpc	r7, r1
    1132:	19 f4       	brne	.+6      	; 0x113a <pf_read+0x150>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <pf_read+0x154>
    113a:	8a 2d       	mov	r24, r10
    113c:	9b 2d       	mov	r25, r11
    113e:	8e 01       	movw	r16, r28
    1140:	0e 94 ab 01 	call	0x356	; 0x356 <disk_readp>
		if (dr)
    1144:	88 23       	and	r24, r24
    1146:	21 f0       	breq	.+8      	; 0x1150 <pf_read+0x166>
			ABORT(FR_DISK_ERR);
    1148:	f7 01       	movw	r30, r14
    114a:	11 82       	std	Z+1, r1	; 0x01
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	21 c0       	rjmp	.+66     	; 0x1192 <pf_read+0x1a8>
		fs->fptr += rcnt;
    1150:	f7 01       	movw	r30, r14
    1152:	86 89       	ldd	r24, Z+22	; 0x16
    1154:	97 89       	ldd	r25, Z+23	; 0x17
    1156:	a0 8d       	ldd	r26, Z+24	; 0x18
    1158:	b1 8d       	ldd	r27, Z+25	; 0x19
    115a:	8c 0f       	add	r24, r28
    115c:	9d 1f       	adc	r25, r29
    115e:	a1 1d       	adc	r26, r1
    1160:	b1 1d       	adc	r27, r1
    1162:	86 8b       	std	Z+22, r24	; 0x16
    1164:	97 8b       	std	Z+23, r25	; 0x17
    1166:	a0 8f       	std	Z+24, r26	; 0x18
    1168:	b1 8f       	std	Z+25, r27	; 0x19
		rbuff += rcnt; /* Update pointers and counters */
    116a:	ac 0e       	add	r10, r28
    116c:	bd 1e       	adc	r11, r29
		btr -= rcnt;
    116e:	cc 1a       	sub	r12, r28
    1170:	dd 0a       	sbc	r13, r29
		*br += rcnt;
    1172:	f4 01       	movw	r30, r8
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	c8 0f       	add	r28, r24
    117a:	d9 1f       	adc	r29, r25
    117c:	d1 83       	std	Z+1, r29	; 0x01
    117e:	c0 83       	st	Z, r28

	remain = fs->fsize - fs->fptr;
	if (btr > remain)
		btr = (UINT)remain; /* Truncate btr by remaining bytes */

	while (btr) {                                          /* Repeat until all data transferred */
    1180:	c1 14       	cp	r12, r1
    1182:	d1 04       	cpc	r13, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <pf_read+0x19e>
    1186:	68 cf       	rjmp	.-304    	; 0x1058 <pf_read+0x6e>
		rbuff += rcnt; /* Update pointers and counters */
		btr -= rcnt;
		*br += rcnt;
	}

	return FR_OK;
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <pf_read+0x1a8>
	BYTE    cs, *rbuff = buff;
	FATFS * fs = FatFs;

	*br = 0;
	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <pf_read+0x1a8>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    1190:	84 e0       	ldi	r24, 0x04	; 4
		btr -= rcnt;
		*br += rcnt;
	}

	return FR_OK;
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	af 90       	pop	r10
    11a6:	9f 90       	pop	r9
    11a8:	8f 90       	pop	r8
    11aa:	7f 90       	pop	r7
    11ac:	6f 90       	pop	r6
    11ae:	08 95       	ret

000011b0 <pf_write>:

FRESULT pf_write(const void *buff, /* Pointer to the data to be written */
                 UINT        btw,  /* Number of bytes to write (0:Finalize the current write operation) */
                 UINT *      bw    /* Pointer to number of bytes written */
)
{
    11b0:	4f 92       	push	r4
    11b2:	5f 92       	push	r5
    11b4:	6f 92       	push	r6
    11b6:	7f 92       	push	r7
    11b8:	af 92       	push	r10
    11ba:	bf 92       	push	r11
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	7c 01       	movw	r14, r24
    11ce:	5b 01       	movw	r10, r22
    11d0:	6a 01       	movw	r12, r20
	CLUST       clst;
	DWORD       sect, remain;
	const BYTE *p = buff;
	BYTE        cs;
	UINT        wcnt;
	FATFS *     fs = FatFs;
    11d2:	c0 91 23 01 	lds	r28, 0x0123	; 0x800123 <FatFs>
    11d6:	d0 91 24 01 	lds	r29, 0x0124	; 0x800124 <FatFs+0x1>

	*bw = 0;
    11da:	fa 01       	movw	r30, r20
    11dc:	11 82       	std	Z+1, r1	; 0x01
    11de:	10 82       	st	Z, r1
	if (!fs)
    11e0:	20 97       	sbiw	r28, 0x00	; 0
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <pf_write+0x36>
    11e4:	df c0       	rjmp	.+446    	; 0x13a4 <pf_write+0x1f4>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	80 ff       	sbrs	r24, 0
    11ea:	de c0       	rjmp	.+444    	; 0x13a8 <pf_write+0x1f8>
		return FR_NOT_OPENED;

	if (!btw) { /* Finalize request */
    11ec:	67 2b       	or	r22, r23
    11ee:	99 f4       	brne	.+38     	; 0x1216 <pf_write+0x66>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0))
    11f0:	86 ff       	sbrs	r24, 6
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <pf_write+0x5c>
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	ba 01       	movw	r22, r20
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    1202:	88 23       	and	r24, r24
    1204:	19 f0       	breq	.+6      	; 0x120c <pf_write+0x5c>
			ABORT(FR_DISK_ERR);
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	cf c0       	rjmp	.+414    	; 0x13aa <pf_write+0x1fa>
		fs->flag &= ~FA__WIP;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	8f 7b       	andi	r24, 0xBF	; 191
    1210:	89 83       	std	Y+1, r24	; 0x01
		return FR_OK;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	ca c0       	rjmp	.+404    	; 0x13aa <pf_write+0x1fa>
	} else {                       /* Write data request */
		if (!(fs->flag & FA__WIP)) /* Round-down fptr to the sector boundary */
    1216:	86 fd       	sbrc	r24, 6
    1218:	0a c0       	rjmp	.+20     	; 0x122e <pf_write+0x7e>
			fs->fptr &= 0xFFFFFE00;
    121a:	8e 89       	ldd	r24, Y+22	; 0x16
    121c:	9f 89       	ldd	r25, Y+23	; 0x17
    121e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1220:	b9 8d       	ldd	r27, Y+25	; 0x19
    1222:	88 27       	eor	r24, r24
    1224:	9e 7f       	andi	r25, 0xFE	; 254
    1226:	8e 8b       	std	Y+22, r24	; 0x16
    1228:	9f 8b       	std	Y+23, r25	; 0x17
    122a:	a8 8f       	std	Y+24, r26	; 0x18
    122c:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    122e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1230:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1232:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1234:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1236:	4e 89       	ldd	r20, Y+22	; 0x16
    1238:	5f 89       	ldd	r21, Y+23	; 0x17
    123a:	68 8d       	ldd	r22, Y+24	; 0x18
    123c:	79 8d       	ldd	r23, Y+25	; 0x19
    123e:	84 1b       	sub	r24, r20
    1240:	95 0b       	sbc	r25, r21
    1242:	a6 0b       	sbc	r26, r22
    1244:	b7 0b       	sbc	r27, r23
	if (btw > remain)
    1246:	a5 01       	movw	r20, r10
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	84 17       	cp	r24, r20
    124e:	95 07       	cpc	r25, r21
    1250:	a6 07       	cpc	r26, r22
    1252:	b7 07       	cpc	r27, r23
    1254:	08 f0       	brcs	.+2      	; 0x1258 <pf_write+0xa8>
    1256:	a0 c0       	rjmp	.+320    	; 0x1398 <pf_write+0x1e8>
		btw = (UINT)remain; /* Truncate btw by remaining bytes */
    1258:	5c 01       	movw	r10, r24
    125a:	9e c0       	rjmp	.+316    	; 0x1398 <pf_write+0x1e8>

	while (btw) {                                          /* Repeat until all data transferred */
		if ((UINT)fs->fptr % 512 == 0) {                   /* On the sector boundary? */
    125c:	8e 89       	ldd	r24, Y+22	; 0x16
    125e:	9f 89       	ldd	r25, Y+23	; 0x17
    1260:	a8 8d       	ldd	r26, Y+24	; 0x18
    1262:	b9 8d       	ldd	r27, Y+25	; 0x19
    1264:	9c 01       	movw	r18, r24
    1266:	31 70       	andi	r19, 0x01	; 1
    1268:	23 2b       	or	r18, r19
    126a:	09 f0       	breq	.+2      	; 0x126e <pf_write+0xbe>
    126c:	4e c0       	rjmp	.+156    	; 0x130a <pf_write+0x15a>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1)); /* Sector offset in the cluster */
    126e:	1a 81       	ldd	r17, Y+2	; 0x02
    1270:	11 50       	subi	r17, 0x01	; 1
    1272:	ac 01       	movw	r20, r24
    1274:	bd 01       	movw	r22, r26
    1276:	03 2e       	mov	r0, r19
    1278:	39 e0       	ldi	r19, 0x09	; 9
    127a:	76 95       	lsr	r23
    127c:	67 95       	ror	r22
    127e:	57 95       	ror	r21
    1280:	47 95       	ror	r20
    1282:	3a 95       	dec	r19
    1284:	d1 f7       	brne	.-12     	; 0x127a <pf_write+0xca>
    1286:	30 2d       	mov	r19, r0
    1288:	14 23       	and	r17, r20
			if (!cs) {                                     /* On the cluster boundary? */
    128a:	d9 f4       	brne	.+54     	; 0x12c2 <pf_write+0x112>
				if (fs->fptr == 0)                         /* On the top of the file? */
    128c:	89 2b       	or	r24, r25
    128e:	8a 2b       	or	r24, r26
    1290:	8b 2b       	or	r24, r27
    1292:	29 f4       	brne	.+10     	; 0x129e <pf_write+0xee>
					clst = fs->org_clust;
    1294:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1296:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1298:	88 a1       	ldd	r24, Y+32	; 0x20
    129a:	99 a1       	ldd	r25, Y+33	; 0x21
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <pf_write+0xfa>
				else
					clst = get_fat(fs->curr_clust);
    129e:	6a a1       	ldd	r22, Y+34	; 0x22
    12a0:	7b a1       	ldd	r23, Y+35	; 0x23
    12a2:	8c a1       	ldd	r24, Y+36	; 0x24
    12a4:	9d a1       	ldd	r25, Y+37	; 0x25
    12a6:	0e 94 32 04 	call	0x864	; 0x864 <get_fat>
				if (clst <= 1)
    12aa:	62 30       	cpi	r22, 0x02	; 2
    12ac:	71 05       	cpc	r23, r1
    12ae:	81 05       	cpc	r24, r1
    12b0:	91 05       	cpc	r25, r1
    12b2:	18 f4       	brcc	.+6      	; 0x12ba <pf_write+0x10a>
					ABORT(FR_DISK_ERR);
    12b4:	19 82       	std	Y+1, r1	; 0x01
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	78 c0       	rjmp	.+240    	; 0x13aa <pf_write+0x1fa>
				fs->curr_clust = clst; /* Update current cluster */
    12ba:	6a a3       	std	Y+34, r22	; 0x22
    12bc:	7b a3       	std	Y+35, r23	; 0x23
    12be:	8c a3       	std	Y+36, r24	; 0x24
    12c0:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust); /* Get current sector */
    12c2:	6a a1       	ldd	r22, Y+34	; 0x22
    12c4:	7b a1       	ldd	r23, Y+35	; 0x23
    12c6:	8c a1       	ldd	r24, Y+36	; 0x24
    12c8:	9d a1       	ldd	r25, Y+37	; 0x25
    12ca:	0e 94 25 03 	call	0x64a	; 0x64a <clust2sect>
			if (!sect)
    12ce:	61 15       	cp	r22, r1
    12d0:	71 05       	cpc	r23, r1
    12d2:	81 05       	cpc	r24, r1
    12d4:	91 05       	cpc	r25, r1
    12d6:	19 f4       	brne	.+6      	; 0x12de <pf_write+0x12e>
				ABORT(FR_DISK_ERR);
    12d8:	19 82       	std	Y+1, r1	; 0x01
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	66 c0       	rjmp	.+204    	; 0x13aa <pf_write+0x1fa>
			fs->dsect = sect + cs;
    12de:	ab 01       	movw	r20, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	41 0f       	add	r20, r17
    12e4:	51 1d       	adc	r21, r1
    12e6:	61 1d       	adc	r22, r1
    12e8:	71 1d       	adc	r23, r1
    12ea:	4e a3       	std	Y+38, r20	; 0x26
    12ec:	5f a3       	std	Y+39, r21	; 0x27
    12ee:	68 a7       	std	Y+40, r22	; 0x28
    12f0:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect))
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    12fa:	88 23       	and	r24, r24
    12fc:	19 f0       	breq	.+6      	; 0x1304 <pf_write+0x154>
				ABORT(FR_DISK_ERR); /* Initiate a sector write operation */
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	53 c0       	rjmp	.+166    	; 0x13aa <pf_write+0x1fa>
			fs->flag |= FA__WIP;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	80 64       	ori	r24, 0x40	; 64
    1308:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - (UINT)fs->fptr % 512; /* Number of bytes to write to the sector */
    130a:	8e 89       	ldd	r24, Y+22	; 0x16
    130c:	9f 89       	ldd	r25, Y+23	; 0x17
    130e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1310:	b9 8d       	ldd	r27, Y+25	; 0x19
    1312:	91 70       	andi	r25, 0x01	; 1
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	12 e0       	ldi	r17, 0x02	; 2
    1318:	08 1b       	sub	r16, r24
    131a:	19 0b       	sbc	r17, r25
		if (wcnt > btw)
    131c:	a0 16       	cp	r10, r16
    131e:	b1 06       	cpc	r11, r17
    1320:	08 f4       	brcc	.+2      	; 0x1324 <pf_write+0x174>
			wcnt = btw;
    1322:	85 01       	movw	r16, r10
		if (disk_writep(p, wcnt))
    1324:	28 01       	movw	r4, r16
    1326:	61 2c       	mov	r6, r1
    1328:	71 2c       	mov	r7, r1
    132a:	b3 01       	movw	r22, r6
    132c:	a2 01       	movw	r20, r4
    132e:	c7 01       	movw	r24, r14
    1330:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    1334:	88 23       	and	r24, r24
    1336:	19 f0       	breq	.+6      	; 0x133e <pf_write+0x18e>
			ABORT(FR_DISK_ERR); /* Send data to the sector */
    1338:	19 82       	std	Y+1, r1	; 0x01
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	36 c0       	rjmp	.+108    	; 0x13aa <pf_write+0x1fa>
		fs->fptr += wcnt;
    133e:	8e 89       	ldd	r24, Y+22	; 0x16
    1340:	9f 89       	ldd	r25, Y+23	; 0x17
    1342:	a8 8d       	ldd	r26, Y+24	; 0x18
    1344:	b9 8d       	ldd	r27, Y+25	; 0x19
    1346:	48 0e       	add	r4, r24
    1348:	59 1e       	adc	r5, r25
    134a:	6a 1e       	adc	r6, r26
    134c:	7b 1e       	adc	r7, r27
    134e:	4e 8a       	std	Y+22, r4	; 0x16
    1350:	5f 8a       	std	Y+23, r5	; 0x17
    1352:	68 8e       	std	Y+24, r6	; 0x18
    1354:	79 8e       	std	Y+25, r7	; 0x19
		p += wcnt; /* Update pointers and counters */
    1356:	e0 0e       	add	r14, r16
    1358:	f1 1e       	adc	r15, r17
		btw -= wcnt;
    135a:	a0 1a       	sub	r10, r16
    135c:	b1 0a       	sbc	r11, r17
		*bw += wcnt;
    135e:	f6 01       	movw	r30, r12
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	08 0f       	add	r16, r24
    1366:	19 1f       	adc	r17, r25
    1368:	11 83       	std	Z+1, r17	; 0x01
    136a:	00 83       	st	Z, r16
		if ((UINT)fs->fptr % 512 == 0) {
    136c:	8e 89       	ldd	r24, Y+22	; 0x16
    136e:	9f 89       	ldd	r25, Y+23	; 0x17
    1370:	a8 8d       	ldd	r26, Y+24	; 0x18
    1372:	b9 8d       	ldd	r27, Y+25	; 0x19
    1374:	91 70       	andi	r25, 0x01	; 1
    1376:	89 2b       	or	r24, r25
    1378:	79 f4       	brne	.+30     	; 0x1398 <pf_write+0x1e8>
			if (disk_writep(0, 0))
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	ba 01       	movw	r22, r20
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 0e 02 	call	0x41c	; 0x41c <disk_writep>
    1388:	88 23       	and	r24, r24
    138a:	19 f0       	breq	.+6      	; 0x1392 <pf_write+0x1e2>
				ABORT(FR_DISK_ERR); /* Finalize the current sector write operation */
    138c:	19 82       	std	Y+1, r1	; 0x01
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0c c0       	rjmp	.+24     	; 0x13aa <pf_write+0x1fa>
			fs->flag &= ~FA__WIP;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	8f 7b       	andi	r24, 0xBF	; 191
    1396:	89 83       	std	Y+1, r24	; 0x01
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain)
		btw = (UINT)remain; /* Truncate btw by remaining bytes */

	while (btw) {                                          /* Repeat until all data transferred */
    1398:	a1 14       	cp	r10, r1
    139a:	b1 04       	cpc	r11, r1
    139c:	09 f0       	breq	.+2      	; 0x13a0 <pf_write+0x1f0>
    139e:	5e cf       	rjmp	.-324    	; 0x125c <pf_write+0xac>
				ABORT(FR_DISK_ERR); /* Finalize the current sector write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <pf_write+0x1fa>
	UINT        wcnt;
	FATFS *     fs = FatFs;

	*bw = 0;
	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <pf_write+0x1fa>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    13a8:	84 e0       	ldi	r24, 0x04	; 4
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	af 90       	pop	r10
    13be:	7f 90       	pop	r7
    13c0:	6f 90       	pop	r6
    13c2:	5f 90       	pop	r5
    13c4:	4f 90       	pop	r4
    13c6:	08 95       	ret

000013c8 <pf_lseek>:
/*-----------------------------------------------------------------------*/
#if _USE_LSEEK

FRESULT pf_lseek(DWORD ofs /* File pointer from top of file */
)
{
    13c8:	4f 92       	push	r4
    13ca:	5f 92       	push	r5
    13cc:	6f 92       	push	r6
    13ce:	7f 92       	push	r7
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <pf_lseek+0x1e>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <pf_lseek+0x20>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <pf_lseek+0x22>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	CLUST  clst;
	DWORD  bcs, sect, ifptr;
	FATFS *fs = FatFs;
    13ee:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <FatFs>
    13f2:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <FatFs+0x1>
    13f6:	3e 83       	std	Y+6, r19	; 0x06
    13f8:	2d 83       	std	Y+5, r18	; 0x05

	if (!fs)
    13fa:	21 15       	cp	r18, r1
    13fc:	31 05       	cpc	r19, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <pf_lseek+0x3a>
    1400:	f4 c0       	rjmp	.+488    	; 0x15ea <pf_lseek+0x222>
		return FR_NOT_ENABLED;   /* Check file system */
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
    1402:	d9 01       	movw	r26, r18
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	2c 91       	ld	r18, X
    1408:	11 97       	sbiw	r26, 0x01	; 1
    140a:	20 ff       	sbrs	r18, 0
    140c:	f0 c0       	rjmp	.+480    	; 0x15ee <pf_lseek+0x226>
		return FR_NOT_OPENED;

	if (ofs > fs->fsize)
    140e:	5a 96       	adiw	r26, 0x1a	; 26
    1410:	cd 90       	ld	r12, X+
    1412:	dd 90       	ld	r13, X+
    1414:	ed 90       	ld	r14, X+
    1416:	fc 90       	ld	r15, X
    1418:	5d 97       	sbiw	r26, 0x1d	; 29
    141a:	c6 16       	cp	r12, r22
    141c:	d7 06       	cpc	r13, r23
    141e:	e8 06       	cpc	r14, r24
    1420:	f9 06       	cpc	r15, r25
    1422:	10 f0       	brcs	.+4      	; 0x1428 <pf_lseek+0x60>
    1424:	6b 01       	movw	r12, r22
    1426:	7c 01       	movw	r14, r24
		ofs = fs->fsize; /* Clip offset with the file size */
	ifptr    = fs->fptr;
    1428:	ed 81       	ldd	r30, Y+5	; 0x05
    142a:	fe 81       	ldd	r31, Y+6	; 0x06
    142c:	46 88       	ldd	r4, Z+22	; 0x16
    142e:	57 88       	ldd	r5, Z+23	; 0x17
    1430:	60 8c       	ldd	r6, Z+24	; 0x18
    1432:	71 8c       	ldd	r7, Z+25	; 0x19
	fs->fptr = 0;
    1434:	16 8a       	std	Z+22, r1	; 0x16
    1436:	17 8a       	std	Z+23, r1	; 0x17
    1438:	10 8e       	std	Z+24, r1	; 0x18
    143a:	11 8e       	std	Z+25, r1	; 0x19
	if (ofs > 0) {
    143c:	c1 14       	cp	r12, r1
    143e:	d1 04       	cpc	r13, r1
    1440:	e1 04       	cpc	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <pf_lseek+0x80>
    1446:	d5 c0       	rjmp	.+426    	; 0x15f2 <pf_lseek+0x22a>
		bcs = (DWORD)fs->csize * 512;                            /* Cluster size (byte) */
    1448:	82 80       	ldd	r8, Z+2	; 0x02
    144a:	91 2c       	mov	r9, r1
    144c:	a1 2c       	mov	r10, r1
    144e:	b1 2c       	mov	r11, r1
    1450:	07 2e       	mov	r0, r23
    1452:	79 e0       	ldi	r23, 0x09	; 9
    1454:	88 0c       	add	r8, r8
    1456:	99 1c       	adc	r9, r9
    1458:	aa 1c       	adc	r10, r10
    145a:	bb 1c       	adc	r11, r11
    145c:	7a 95       	dec	r23
    145e:	d1 f7       	brne	.-12     	; 0x1454 <pf_lseek+0x8c>
    1460:	70 2d       	mov	r23, r0
		if (ifptr > 0 && (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
    1462:	41 14       	cp	r4, r1
    1464:	51 04       	cpc	r5, r1
    1466:	61 04       	cpc	r6, r1
    1468:	71 04       	cpc	r7, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <pf_lseek+0xa6>
    146c:	40 c0       	rjmp	.+128    	; 0x14ee <pf_lseek+0x126>
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	61 50       	subi	r22, 0x01	; 1
    1474:	71 09       	sbc	r23, r1
    1476:	81 09       	sbc	r24, r1
    1478:	91 09       	sbc	r25, r1
    147a:	a5 01       	movw	r20, r10
    147c:	94 01       	movw	r18, r8
    147e:	0e 94 0f 0b 	call	0x161e	; 0x161e <__udivmodsi4>
    1482:	29 83       	std	Y+1, r18	; 0x01
    1484:	3a 83       	std	Y+2, r19	; 0x02
    1486:	4b 83       	std	Y+3, r20	; 0x03
    1488:	5c 83       	std	Y+4, r21	; 0x04
    148a:	b1 e0       	ldi	r27, 0x01	; 1
    148c:	4b 1a       	sub	r4, r27
    148e:	51 08       	sbc	r5, r1
    1490:	61 08       	sbc	r6, r1
    1492:	71 08       	sbc	r7, r1
    1494:	c3 01       	movw	r24, r6
    1496:	b2 01       	movw	r22, r4
    1498:	a5 01       	movw	r20, r10
    149a:	94 01       	movw	r18, r8
    149c:	0e 94 0f 0b 	call	0x161e	; 0x161e <__udivmodsi4>
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	ab 81       	ldd	r26, Y+3	; 0x03
    14a6:	bc 81       	ldd	r27, Y+4	; 0x04
    14a8:	82 17       	cp	r24, r18
    14aa:	93 07       	cpc	r25, r19
    14ac:	a4 07       	cpc	r26, r20
    14ae:	b5 07       	cpc	r27, r21
    14b0:	f0 f0       	brcs	.+60     	; 0x14ee <pf_lseek+0x126>
			fs->fptr = (ifptr - 1) & ~(bcs - 1);                 /* start from the current cluster */
    14b2:	88 27       	eor	r24, r24
    14b4:	99 27       	eor	r25, r25
    14b6:	dc 01       	movw	r26, r24
    14b8:	88 19       	sub	r24, r8
    14ba:	99 09       	sbc	r25, r9
    14bc:	aa 09       	sbc	r26, r10
    14be:	bb 09       	sbc	r27, r11
    14c0:	48 22       	and	r4, r24
    14c2:	59 22       	and	r5, r25
    14c4:	6a 22       	and	r6, r26
    14c6:	7b 22       	and	r7, r27
    14c8:	ad 81       	ldd	r26, Y+5	; 0x05
    14ca:	be 81       	ldd	r27, Y+6	; 0x06
    14cc:	56 96       	adiw	r26, 0x16	; 22
    14ce:	4d 92       	st	X+, r4
    14d0:	5d 92       	st	X+, r5
    14d2:	6d 92       	st	X+, r6
    14d4:	7c 92       	st	X, r7
    14d6:	59 97       	sbiw	r26, 0x19	; 25
			ofs -= fs->fptr;
    14d8:	c4 18       	sub	r12, r4
    14da:	d5 08       	sbc	r13, r5
    14dc:	e6 08       	sbc	r14, r6
    14de:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
    14e0:	92 96       	adiw	r26, 0x22	; 34
    14e2:	6d 91       	ld	r22, X+
    14e4:	7d 91       	ld	r23, X+
    14e6:	8d 91       	ld	r24, X+
    14e8:	9c 91       	ld	r25, X
    14ea:	95 97       	sbiw	r26, 0x25	; 37
    14ec:	39 c0       	rjmp	.+114    	; 0x1560 <pf_lseek+0x198>
		} else {                            /* When seek to back cluster, */
			clst           = fs->org_clust; /* start from the first cluster */
    14ee:	ed 81       	ldd	r30, Y+5	; 0x05
    14f0:	fe 81       	ldd	r31, Y+6	; 0x06
    14f2:	66 8d       	ldd	r22, Z+30	; 0x1e
    14f4:	77 8d       	ldd	r23, Z+31	; 0x1f
    14f6:	80 a1       	ldd	r24, Z+32	; 0x20
    14f8:	91 a1       	ldd	r25, Z+33	; 0x21
			fs->curr_clust = clst;
    14fa:	62 a3       	std	Z+34, r22	; 0x22
    14fc:	73 a3       	std	Z+35, r23	; 0x23
    14fe:	84 a3       	std	Z+36, r24	; 0x24
    1500:	95 a3       	std	Z+37, r25	; 0x25
    1502:	2e c0       	rjmp	.+92     	; 0x1560 <pf_lseek+0x198>
		}
		while (ofs > bcs) {       /* Cluster following loop */
			clst = get_fat(clst); /* Follow cluster chain */
    1504:	0e 94 32 04 	call	0x864	; 0x864 <get_fat>
			if (clst <= 1 || clst >= fs->n_fatent)
    1508:	62 30       	cpi	r22, 0x02	; 2
    150a:	71 05       	cpc	r23, r1
    150c:	81 05       	cpc	r24, r1
    150e:	91 05       	cpc	r25, r1
    1510:	58 f0       	brcs	.+22     	; 0x1528 <pf_lseek+0x160>
    1512:	ed 81       	ldd	r30, Y+5	; 0x05
    1514:	fe 81       	ldd	r31, Y+6	; 0x06
    1516:	46 80       	ldd	r4, Z+6	; 0x06
    1518:	57 80       	ldd	r5, Z+7	; 0x07
    151a:	60 84       	ldd	r6, Z+8	; 0x08
    151c:	71 84       	ldd	r7, Z+9	; 0x09
    151e:	64 15       	cp	r22, r4
    1520:	75 05       	cpc	r23, r5
    1522:	86 05       	cpc	r24, r6
    1524:	97 05       	cpc	r25, r7
    1526:	30 f0       	brcs	.+12     	; 0x1534 <pf_lseek+0x16c>
				ABORT(FR_DISK_ERR);
    1528:	ad 81       	ldd	r26, Y+5	; 0x05
    152a:	be 81       	ldd	r27, Y+6	; 0x06
    152c:	11 96       	adiw	r26, 0x01	; 1
    152e:	1c 92       	st	X, r1
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	60 c0       	rjmp	.+192    	; 0x15f4 <pf_lseek+0x22c>
			fs->curr_clust = clst;
    1534:	ed 81       	ldd	r30, Y+5	; 0x05
    1536:	fe 81       	ldd	r31, Y+6	; 0x06
    1538:	62 a3       	std	Z+34, r22	; 0x22
    153a:	73 a3       	std	Z+35, r23	; 0x23
    153c:	84 a3       	std	Z+36, r24	; 0x24
    153e:	95 a3       	std	Z+37, r25	; 0x25
			fs->fptr += bcs;
    1540:	46 88       	ldd	r4, Z+22	; 0x16
    1542:	57 88       	ldd	r5, Z+23	; 0x17
    1544:	60 8c       	ldd	r6, Z+24	; 0x18
    1546:	71 8c       	ldd	r7, Z+25	; 0x19
    1548:	48 0c       	add	r4, r8
    154a:	59 1c       	adc	r5, r9
    154c:	6a 1c       	adc	r6, r10
    154e:	7b 1c       	adc	r7, r11
    1550:	46 8a       	std	Z+22, r4	; 0x16
    1552:	57 8a       	std	Z+23, r5	; 0x17
    1554:	60 8e       	std	Z+24, r6	; 0x18
    1556:	71 8e       	std	Z+25, r7	; 0x19
			ofs -= bcs;
    1558:	c8 18       	sub	r12, r8
    155a:	d9 08       	sbc	r13, r9
    155c:	ea 08       	sbc	r14, r10
    155e:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {                            /* When seek to back cluster, */
			clst           = fs->org_clust; /* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {       /* Cluster following loop */
    1560:	8c 14       	cp	r8, r12
    1562:	9d 04       	cpc	r9, r13
    1564:	ae 04       	cpc	r10, r14
    1566:	bf 04       	cpc	r11, r15
    1568:	68 f2       	brcs	.-102    	; 0x1504 <pf_lseek+0x13c>
				ABORT(FR_DISK_ERR);
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    156a:	ed 81       	ldd	r30, Y+5	; 0x05
    156c:	fe 81       	ldd	r31, Y+6	; 0x06
    156e:	86 88       	ldd	r8, Z+22	; 0x16
    1570:	97 88       	ldd	r9, Z+23	; 0x17
    1572:	a0 8c       	ldd	r10, Z+24	; 0x18
    1574:	b1 8c       	ldd	r11, Z+25	; 0x19
    1576:	c8 0c       	add	r12, r8
    1578:	d9 1c       	adc	r13, r9
    157a:	ea 1c       	adc	r14, r10
    157c:	fb 1c       	adc	r15, r11
    157e:	c6 8a       	std	Z+22, r12	; 0x16
    1580:	d7 8a       	std	Z+23, r13	; 0x17
    1582:	e0 8e       	std	Z+24, r14	; 0x18
    1584:	f1 8e       	std	Z+25, r15	; 0x19
		sect = clust2sect(clst); /* Current sector */
    1586:	0e 94 25 03 	call	0x64a	; 0x64a <clust2sect>
		if (!sect)
    158a:	61 15       	cp	r22, r1
    158c:	71 05       	cpc	r23, r1
    158e:	81 05       	cpc	r24, r1
    1590:	91 05       	cpc	r25, r1
    1592:	29 f4       	brne	.+10     	; 0x159e <pf_lseek+0x1d6>
			ABORT(FR_DISK_ERR);
    1594:	ed 81       	ldd	r30, Y+5	; 0x05
    1596:	fe 81       	ldd	r31, Y+6	; 0x06
    1598:	11 82       	std	Z+1, r1	; 0x01
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	2b c0       	rjmp	.+86     	; 0x15f4 <pf_lseek+0x22c>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    159e:	0b 2e       	mov	r0, r27
    15a0:	b9 e0       	ldi	r27, 0x09	; 9
    15a2:	f6 94       	lsr	r15
    15a4:	e7 94       	ror	r14
    15a6:	d7 94       	ror	r13
    15a8:	c7 94       	ror	r12
    15aa:	ba 95       	dec	r27
    15ac:	d1 f7       	brne	.-12     	; 0x15a2 <pf_lseek+0x1da>
    15ae:	b0 2d       	mov	r27, r0
    15b0:	ad 81       	ldd	r26, Y+5	; 0x05
    15b2:	be 81       	ldd	r27, Y+6	; 0x06
    15b4:	12 96       	adiw	r26, 0x02	; 2
    15b6:	2c 91       	ld	r18, X
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	21 50       	subi	r18, 0x01	; 1
    15bc:	31 09       	sbc	r19, r1
    15be:	49 01       	movw	r8, r18
    15c0:	33 0f       	add	r19, r19
    15c2:	aa 08       	sbc	r10, r10
    15c4:	bb 08       	sbc	r11, r11
    15c6:	c8 20       	and	r12, r8
    15c8:	d9 20       	and	r13, r9
    15ca:	ea 20       	and	r14, r10
    15cc:	fb 20       	and	r15, r11
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	8c 0d       	add	r24, r12
    15d4:	9d 1d       	adc	r25, r13
    15d6:	ae 1d       	adc	r26, r14
    15d8:	bf 1d       	adc	r27, r15
    15da:	ed 81       	ldd	r30, Y+5	; 0x05
    15dc:	fe 81       	ldd	r31, Y+6	; 0x06
    15de:	86 a3       	std	Z+38, r24	; 0x26
    15e0:	97 a3       	std	Z+39, r25	; 0x27
    15e2:	a0 a7       	std	Z+40, r26	; 0x28
    15e4:	b1 a7       	std	Z+41, r27	; 0x29
	}

	return FR_OK;
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <pf_lseek+0x22c>
	CLUST  clst;
	DWORD  bcs, sect, ifptr;
	FATFS *fs = FatFs;

	if (!fs)
		return FR_NOT_ENABLED;   /* Check file system */
    15ea:	85 e0       	ldi	r24, 0x05	; 5
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <pf_lseek+0x22c>
	if (!(fs->flag & FA_OPENED)) /* Check if opened */
		return FR_NOT_OPENED;
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <pf_lseek+0x22c>
		if (!sect)
			ABORT(FR_DISK_ERR);
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
}
    15f4:	26 96       	adiw	r28, 0x06	; 6
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	df 90       	pop	r13
    160a:	cf 90       	pop	r12
    160c:	bf 90       	pop	r11
    160e:	af 90       	pop	r10
    1610:	9f 90       	pop	r9
    1612:	8f 90       	pop	r8
    1614:	7f 90       	pop	r7
    1616:	6f 90       	pop	r6
    1618:	5f 90       	pop	r5
    161a:	4f 90       	pop	r4
    161c:	08 95       	ret

0000161e <__udivmodsi4>:
    161e:	a1 e2       	ldi	r26, 0x21	; 33
    1620:	1a 2e       	mov	r1, r26
    1622:	aa 1b       	sub	r26, r26
    1624:	bb 1b       	sub	r27, r27
    1626:	fd 01       	movw	r30, r26
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <__udivmodsi4_ep>

0000162a <__udivmodsi4_loop>:
    162a:	aa 1f       	adc	r26, r26
    162c:	bb 1f       	adc	r27, r27
    162e:	ee 1f       	adc	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	a2 17       	cp	r26, r18
    1634:	b3 07       	cpc	r27, r19
    1636:	e4 07       	cpc	r30, r20
    1638:	f5 07       	cpc	r31, r21
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__udivmodsi4_ep>
    163c:	a2 1b       	sub	r26, r18
    163e:	b3 0b       	sbc	r27, r19
    1640:	e4 0b       	sbc	r30, r20
    1642:	f5 0b       	sbc	r31, r21

00001644 <__udivmodsi4_ep>:
    1644:	66 1f       	adc	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	1a 94       	dec	r1
    164e:	69 f7       	brne	.-38     	; 0x162a <__udivmodsi4_loop>
    1650:	60 95       	com	r22
    1652:	70 95       	com	r23
    1654:	80 95       	com	r24
    1656:	90 95       	com	r25
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	bd 01       	movw	r22, r26
    165e:	cf 01       	movw	r24, r30
    1660:	08 95       	ret

00001662 <__muluhisi3>:
    1662:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__umulhisi3>
    1666:	a5 9f       	mul	r26, r21
    1668:	90 0d       	add	r25, r0
    166a:	b4 9f       	mul	r27, r20
    166c:	90 0d       	add	r25, r0
    166e:	a4 9f       	mul	r26, r20
    1670:	80 0d       	add	r24, r0
    1672:	91 1d       	adc	r25, r1
    1674:	11 24       	eor	r1, r1
    1676:	08 95       	ret

00001678 <__umulhisi3>:
    1678:	a2 9f       	mul	r26, r18
    167a:	b0 01       	movw	r22, r0
    167c:	b3 9f       	mul	r27, r19
    167e:	c0 01       	movw	r24, r0
    1680:	a3 9f       	mul	r26, r19
    1682:	70 0d       	add	r23, r0
    1684:	81 1d       	adc	r24, r1
    1686:	11 24       	eor	r1, r1
    1688:	91 1d       	adc	r25, r1
    168a:	b2 9f       	mul	r27, r18
    168c:	70 0d       	add	r23, r0
    168e:	81 1d       	adc	r24, r1
    1690:	11 24       	eor	r1, r1
    1692:	91 1d       	adc	r25, r1
    1694:	08 95       	ret

00001696 <_exit>:
    1696:	f8 94       	cli

00001698 <__stop_program>:
    1698:	ff cf       	rjmp	.-2      	; 0x1698 <__stop_program>
